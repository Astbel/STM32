
UART_Hello.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08040000  08040000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034d4  080401d8  080401d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  080436ac  080436ac  000136ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08043708  08043708  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08043708  08043708  00013708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08043710  08043710  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08043710  08043710  00013710  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08043714  08043714  00013714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08043718  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000194  2000000c  08043724  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a0  08043724  000201a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011301  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000275d  00000000  00000000  0003133d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001068  00000000  00000000  00033aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f68  00000000  00000000  00034b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000271fe  00000000  00000000  00035a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011a81  00000000  00000000  0005cc6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fb8c1  00000000  00000000  0006e6ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00169fb0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044fc  00000000  00000000  0016a000  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080401d8 <__do_global_dtors_aux>:
 80401d8:	b510      	push	{r4, lr}
 80401da:	4c05      	ldr	r4, [pc, #20]	; (80401f0 <__do_global_dtors_aux+0x18>)
 80401dc:	7823      	ldrb	r3, [r4, #0]
 80401de:	b933      	cbnz	r3, 80401ee <__do_global_dtors_aux+0x16>
 80401e0:	4b04      	ldr	r3, [pc, #16]	; (80401f4 <__do_global_dtors_aux+0x1c>)
 80401e2:	b113      	cbz	r3, 80401ea <__do_global_dtors_aux+0x12>
 80401e4:	4804      	ldr	r0, [pc, #16]	; (80401f8 <__do_global_dtors_aux+0x20>)
 80401e6:	f3af 8000 	nop.w
 80401ea:	2301      	movs	r3, #1
 80401ec:	7023      	strb	r3, [r4, #0]
 80401ee:	bd10      	pop	{r4, pc}
 80401f0:	2000000c 	.word	0x2000000c
 80401f4:	00000000 	.word	0x00000000
 80401f8:	08043694 	.word	0x08043694

080401fc <frame_dummy>:
 80401fc:	b508      	push	{r3, lr}
 80401fe:	4b03      	ldr	r3, [pc, #12]	; (804020c <frame_dummy+0x10>)
 8040200:	b11b      	cbz	r3, 804020a <frame_dummy+0xe>
 8040202:	4903      	ldr	r1, [pc, #12]	; (8040210 <frame_dummy+0x14>)
 8040204:	4803      	ldr	r0, [pc, #12]	; (8040214 <frame_dummy+0x18>)
 8040206:	f3af 8000 	nop.w
 804020a:	bd08      	pop	{r3, pc}
 804020c:	00000000 	.word	0x00000000
 8040210:	20000010 	.word	0x20000010
 8040214:	08043694 	.word	0x08043694

08040218 <strlen>:
 8040218:	4603      	mov	r3, r0
 804021a:	f813 2b01 	ldrb.w	r2, [r3], #1
 804021e:	2a00      	cmp	r2, #0
 8040220:	d1fb      	bne.n	804021a <strlen+0x2>
 8040222:	1a18      	subs	r0, r3, r0
 8040224:	3801      	subs	r0, #1
 8040226:	4770      	bx	lr

08040228 <__aeabi_uldivmod>:
 8040228:	b953      	cbnz	r3, 8040240 <__aeabi_uldivmod+0x18>
 804022a:	b94a      	cbnz	r2, 8040240 <__aeabi_uldivmod+0x18>
 804022c:	2900      	cmp	r1, #0
 804022e:	bf08      	it	eq
 8040230:	2800      	cmpeq	r0, #0
 8040232:	bf1c      	itt	ne
 8040234:	f04f 31ff 	movne.w	r1, #4294967295
 8040238:	f04f 30ff 	movne.w	r0, #4294967295
 804023c:	f000 b974 	b.w	8040528 <__aeabi_idiv0>
 8040240:	f1ad 0c08 	sub.w	ip, sp, #8
 8040244:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8040248:	f000 f806 	bl	8040258 <__udivmoddi4>
 804024c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8040250:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8040254:	b004      	add	sp, #16
 8040256:	4770      	bx	lr

08040258 <__udivmoddi4>:
 8040258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 804025c:	9d08      	ldr	r5, [sp, #32]
 804025e:	4604      	mov	r4, r0
 8040260:	468e      	mov	lr, r1
 8040262:	2b00      	cmp	r3, #0
 8040264:	d14d      	bne.n	8040302 <__udivmoddi4+0xaa>
 8040266:	428a      	cmp	r2, r1
 8040268:	4694      	mov	ip, r2
 804026a:	d969      	bls.n	8040340 <__udivmoddi4+0xe8>
 804026c:	fab2 f282 	clz	r2, r2
 8040270:	b152      	cbz	r2, 8040288 <__udivmoddi4+0x30>
 8040272:	fa01 f302 	lsl.w	r3, r1, r2
 8040276:	f1c2 0120 	rsb	r1, r2, #32
 804027a:	fa20 f101 	lsr.w	r1, r0, r1
 804027e:	fa0c fc02 	lsl.w	ip, ip, r2
 8040282:	ea41 0e03 	orr.w	lr, r1, r3
 8040286:	4094      	lsls	r4, r2
 8040288:	ea4f 481c 	mov.w	r8, ip, lsr #16
 804028c:	0c21      	lsrs	r1, r4, #16
 804028e:	fbbe f6f8 	udiv	r6, lr, r8
 8040292:	fa1f f78c 	uxth.w	r7, ip
 8040296:	fb08 e316 	mls	r3, r8, r6, lr
 804029a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 804029e:	fb06 f107 	mul.w	r1, r6, r7
 80402a2:	4299      	cmp	r1, r3
 80402a4:	d90a      	bls.n	80402bc <__udivmoddi4+0x64>
 80402a6:	eb1c 0303 	adds.w	r3, ip, r3
 80402aa:	f106 30ff 	add.w	r0, r6, #4294967295
 80402ae:	f080 811f 	bcs.w	80404f0 <__udivmoddi4+0x298>
 80402b2:	4299      	cmp	r1, r3
 80402b4:	f240 811c 	bls.w	80404f0 <__udivmoddi4+0x298>
 80402b8:	3e02      	subs	r6, #2
 80402ba:	4463      	add	r3, ip
 80402bc:	1a5b      	subs	r3, r3, r1
 80402be:	b2a4      	uxth	r4, r4
 80402c0:	fbb3 f0f8 	udiv	r0, r3, r8
 80402c4:	fb08 3310 	mls	r3, r8, r0, r3
 80402c8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80402cc:	fb00 f707 	mul.w	r7, r0, r7
 80402d0:	42a7      	cmp	r7, r4
 80402d2:	d90a      	bls.n	80402ea <__udivmoddi4+0x92>
 80402d4:	eb1c 0404 	adds.w	r4, ip, r4
 80402d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80402dc:	f080 810a 	bcs.w	80404f4 <__udivmoddi4+0x29c>
 80402e0:	42a7      	cmp	r7, r4
 80402e2:	f240 8107 	bls.w	80404f4 <__udivmoddi4+0x29c>
 80402e6:	4464      	add	r4, ip
 80402e8:	3802      	subs	r0, #2
 80402ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80402ee:	1be4      	subs	r4, r4, r7
 80402f0:	2600      	movs	r6, #0
 80402f2:	b11d      	cbz	r5, 80402fc <__udivmoddi4+0xa4>
 80402f4:	40d4      	lsrs	r4, r2
 80402f6:	2300      	movs	r3, #0
 80402f8:	e9c5 4300 	strd	r4, r3, [r5]
 80402fc:	4631      	mov	r1, r6
 80402fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8040302:	428b      	cmp	r3, r1
 8040304:	d909      	bls.n	804031a <__udivmoddi4+0xc2>
 8040306:	2d00      	cmp	r5, #0
 8040308:	f000 80ef 	beq.w	80404ea <__udivmoddi4+0x292>
 804030c:	2600      	movs	r6, #0
 804030e:	e9c5 0100 	strd	r0, r1, [r5]
 8040312:	4630      	mov	r0, r6
 8040314:	4631      	mov	r1, r6
 8040316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 804031a:	fab3 f683 	clz	r6, r3
 804031e:	2e00      	cmp	r6, #0
 8040320:	d14a      	bne.n	80403b8 <__udivmoddi4+0x160>
 8040322:	428b      	cmp	r3, r1
 8040324:	d302      	bcc.n	804032c <__udivmoddi4+0xd4>
 8040326:	4282      	cmp	r2, r0
 8040328:	f200 80f9 	bhi.w	804051e <__udivmoddi4+0x2c6>
 804032c:	1a84      	subs	r4, r0, r2
 804032e:	eb61 0303 	sbc.w	r3, r1, r3
 8040332:	2001      	movs	r0, #1
 8040334:	469e      	mov	lr, r3
 8040336:	2d00      	cmp	r5, #0
 8040338:	d0e0      	beq.n	80402fc <__udivmoddi4+0xa4>
 804033a:	e9c5 4e00 	strd	r4, lr, [r5]
 804033e:	e7dd      	b.n	80402fc <__udivmoddi4+0xa4>
 8040340:	b902      	cbnz	r2, 8040344 <__udivmoddi4+0xec>
 8040342:	deff      	udf	#255	; 0xff
 8040344:	fab2 f282 	clz	r2, r2
 8040348:	2a00      	cmp	r2, #0
 804034a:	f040 8092 	bne.w	8040472 <__udivmoddi4+0x21a>
 804034e:	eba1 010c 	sub.w	r1, r1, ip
 8040352:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8040356:	fa1f fe8c 	uxth.w	lr, ip
 804035a:	2601      	movs	r6, #1
 804035c:	0c20      	lsrs	r0, r4, #16
 804035e:	fbb1 f3f7 	udiv	r3, r1, r7
 8040362:	fb07 1113 	mls	r1, r7, r3, r1
 8040366:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 804036a:	fb0e f003 	mul.w	r0, lr, r3
 804036e:	4288      	cmp	r0, r1
 8040370:	d908      	bls.n	8040384 <__udivmoddi4+0x12c>
 8040372:	eb1c 0101 	adds.w	r1, ip, r1
 8040376:	f103 38ff 	add.w	r8, r3, #4294967295
 804037a:	d202      	bcs.n	8040382 <__udivmoddi4+0x12a>
 804037c:	4288      	cmp	r0, r1
 804037e:	f200 80cb 	bhi.w	8040518 <__udivmoddi4+0x2c0>
 8040382:	4643      	mov	r3, r8
 8040384:	1a09      	subs	r1, r1, r0
 8040386:	b2a4      	uxth	r4, r4
 8040388:	fbb1 f0f7 	udiv	r0, r1, r7
 804038c:	fb07 1110 	mls	r1, r7, r0, r1
 8040390:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8040394:	fb0e fe00 	mul.w	lr, lr, r0
 8040398:	45a6      	cmp	lr, r4
 804039a:	d908      	bls.n	80403ae <__udivmoddi4+0x156>
 804039c:	eb1c 0404 	adds.w	r4, ip, r4
 80403a0:	f100 31ff 	add.w	r1, r0, #4294967295
 80403a4:	d202      	bcs.n	80403ac <__udivmoddi4+0x154>
 80403a6:	45a6      	cmp	lr, r4
 80403a8:	f200 80bb 	bhi.w	8040522 <__udivmoddi4+0x2ca>
 80403ac:	4608      	mov	r0, r1
 80403ae:	eba4 040e 	sub.w	r4, r4, lr
 80403b2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80403b6:	e79c      	b.n	80402f2 <__udivmoddi4+0x9a>
 80403b8:	f1c6 0720 	rsb	r7, r6, #32
 80403bc:	40b3      	lsls	r3, r6
 80403be:	fa22 fc07 	lsr.w	ip, r2, r7
 80403c2:	ea4c 0c03 	orr.w	ip, ip, r3
 80403c6:	fa20 f407 	lsr.w	r4, r0, r7
 80403ca:	fa01 f306 	lsl.w	r3, r1, r6
 80403ce:	431c      	orrs	r4, r3
 80403d0:	40f9      	lsrs	r1, r7
 80403d2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80403d6:	fa00 f306 	lsl.w	r3, r0, r6
 80403da:	fbb1 f8f9 	udiv	r8, r1, r9
 80403de:	0c20      	lsrs	r0, r4, #16
 80403e0:	fa1f fe8c 	uxth.w	lr, ip
 80403e4:	fb09 1118 	mls	r1, r9, r8, r1
 80403e8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80403ec:	fb08 f00e 	mul.w	r0, r8, lr
 80403f0:	4288      	cmp	r0, r1
 80403f2:	fa02 f206 	lsl.w	r2, r2, r6
 80403f6:	d90b      	bls.n	8040410 <__udivmoddi4+0x1b8>
 80403f8:	eb1c 0101 	adds.w	r1, ip, r1
 80403fc:	f108 3aff 	add.w	sl, r8, #4294967295
 8040400:	f080 8088 	bcs.w	8040514 <__udivmoddi4+0x2bc>
 8040404:	4288      	cmp	r0, r1
 8040406:	f240 8085 	bls.w	8040514 <__udivmoddi4+0x2bc>
 804040a:	f1a8 0802 	sub.w	r8, r8, #2
 804040e:	4461      	add	r1, ip
 8040410:	1a09      	subs	r1, r1, r0
 8040412:	b2a4      	uxth	r4, r4
 8040414:	fbb1 f0f9 	udiv	r0, r1, r9
 8040418:	fb09 1110 	mls	r1, r9, r0, r1
 804041c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8040420:	fb00 fe0e 	mul.w	lr, r0, lr
 8040424:	458e      	cmp	lr, r1
 8040426:	d908      	bls.n	804043a <__udivmoddi4+0x1e2>
 8040428:	eb1c 0101 	adds.w	r1, ip, r1
 804042c:	f100 34ff 	add.w	r4, r0, #4294967295
 8040430:	d26c      	bcs.n	804050c <__udivmoddi4+0x2b4>
 8040432:	458e      	cmp	lr, r1
 8040434:	d96a      	bls.n	804050c <__udivmoddi4+0x2b4>
 8040436:	3802      	subs	r0, #2
 8040438:	4461      	add	r1, ip
 804043a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 804043e:	fba0 9402 	umull	r9, r4, r0, r2
 8040442:	eba1 010e 	sub.w	r1, r1, lr
 8040446:	42a1      	cmp	r1, r4
 8040448:	46c8      	mov	r8, r9
 804044a:	46a6      	mov	lr, r4
 804044c:	d356      	bcc.n	80404fc <__udivmoddi4+0x2a4>
 804044e:	d053      	beq.n	80404f8 <__udivmoddi4+0x2a0>
 8040450:	b15d      	cbz	r5, 804046a <__udivmoddi4+0x212>
 8040452:	ebb3 0208 	subs.w	r2, r3, r8
 8040456:	eb61 010e 	sbc.w	r1, r1, lr
 804045a:	fa01 f707 	lsl.w	r7, r1, r7
 804045e:	fa22 f306 	lsr.w	r3, r2, r6
 8040462:	40f1      	lsrs	r1, r6
 8040464:	431f      	orrs	r7, r3
 8040466:	e9c5 7100 	strd	r7, r1, [r5]
 804046a:	2600      	movs	r6, #0
 804046c:	4631      	mov	r1, r6
 804046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8040472:	f1c2 0320 	rsb	r3, r2, #32
 8040476:	40d8      	lsrs	r0, r3
 8040478:	fa0c fc02 	lsl.w	ip, ip, r2
 804047c:	fa21 f303 	lsr.w	r3, r1, r3
 8040480:	4091      	lsls	r1, r2
 8040482:	4301      	orrs	r1, r0
 8040484:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8040488:	fa1f fe8c 	uxth.w	lr, ip
 804048c:	fbb3 f0f7 	udiv	r0, r3, r7
 8040490:	fb07 3610 	mls	r6, r7, r0, r3
 8040494:	0c0b      	lsrs	r3, r1, #16
 8040496:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 804049a:	fb00 f60e 	mul.w	r6, r0, lr
 804049e:	429e      	cmp	r6, r3
 80404a0:	fa04 f402 	lsl.w	r4, r4, r2
 80404a4:	d908      	bls.n	80404b8 <__udivmoddi4+0x260>
 80404a6:	eb1c 0303 	adds.w	r3, ip, r3
 80404aa:	f100 38ff 	add.w	r8, r0, #4294967295
 80404ae:	d22f      	bcs.n	8040510 <__udivmoddi4+0x2b8>
 80404b0:	429e      	cmp	r6, r3
 80404b2:	d92d      	bls.n	8040510 <__udivmoddi4+0x2b8>
 80404b4:	3802      	subs	r0, #2
 80404b6:	4463      	add	r3, ip
 80404b8:	1b9b      	subs	r3, r3, r6
 80404ba:	b289      	uxth	r1, r1
 80404bc:	fbb3 f6f7 	udiv	r6, r3, r7
 80404c0:	fb07 3316 	mls	r3, r7, r6, r3
 80404c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80404c8:	fb06 f30e 	mul.w	r3, r6, lr
 80404cc:	428b      	cmp	r3, r1
 80404ce:	d908      	bls.n	80404e2 <__udivmoddi4+0x28a>
 80404d0:	eb1c 0101 	adds.w	r1, ip, r1
 80404d4:	f106 38ff 	add.w	r8, r6, #4294967295
 80404d8:	d216      	bcs.n	8040508 <__udivmoddi4+0x2b0>
 80404da:	428b      	cmp	r3, r1
 80404dc:	d914      	bls.n	8040508 <__udivmoddi4+0x2b0>
 80404de:	3e02      	subs	r6, #2
 80404e0:	4461      	add	r1, ip
 80404e2:	1ac9      	subs	r1, r1, r3
 80404e4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80404e8:	e738      	b.n	804035c <__udivmoddi4+0x104>
 80404ea:	462e      	mov	r6, r5
 80404ec:	4628      	mov	r0, r5
 80404ee:	e705      	b.n	80402fc <__udivmoddi4+0xa4>
 80404f0:	4606      	mov	r6, r0
 80404f2:	e6e3      	b.n	80402bc <__udivmoddi4+0x64>
 80404f4:	4618      	mov	r0, r3
 80404f6:	e6f8      	b.n	80402ea <__udivmoddi4+0x92>
 80404f8:	454b      	cmp	r3, r9
 80404fa:	d2a9      	bcs.n	8040450 <__udivmoddi4+0x1f8>
 80404fc:	ebb9 0802 	subs.w	r8, r9, r2
 8040500:	eb64 0e0c 	sbc.w	lr, r4, ip
 8040504:	3801      	subs	r0, #1
 8040506:	e7a3      	b.n	8040450 <__udivmoddi4+0x1f8>
 8040508:	4646      	mov	r6, r8
 804050a:	e7ea      	b.n	80404e2 <__udivmoddi4+0x28a>
 804050c:	4620      	mov	r0, r4
 804050e:	e794      	b.n	804043a <__udivmoddi4+0x1e2>
 8040510:	4640      	mov	r0, r8
 8040512:	e7d1      	b.n	80404b8 <__udivmoddi4+0x260>
 8040514:	46d0      	mov	r8, sl
 8040516:	e77b      	b.n	8040410 <__udivmoddi4+0x1b8>
 8040518:	3b02      	subs	r3, #2
 804051a:	4461      	add	r1, ip
 804051c:	e732      	b.n	8040384 <__udivmoddi4+0x12c>
 804051e:	4630      	mov	r0, r6
 8040520:	e709      	b.n	8040336 <__udivmoddi4+0xde>
 8040522:	4464      	add	r4, ip
 8040524:	3802      	subs	r0, #2
 8040526:	e742      	b.n	80403ae <__udivmoddi4+0x156>

08040528 <__aeabi_idiv0>:
 8040528:	4770      	bx	lr
 804052a:	bf00      	nop

0804052c <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 804052c:	b480      	push	{r7}
 804052e:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 8040530:	4b0d      	ldr	r3, [pc, #52]	; (8040568 <Ringbuf_init+0x3c>)
 8040532:	4a0e      	ldr	r2, [pc, #56]	; (804056c <Ringbuf_init+0x40>)
 8040534:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 8040536:	4b0e      	ldr	r3, [pc, #56]	; (8040570 <Ringbuf_init+0x44>)
 8040538:	4a0e      	ldr	r2, [pc, #56]	; (8040574 <Ringbuf_init+0x48>)
 804053a:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_ERR);
 804053c:	4b0e      	ldr	r3, [pc, #56]	; (8040578 <Ringbuf_init+0x4c>)
 804053e:	681b      	ldr	r3, [r3, #0]
 8040540:	689a      	ldr	r2, [r3, #8]
 8040542:	4b0d      	ldr	r3, [pc, #52]	; (8040578 <Ringbuf_init+0x4c>)
 8040544:	681b      	ldr	r3, [r3, #0]
 8040546:	f042 0201 	orr.w	r2, r2, #1
 804054a:	609a      	str	r2, [r3, #8]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 804054c:	4b0a      	ldr	r3, [pc, #40]	; (8040578 <Ringbuf_init+0x4c>)
 804054e:	681b      	ldr	r3, [r3, #0]
 8040550:	681a      	ldr	r2, [r3, #0]
 8040552:	4b09      	ldr	r3, [pc, #36]	; (8040578 <Ringbuf_init+0x4c>)
 8040554:	681b      	ldr	r3, [r3, #0]
 8040556:	f042 0220 	orr.w	r2, r2, #32
 804055a:	601a      	str	r2, [r3, #0]
}
 804055c:	bf00      	nop
 804055e:	46bd      	mov	sp, r7
 8040560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040564:	4770      	bx	lr
 8040566:	bf00      	nop
 8040568:	200000bc 	.word	0x200000bc
 804056c:	2000002c 	.word	0x2000002c
 8040570:	200000c0 	.word	0x200000c0
 8040574:	20000074 	.word	0x20000074
 8040578:	20000110 	.word	0x20000110

0804057c <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 804057c:	b480      	push	{r7}
 804057e:	b085      	sub	sp, #20
 8040580:	af00      	add	r7, sp, #0
 8040582:	4603      	mov	r3, r0
 8040584:	6039      	str	r1, [r7, #0]
 8040586:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8040588:	683b      	ldr	r3, [r7, #0]
 804058a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804058c:	3301      	adds	r3, #1
 804058e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8040592:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8040594:	683b      	ldr	r3, [r7, #0]
 8040596:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8040598:	68fb      	ldr	r3, [r7, #12]
 804059a:	429a      	cmp	r2, r3
 804059c:	d007      	beq.n	80405ae <store_char+0x32>
    buffer->buffer[buffer->head] = c;
 804059e:	683b      	ldr	r3, [r7, #0]
 80405a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80405a2:	683a      	ldr	r2, [r7, #0]
 80405a4:	79f9      	ldrb	r1, [r7, #7]
 80405a6:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 80405a8:	68fa      	ldr	r2, [r7, #12]
 80405aa:	683b      	ldr	r3, [r7, #0]
 80405ac:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 80405ae:	bf00      	nop
 80405b0:	3714      	adds	r7, #20
 80405b2:	46bd      	mov	sp, r7
 80405b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80405b8:	4770      	bx	lr
	...

080405bc <Uart_read>:
	if (so_far == stringlength) return 1;
	else return -1;
}

int Uart_read(void)
{
 80405bc:	b480      	push	{r7}
 80405be:	b083      	sub	sp, #12
 80405c0:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 80405c2:	4b11      	ldr	r3, [pc, #68]	; (8040608 <Uart_read+0x4c>)
 80405c4:	681b      	ldr	r3, [r3, #0]
 80405c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80405c8:	4b0f      	ldr	r3, [pc, #60]	; (8040608 <Uart_read+0x4c>)
 80405ca:	681b      	ldr	r3, [r3, #0]
 80405cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80405ce:	429a      	cmp	r2, r3
 80405d0:	d102      	bne.n	80405d8 <Uart_read+0x1c>
  {
    return -1;
 80405d2:	f04f 33ff 	mov.w	r3, #4294967295
 80405d6:	e010      	b.n	80405fa <Uart_read+0x3e>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 80405d8:	4b0b      	ldr	r3, [pc, #44]	; (8040608 <Uart_read+0x4c>)
 80405da:	681a      	ldr	r2, [r3, #0]
 80405dc:	4b0a      	ldr	r3, [pc, #40]	; (8040608 <Uart_read+0x4c>)
 80405de:	681b      	ldr	r3, [r3, #0]
 80405e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80405e2:	5cd3      	ldrb	r3, [r2, r3]
 80405e4:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 80405e6:	4b08      	ldr	r3, [pc, #32]	; (8040608 <Uart_read+0x4c>)
 80405e8:	681b      	ldr	r3, [r3, #0]
 80405ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80405ec:	1c5a      	adds	r2, r3, #1
 80405ee:	4b06      	ldr	r3, [pc, #24]	; (8040608 <Uart_read+0x4c>)
 80405f0:	681b      	ldr	r3, [r3, #0]
 80405f2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80405f6:	645a      	str	r2, [r3, #68]	; 0x44
    return c;
 80405f8:	79fb      	ldrb	r3, [r7, #7]
  }
}
 80405fa:	4618      	mov	r0, r3
 80405fc:	370c      	adds	r7, #12
 80405fe:	46bd      	mov	sp, r7
 8040600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040604:	4770      	bx	lr
 8040606:	bf00      	nop
 8040608:	200000bc 	.word	0x200000bc

0804060c <Uart_write>:

void Uart_write(int c)
{
 804060c:	b480      	push	{r7}
 804060e:	b085      	sub	sp, #20
 8040610:	af00      	add	r7, sp, #0
 8040612:	6078      	str	r0, [r7, #4]
	if (c>=0)
 8040614:	687b      	ldr	r3, [r7, #4]
 8040616:	2b00      	cmp	r3, #0
 8040618:	db21      	blt.n	804065e <Uart_write+0x52>
	{
		int i = (_tx_buffer->head + 1) % UART_BUFFER_SIZE;
 804061a:	4b14      	ldr	r3, [pc, #80]	; (804066c <Uart_write+0x60>)
 804061c:	681b      	ldr	r3, [r3, #0]
 804061e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8040620:	3301      	adds	r3, #1
 8040622:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8040626:	60fb      	str	r3, [r7, #12]

		// If the output buffer is full, there's nothing for it other than to
		// wait for the interrupt handler to empty it a bit
		// ???: return 0 here instead?
		while (i == _tx_buffer->tail);
 8040628:	bf00      	nop
 804062a:	4b10      	ldr	r3, [pc, #64]	; (804066c <Uart_write+0x60>)
 804062c:	681b      	ldr	r3, [r3, #0]
 804062e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8040630:	68fb      	ldr	r3, [r7, #12]
 8040632:	429a      	cmp	r2, r3
 8040634:	d0f9      	beq.n	804062a <Uart_write+0x1e>

		_tx_buffer->buffer[_tx_buffer->head] = (uint8_t)c;
 8040636:	4b0d      	ldr	r3, [pc, #52]	; (804066c <Uart_write+0x60>)
 8040638:	681a      	ldr	r2, [r3, #0]
 804063a:	4b0c      	ldr	r3, [pc, #48]	; (804066c <Uart_write+0x60>)
 804063c:	681b      	ldr	r3, [r3, #0]
 804063e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8040640:	6879      	ldr	r1, [r7, #4]
 8040642:	b2c9      	uxtb	r1, r1
 8040644:	54d1      	strb	r1, [r2, r3]
		_tx_buffer->head = i;
 8040646:	4b09      	ldr	r3, [pc, #36]	; (804066c <Uart_write+0x60>)
 8040648:	681b      	ldr	r3, [r3, #0]
 804064a:	68fa      	ldr	r2, [r7, #12]
 804064c:	641a      	str	r2, [r3, #64]	; 0x40

		__HAL_UART_ENABLE_IT(&huart1, UART_IT_TXE); // Enable UART transmission interrupt
 804064e:	4b08      	ldr	r3, [pc, #32]	; (8040670 <Uart_write+0x64>)
 8040650:	681b      	ldr	r3, [r3, #0]
 8040652:	681a      	ldr	r2, [r3, #0]
 8040654:	4b06      	ldr	r3, [pc, #24]	; (8040670 <Uart_write+0x64>)
 8040656:	681b      	ldr	r3, [r3, #0]
 8040658:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 804065c:	601a      	str	r2, [r3, #0]
	}
}
 804065e:	bf00      	nop
 8040660:	3714      	adds	r7, #20
 8040662:	46bd      	mov	sp, r7
 8040664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040668:	4770      	bx	lr
 804066a:	bf00      	nop
 804066c:	200000c0 	.word	0x200000c0
 8040670:	20000110 	.word	0x20000110

08040674 <IsDataAvailable>:

int IsDataAvailable(void)
{
 8040674:	b480      	push	{r7}
 8040676:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 8040678:	4b09      	ldr	r3, [pc, #36]	; (80406a0 <IsDataAvailable+0x2c>)
 804067a:	681b      	ldr	r3, [r3, #0]
 804067c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804067e:	b29a      	uxth	r2, r3
 8040680:	4b07      	ldr	r3, [pc, #28]	; (80406a0 <IsDataAvailable+0x2c>)
 8040682:	681b      	ldr	r3, [r3, #0]
 8040684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8040686:	b29b      	uxth	r3, r3
 8040688:	1ad3      	subs	r3, r2, r3
 804068a:	b29b      	uxth	r3, r3
 804068c:	3340      	adds	r3, #64	; 0x40
 804068e:	b29b      	uxth	r3, r3
 8040690:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8040694:	4618      	mov	r0, r3
 8040696:	46bd      	mov	sp, r7
 8040698:	f85d 7b04 	ldr.w	r7, [sp], #4
 804069c:	4770      	bx	lr
 804069e:	bf00      	nop
 80406a0:	200000bc 	.word	0x200000bc

080406a4 <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 80406a4:	b580      	push	{r7, lr}
 80406a6:	b086      	sub	sp, #24
 80406a8:	af00      	add	r7, sp, #0
 80406aa:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80406ac:	687b      	ldr	r3, [r7, #4]
 80406ae:	681b      	ldr	r3, [r3, #0]
 80406b0:	69db      	ldr	r3, [r3, #28]
 80406b2:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80406b4:	687b      	ldr	r3, [r7, #4]
 80406b6:	681b      	ldr	r3, [r3, #0]
 80406b8:	681b      	ldr	r3, [r3, #0]
 80406ba:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_ISR_RXNE_RXFNE) != RESET) && ((cr1its & USART_CR1_RXNEIE_RXFNEIE) != RESET))
 80406bc:	697b      	ldr	r3, [r7, #20]
 80406be:	f003 0320 	and.w	r3, r3, #32
 80406c2:	2b00      	cmp	r3, #0
 80406c4:	d013      	beq.n	80406ee <Uart_isr+0x4a>
 80406c6:	693b      	ldr	r3, [r7, #16]
 80406c8:	f003 0320 	and.w	r3, r3, #32
 80406cc:	2b00      	cmp	r3, #0
 80406ce:	d00e      	beq.n	80406ee <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
    	huart->Instance->ISR;                       /* Read status register */
 80406d0:	687b      	ldr	r3, [r7, #4]
 80406d2:	681b      	ldr	r3, [r3, #0]
 80406d4:	69db      	ldr	r3, [r3, #28]
        unsigned char c = huart->Instance->RDR;     /* Read data register */
 80406d6:	687b      	ldr	r3, [r7, #4]
 80406d8:	681b      	ldr	r3, [r3, #0]
 80406da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80406dc:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 80406de:	4b1c      	ldr	r3, [pc, #112]	; (8040750 <Uart_isr+0xac>)
 80406e0:	681a      	ldr	r2, [r3, #0]
 80406e2:	7bfb      	ldrb	r3, [r7, #15]
 80406e4:	4611      	mov	r1, r2
 80406e6:	4618      	mov	r0, r3
 80406e8:	f7ff ff48 	bl	804057c <store_char>
        return;
 80406ec:	e02c      	b.n	8040748 <Uart_isr+0xa4>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_ISR_TXE_TXFNF) != RESET) && ((cr1its & USART_CR1_TXEIE_TXFNFIE) != RESET))
 80406ee:	697b      	ldr	r3, [r7, #20]
 80406f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80406f4:	2b00      	cmp	r3, #0
 80406f6:	d027      	beq.n	8040748 <Uart_isr+0xa4>
 80406f8:	693b      	ldr	r3, [r7, #16]
 80406fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80406fe:	2b00      	cmp	r3, #0
 8040700:	d022      	beq.n	8040748 <Uart_isr+0xa4>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 8040702:	4b14      	ldr	r3, [pc, #80]	; (8040754 <Uart_isr+0xb0>)
 8040704:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8040706:	4b13      	ldr	r3, [pc, #76]	; (8040754 <Uart_isr+0xb0>)
 8040708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804070a:	429a      	cmp	r2, r3
 804070c:	d108      	bne.n	8040720 <Uart_isr+0x7c>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 804070e:	687b      	ldr	r3, [r7, #4]
 8040710:	681b      	ldr	r3, [r3, #0]
 8040712:	681a      	ldr	r2, [r3, #0]
 8040714:	687b      	ldr	r3, [r7, #4]
 8040716:	681b      	ldr	r3, [r3, #0]
 8040718:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 804071c:	601a      	str	r2, [r3, #0]

    	      huart->Instance->ISR;
    	      huart->Instance->TDR = c;

    	    }
    	return;
 804071e:	e012      	b.n	8040746 <Uart_isr+0xa2>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 8040720:	4b0c      	ldr	r3, [pc, #48]	; (8040754 <Uart_isr+0xb0>)
 8040722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8040724:	4a0b      	ldr	r2, [pc, #44]	; (8040754 <Uart_isr+0xb0>)
 8040726:	5cd3      	ldrb	r3, [r2, r3]
 8040728:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 804072a:	4b0a      	ldr	r3, [pc, #40]	; (8040754 <Uart_isr+0xb0>)
 804072c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804072e:	3301      	adds	r3, #1
 8040730:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8040734:	4a07      	ldr	r2, [pc, #28]	; (8040754 <Uart_isr+0xb0>)
 8040736:	6453      	str	r3, [r2, #68]	; 0x44
    	      huart->Instance->ISR;
 8040738:	687b      	ldr	r3, [r7, #4]
 804073a:	681b      	ldr	r3, [r3, #0]
 804073c:	69db      	ldr	r3, [r3, #28]
    	      huart->Instance->TDR = c;
 804073e:	687b      	ldr	r3, [r7, #4]
 8040740:	681b      	ldr	r3, [r3, #0]
 8040742:	7bba      	ldrb	r2, [r7, #14]
 8040744:	629a      	str	r2, [r3, #40]	; 0x28
    	return;
 8040746:	bf00      	nop
    }
}
 8040748:	3718      	adds	r7, #24
 804074a:	46bd      	mov	sp, r7
 804074c:	bd80      	pop	{r7, pc}
 804074e:	bf00      	nop
 8040750:	200000bc 	.word	0x200000bc
 8040754:	20000074 	.word	0x20000074

08040758 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8040758:	b580      	push	{r7, lr}
 804075a:	b082      	sub	sp, #8
 804075c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 804075e:	f000 fa7e 	bl	8040c5e <HAL_Init>

  /* USER CODE BEGIN Init */
  Flash_done_Flag =0;
 8040762:	4b0d      	ldr	r3, [pc, #52]	; (8040798 <main+0x40>)
 8040764:	2200      	movs	r2, #0
 8040766:	701a      	strb	r2, [r3, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8040768:	f000 f81a 	bl	80407a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 804076c:	f000 f8cc 	bl	8040908 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8040770:	f000 f87e 	bl	8040870 <MX_USART1_UART_Init>
  // MX_TIM16_Init();

  // Flash_Data(FLASH_USER_START_ADDR,FLASH_USER_END_ADDR,Initial_DATA);
  /* USER CODE BEGIN 2 */
  // HAL_TIM_Base_Start_IT(&htim16);
  Ringbuf_init ();
 8040774:	f7ff feda 	bl	804052c <Ringbuf_init>
  uart_send_msg("Hello from user app\r\n");
 8040778:	4808      	ldr	r0, [pc, #32]	; (804079c <main+0x44>)
 804077a:	f000 fa2f 	bl	8040bdc <uart_send_msg>
  //  uart_send_msg("End of initalize system\r\n");

    // HAL_UART_Receive_IT(&huart1,aRxMessage,1);
  while (1)
  {
      if (IsDataAvailable())
 804077e:	f7ff ff79 	bl	8040674 <IsDataAvailable>
 8040782:	4603      	mov	r3, r0
 8040784:	2b00      	cmp	r3, #0
 8040786:	d0fa      	beq.n	804077e <main+0x26>
      {
         int data=Uart_read();
 8040788:	f7ff ff18 	bl	80405bc <Uart_read>
 804078c:	6078      	str	r0, [r7, #4]
         Uart_write(data);
 804078e:	6878      	ldr	r0, [r7, #4]
 8040790:	f7ff ff3c 	bl	804060c <Uart_write>
      if (IsDataAvailable())
 8040794:	e7f3      	b.n	804077e <main+0x26>
 8040796:	bf00      	nop
 8040798:	20000028 	.word	0x20000028
 804079c:	080436ac 	.word	0x080436ac

080407a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80407a0:	b580      	push	{r7, lr}
 80407a2:	b0a8      	sub	sp, #160	; 0xa0
 80407a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80407a6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80407aa:	2238      	movs	r2, #56	; 0x38
 80407ac:	2100      	movs	r1, #0
 80407ae:	4618      	mov	r0, r3
 80407b0:	f002 ff68 	bl	8043684 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80407b4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80407b8:	2200      	movs	r2, #0
 80407ba:	601a      	str	r2, [r3, #0]
 80407bc:	605a      	str	r2, [r3, #4]
 80407be:	609a      	str	r2, [r3, #8]
 80407c0:	60da      	str	r2, [r3, #12]
 80407c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80407c4:	463b      	mov	r3, r7
 80407c6:	2254      	movs	r2, #84	; 0x54
 80407c8:	2100      	movs	r1, #0
 80407ca:	4618      	mov	r0, r3
 80407cc:	f002 ff5a 	bl	8043684 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80407d0:	2000      	movs	r0, #0
 80407d2:	f000 fd9d 	bl	8041310 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80407d6:	2302      	movs	r3, #2
 80407d8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80407da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80407de:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80407e0:	2340      	movs	r3, #64	; 0x40
 80407e2:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80407e4:	2302      	movs	r3, #2
 80407e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80407ea:	2302      	movs	r3, #2
 80407ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80407f0:	2301      	movs	r3, #1
 80407f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 20;
 80407f6:	2314      	movs	r3, #20
 80407f8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80407fc:	2302      	movs	r3, #2
 80407fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8040802:	2302      	movs	r3, #2
 8040804:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8040808:	2302      	movs	r3, #2
 804080a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 804080e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8040812:	4618      	mov	r0, r3
 8040814:	f000 fe30 	bl	8041478 <HAL_RCC_OscConfig>
 8040818:	4603      	mov	r3, r0
 804081a:	2b00      	cmp	r3, #0
 804081c:	d001      	beq.n	8040822 <SystemClock_Config+0x82>
  {
    Error_Handler();
 804081e:	f000 f90b 	bl	8040a38 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8040822:	230f      	movs	r3, #15
 8040824:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8040826:	2303      	movs	r3, #3
 8040828:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 804082a:	2300      	movs	r3, #0
 804082c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 804082e:	2300      	movs	r3, #0
 8040830:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8040832:	2300      	movs	r3, #0
 8040834:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8040836:	f107 0354 	add.w	r3, r7, #84	; 0x54
 804083a:	2104      	movs	r1, #4
 804083c:	4618      	mov	r0, r3
 804083e:	f001 f933 	bl	8041aa8 <HAL_RCC_ClockConfig>
 8040842:	4603      	mov	r3, r0
 8040844:	2b00      	cmp	r3, #0
 8040846:	d001      	beq.n	804084c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8040848:	f000 f8f6 	bl	8040a38 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 804084c:	2301      	movs	r3, #1
 804084e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8040850:	2300      	movs	r3, #0
 8040852:	607b      	str	r3, [r7, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8040854:	463b      	mov	r3, r7
 8040856:	4618      	mov	r0, r3
 8040858:	f001 fb42 	bl	8041ee0 <HAL_RCCEx_PeriphCLKConfig>
 804085c:	4603      	mov	r3, r0
 804085e:	2b00      	cmp	r3, #0
 8040860:	d001      	beq.n	8040866 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8040862:	f000 f8e9 	bl	8040a38 <Error_Handler>
  }
}
 8040866:	bf00      	nop
 8040868:	37a0      	adds	r7, #160	; 0xa0
 804086a:	46bd      	mov	sp, r7
 804086c:	bd80      	pop	{r7, pc}
	...

08040870 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8040870:	b580      	push	{r7, lr}
 8040872:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8040874:	4b22      	ldr	r3, [pc, #136]	; (8040900 <MX_USART1_UART_Init+0x90>)
 8040876:	4a23      	ldr	r2, [pc, #140]	; (8040904 <MX_USART1_UART_Init+0x94>)
 8040878:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 804087a:	4b21      	ldr	r3, [pc, #132]	; (8040900 <MX_USART1_UART_Init+0x90>)
 804087c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8040880:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8040882:	4b1f      	ldr	r3, [pc, #124]	; (8040900 <MX_USART1_UART_Init+0x90>)
 8040884:	2200      	movs	r2, #0
 8040886:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8040888:	4b1d      	ldr	r3, [pc, #116]	; (8040900 <MX_USART1_UART_Init+0x90>)
 804088a:	2200      	movs	r2, #0
 804088c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 804088e:	4b1c      	ldr	r3, [pc, #112]	; (8040900 <MX_USART1_UART_Init+0x90>)
 8040890:	2200      	movs	r2, #0
 8040892:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8040894:	4b1a      	ldr	r3, [pc, #104]	; (8040900 <MX_USART1_UART_Init+0x90>)
 8040896:	220c      	movs	r2, #12
 8040898:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 804089a:	4b19      	ldr	r3, [pc, #100]	; (8040900 <MX_USART1_UART_Init+0x90>)
 804089c:	2200      	movs	r2, #0
 804089e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80408a0:	4b17      	ldr	r3, [pc, #92]	; (8040900 <MX_USART1_UART_Init+0x90>)
 80408a2:	2200      	movs	r2, #0
 80408a4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80408a6:	4b16      	ldr	r3, [pc, #88]	; (8040900 <MX_USART1_UART_Init+0x90>)
 80408a8:	2200      	movs	r2, #0
 80408aa:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80408ac:	4b14      	ldr	r3, [pc, #80]	; (8040900 <MX_USART1_UART_Init+0x90>)
 80408ae:	2200      	movs	r2, #0
 80408b0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80408b2:	4b13      	ldr	r3, [pc, #76]	; (8040900 <MX_USART1_UART_Init+0x90>)
 80408b4:	2200      	movs	r2, #0
 80408b6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80408b8:	4811      	ldr	r0, [pc, #68]	; (8040900 <MX_USART1_UART_Init+0x90>)
 80408ba:	f001 ff4c 	bl	8042756 <HAL_UART_Init>
 80408be:	4603      	mov	r3, r0
 80408c0:	2b00      	cmp	r3, #0
 80408c2:	d001      	beq.n	80408c8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80408c4:	f000 f8b8 	bl	8040a38 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80408c8:	2100      	movs	r1, #0
 80408ca:	480d      	ldr	r0, [pc, #52]	; (8040900 <MX_USART1_UART_Init+0x90>)
 80408cc:	f002 fdd5 	bl	804347a <HAL_UARTEx_SetTxFifoThreshold>
 80408d0:	4603      	mov	r3, r0
 80408d2:	2b00      	cmp	r3, #0
 80408d4:	d001      	beq.n	80408da <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80408d6:	f000 f8af 	bl	8040a38 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80408da:	2100      	movs	r1, #0
 80408dc:	4808      	ldr	r0, [pc, #32]	; (8040900 <MX_USART1_UART_Init+0x90>)
 80408de:	f002 fe0a 	bl	80434f6 <HAL_UARTEx_SetRxFifoThreshold>
 80408e2:	4603      	mov	r3, r0
 80408e4:	2b00      	cmp	r3, #0
 80408e6:	d001      	beq.n	80408ec <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80408e8:	f000 f8a6 	bl	8040a38 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80408ec:	4804      	ldr	r0, [pc, #16]	; (8040900 <MX_USART1_UART_Init+0x90>)
 80408ee:	f002 fd8b 	bl	8043408 <HAL_UARTEx_DisableFifoMode>
 80408f2:	4603      	mov	r3, r0
 80408f4:	2b00      	cmp	r3, #0
 80408f6:	d001      	beq.n	80408fc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80408f8:	f000 f89e 	bl	8040a38 <Error_Handler>
  /* USER CODE BEGIN USART1_Init 2 */
  // __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);  // enable receive intterupts
  // __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);  // enable idle line detection
  /* USER CODE END USART1_Init 2 */

}
 80408fc:	bf00      	nop
 80408fe:	bd80      	pop	{r7, pc}
 8040900:	20000110 	.word	0x20000110
 8040904:	40013800 	.word	0x40013800

08040908 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8040908:	b580      	push	{r7, lr}
 804090a:	b08a      	sub	sp, #40	; 0x28
 804090c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 804090e:	f107 0314 	add.w	r3, r7, #20
 8040912:	2200      	movs	r2, #0
 8040914:	601a      	str	r2, [r3, #0]
 8040916:	605a      	str	r2, [r3, #4]
 8040918:	609a      	str	r2, [r3, #8]
 804091a:	60da      	str	r2, [r3, #12]
 804091c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 804091e:	4b37      	ldr	r3, [pc, #220]	; (80409fc <MX_GPIO_Init+0xf4>)
 8040920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040922:	4a36      	ldr	r2, [pc, #216]	; (80409fc <MX_GPIO_Init+0xf4>)
 8040924:	f043 0304 	orr.w	r3, r3, #4
 8040928:	64d3      	str	r3, [r2, #76]	; 0x4c
 804092a:	4b34      	ldr	r3, [pc, #208]	; (80409fc <MX_GPIO_Init+0xf4>)
 804092c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 804092e:	f003 0304 	and.w	r3, r3, #4
 8040932:	613b      	str	r3, [r7, #16]
 8040934:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8040936:	4b31      	ldr	r3, [pc, #196]	; (80409fc <MX_GPIO_Init+0xf4>)
 8040938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 804093a:	4a30      	ldr	r2, [pc, #192]	; (80409fc <MX_GPIO_Init+0xf4>)
 804093c:	f043 0320 	orr.w	r3, r3, #32
 8040940:	64d3      	str	r3, [r2, #76]	; 0x4c
 8040942:	4b2e      	ldr	r3, [pc, #184]	; (80409fc <MX_GPIO_Init+0xf4>)
 8040944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040946:	f003 0320 	and.w	r3, r3, #32
 804094a:	60fb      	str	r3, [r7, #12]
 804094c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 804094e:	4b2b      	ldr	r3, [pc, #172]	; (80409fc <MX_GPIO_Init+0xf4>)
 8040950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040952:	4a2a      	ldr	r2, [pc, #168]	; (80409fc <MX_GPIO_Init+0xf4>)
 8040954:	f043 0301 	orr.w	r3, r3, #1
 8040958:	64d3      	str	r3, [r2, #76]	; 0x4c
 804095a:	4b28      	ldr	r3, [pc, #160]	; (80409fc <MX_GPIO_Init+0xf4>)
 804095c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 804095e:	f003 0301 	and.w	r3, r3, #1
 8040962:	60bb      	str	r3, [r7, #8]
 8040964:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8040966:	4b25      	ldr	r3, [pc, #148]	; (80409fc <MX_GPIO_Init+0xf4>)
 8040968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 804096a:	4a24      	ldr	r2, [pc, #144]	; (80409fc <MX_GPIO_Init+0xf4>)
 804096c:	f043 0302 	orr.w	r3, r3, #2
 8040970:	64d3      	str	r3, [r2, #76]	; 0x4c
 8040972:	4b22      	ldr	r3, [pc, #136]	; (80409fc <MX_GPIO_Init+0xf4>)
 8040974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040976:	f003 0302 	and.w	r3, r3, #2
 804097a:	607b      	str	r3, [r7, #4]
 804097c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 804097e:	2200      	movs	r2, #0
 8040980:	2120      	movs	r1, #32
 8040982:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8040986:	f000 fc6d 	bl	8041264 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 804098a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 804098e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8040990:	4b1b      	ldr	r3, [pc, #108]	; (8040a00 <MX_GPIO_Init+0xf8>)
 8040992:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040994:	2300      	movs	r3, #0
 8040996:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8040998:	f107 0314 	add.w	r3, r7, #20
 804099c:	4619      	mov	r1, r3
 804099e:	4819      	ldr	r0, [pc, #100]	; (8040a04 <MX_GPIO_Init+0xfc>)
 80409a0:	f000 fade 	bl	8040f60 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPUART1_TX_Pin LPUART1_RX_Pin */
  GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80409a4:	230c      	movs	r3, #12
 80409a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80409a8:	2302      	movs	r3, #2
 80409aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80409ac:	2300      	movs	r3, #0
 80409ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80409b0:	2300      	movs	r3, #0
 80409b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80409b4:	230c      	movs	r3, #12
 80409b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80409b8:	f107 0314 	add.w	r3, r7, #20
 80409bc:	4619      	mov	r1, r3
 80409be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80409c2:	f000 facd 	bl	8040f60 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80409c6:	2320      	movs	r3, #32
 80409c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80409ca:	2301      	movs	r3, #1
 80409cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80409ce:	2300      	movs	r3, #0
 80409d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80409d2:	2300      	movs	r3, #0
 80409d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80409d6:	f107 0314 	add.w	r3, r7, #20
 80409da:	4619      	mov	r1, r3
 80409dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80409e0:	f000 fabe 	bl	8040f60 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80409e4:	2200      	movs	r2, #0
 80409e6:	2100      	movs	r1, #0
 80409e8:	2028      	movs	r0, #40	; 0x28
 80409ea:	f000 fa84 	bl	8040ef6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80409ee:	2028      	movs	r0, #40	; 0x28
 80409f0:	f000 fa9b 	bl	8040f2a <HAL_NVIC_EnableIRQ>

}
 80409f4:	bf00      	nop
 80409f6:	3728      	adds	r7, #40	; 0x28
 80409f8:	46bd      	mov	sp, r7
 80409fa:	bd80      	pop	{r7, pc}
 80409fc:	40021000 	.word	0x40021000
 8040a00:	10110000 	.word	0x10110000
 8040a04:	48000800 	.word	0x48000800

08040a08 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8040a08:	b580      	push	{r7, lr}
 8040a0a:	b082      	sub	sp, #8
 8040a0c:	af00      	add	r7, sp, #0
 8040a0e:	6078      	str	r0, [r7, #4]
  if (Flash_done_Flag==0)
 8040a10:	4b07      	ldr	r3, [pc, #28]	; (8040a30 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8040a12:	781b      	ldrb	r3, [r3, #0]
 8040a14:	2b00      	cmp	r3, #0
 8040a16:	d107      	bne.n	8040a28 <HAL_TIM_PeriodElapsedCallback+0x20>
  {
   	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8040a18:	2120      	movs	r1, #32
 8040a1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8040a1e:	f000 fc39 	bl	8041294 <HAL_GPIO_TogglePin>
	  uart_send_msg(".");
 8040a22:	4804      	ldr	r0, [pc, #16]	; (8040a34 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8040a24:	f000 f8da 	bl	8040bdc <uart_send_msg>
  }
}
 8040a28:	bf00      	nop
 8040a2a:	3708      	adds	r7, #8
 8040a2c:	46bd      	mov	sp, r7
 8040a2e:	bd80      	pop	{r7, pc}
 8040a30:	20000028 	.word	0x20000028
 8040a34:	080436c4 	.word	0x080436c4

08040a38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8040a38:	b480      	push	{r7}
 8040a3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8040a3c:	b672      	cpsid	i
}
 8040a3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8040a40:	e7fe      	b.n	8040a40 <Error_Handler+0x8>
	...

08040a44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8040a44:	b580      	push	{r7, lr}
 8040a46:	b082      	sub	sp, #8
 8040a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8040a4a:	4b0f      	ldr	r3, [pc, #60]	; (8040a88 <HAL_MspInit+0x44>)
 8040a4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8040a4e:	4a0e      	ldr	r2, [pc, #56]	; (8040a88 <HAL_MspInit+0x44>)
 8040a50:	f043 0301 	orr.w	r3, r3, #1
 8040a54:	6613      	str	r3, [r2, #96]	; 0x60
 8040a56:	4b0c      	ldr	r3, [pc, #48]	; (8040a88 <HAL_MspInit+0x44>)
 8040a58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8040a5a:	f003 0301 	and.w	r3, r3, #1
 8040a5e:	607b      	str	r3, [r7, #4]
 8040a60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8040a62:	4b09      	ldr	r3, [pc, #36]	; (8040a88 <HAL_MspInit+0x44>)
 8040a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8040a66:	4a08      	ldr	r2, [pc, #32]	; (8040a88 <HAL_MspInit+0x44>)
 8040a68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8040a6c:	6593      	str	r3, [r2, #88]	; 0x58
 8040a6e:	4b06      	ldr	r3, [pc, #24]	; (8040a88 <HAL_MspInit+0x44>)
 8040a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8040a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8040a76:	603b      	str	r3, [r7, #0]
 8040a78:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8040a7a:	f000 fced 	bl	8041458 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8040a7e:	bf00      	nop
 8040a80:	3708      	adds	r7, #8
 8040a82:	46bd      	mov	sp, r7
 8040a84:	bd80      	pop	{r7, pc}
 8040a86:	bf00      	nop
 8040a88:	40021000 	.word	0x40021000

08040a8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8040a8c:	b580      	push	{r7, lr}
 8040a8e:	b08a      	sub	sp, #40	; 0x28
 8040a90:	af00      	add	r7, sp, #0
 8040a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8040a94:	f107 0314 	add.w	r3, r7, #20
 8040a98:	2200      	movs	r2, #0
 8040a9a:	601a      	str	r2, [r3, #0]
 8040a9c:	605a      	str	r2, [r3, #4]
 8040a9e:	609a      	str	r2, [r3, #8]
 8040aa0:	60da      	str	r2, [r3, #12]
 8040aa2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8040aa4:	687b      	ldr	r3, [r7, #4]
 8040aa6:	681b      	ldr	r3, [r3, #0]
 8040aa8:	4a1b      	ldr	r2, [pc, #108]	; (8040b18 <HAL_UART_MspInit+0x8c>)
 8040aaa:	4293      	cmp	r3, r2
 8040aac:	d12f      	bne.n	8040b0e <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8040aae:	4b1b      	ldr	r3, [pc, #108]	; (8040b1c <HAL_UART_MspInit+0x90>)
 8040ab0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8040ab2:	4a1a      	ldr	r2, [pc, #104]	; (8040b1c <HAL_UART_MspInit+0x90>)
 8040ab4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8040ab8:	6613      	str	r3, [r2, #96]	; 0x60
 8040aba:	4b18      	ldr	r3, [pc, #96]	; (8040b1c <HAL_UART_MspInit+0x90>)
 8040abc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8040abe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8040ac2:	613b      	str	r3, [r7, #16]
 8040ac4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8040ac6:	4b15      	ldr	r3, [pc, #84]	; (8040b1c <HAL_UART_MspInit+0x90>)
 8040ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040aca:	4a14      	ldr	r2, [pc, #80]	; (8040b1c <HAL_UART_MspInit+0x90>)
 8040acc:	f043 0304 	orr.w	r3, r3, #4
 8040ad0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8040ad2:	4b12      	ldr	r3, [pc, #72]	; (8040b1c <HAL_UART_MspInit+0x90>)
 8040ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040ad6:	f003 0304 	and.w	r3, r3, #4
 8040ada:	60fb      	str	r3, [r7, #12]
 8040adc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8040ade:	2330      	movs	r3, #48	; 0x30
 8040ae0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8040ae2:	2302      	movs	r3, #2
 8040ae4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040ae6:	2300      	movs	r3, #0
 8040ae8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8040aea:	2300      	movs	r3, #0
 8040aec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8040aee:	2307      	movs	r3, #7
 8040af0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8040af2:	f107 0314 	add.w	r3, r7, #20
 8040af6:	4619      	mov	r1, r3
 8040af8:	4809      	ldr	r0, [pc, #36]	; (8040b20 <HAL_UART_MspInit+0x94>)
 8040afa:	f000 fa31 	bl	8040f60 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8040afe:	2200      	movs	r2, #0
 8040b00:	2100      	movs	r1, #0
 8040b02:	2025      	movs	r0, #37	; 0x25
 8040b04:	f000 f9f7 	bl	8040ef6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8040b08:	2025      	movs	r0, #37	; 0x25
 8040b0a:	f000 fa0e 	bl	8040f2a <HAL_NVIC_EnableIRQ>
    // 使能接收中断
//    __HAL_UART_ENABLE_IT(HAL_UART_IRQHandler, UART_IT_RXNE);
  /* USER CODE END USART1_MspInit 1 */
  }

}
 8040b0e:	bf00      	nop
 8040b10:	3728      	adds	r7, #40	; 0x28
 8040b12:	46bd      	mov	sp, r7
 8040b14:	bd80      	pop	{r7, pc}
 8040b16:	bf00      	nop
 8040b18:	40013800 	.word	0x40013800
 8040b1c:	40021000 	.word	0x40021000
 8040b20:	48000800 	.word	0x48000800

08040b24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8040b24:	b480      	push	{r7}
 8040b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8040b28:	e7fe      	b.n	8040b28 <NMI_Handler+0x4>

08040b2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8040b2a:	b480      	push	{r7}
 8040b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8040b2e:	e7fe      	b.n	8040b2e <HardFault_Handler+0x4>

08040b30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8040b30:	b480      	push	{r7}
 8040b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8040b34:	e7fe      	b.n	8040b34 <MemManage_Handler+0x4>

08040b36 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8040b36:	b480      	push	{r7}
 8040b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8040b3a:	e7fe      	b.n	8040b3a <BusFault_Handler+0x4>

08040b3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8040b3c:	b480      	push	{r7}
 8040b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8040b40:	e7fe      	b.n	8040b40 <UsageFault_Handler+0x4>

08040b42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8040b42:	b480      	push	{r7}
 8040b44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8040b46:	bf00      	nop
 8040b48:	46bd      	mov	sp, r7
 8040b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040b4e:	4770      	bx	lr

08040b50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8040b50:	b480      	push	{r7}
 8040b52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8040b54:	bf00      	nop
 8040b56:	46bd      	mov	sp, r7
 8040b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040b5c:	4770      	bx	lr

08040b5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8040b5e:	b480      	push	{r7}
 8040b60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8040b62:	bf00      	nop
 8040b64:	46bd      	mov	sp, r7
 8040b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040b6a:	4770      	bx	lr

08040b6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8040b6c:	b580      	push	{r7, lr}
 8040b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8040b70:	f000 f8c8 	bl	8040d04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8040b74:	bf00      	nop
 8040b76:	bd80      	pop	{r7, pc}

08040b78 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8040b78:	b580      	push	{r7, lr}
 8040b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8040b7c:	4802      	ldr	r0, [pc, #8]	; (8040b88 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8040b7e:	f001 fbfd 	bl	804237c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8040b82:	bf00      	nop
 8040b84:	bd80      	pop	{r7, pc}
 8040b86:	bf00      	nop
 8040b88:	200000c4 	.word	0x200000c4

08040b8c <USART1_IRQHandler>:

//UART ISR Handler 
 void USART1_IRQHandler(void) {
 8040b8c:	b580      	push	{r7, lr}
 8040b8e:	af00      	add	r7, sp, #0
 
	Uart_isr (&huart1);
 8040b90:	4802      	ldr	r0, [pc, #8]	; (8040b9c <USART1_IRQHandler+0x10>)
 8040b92:	f7ff fd87 	bl	80406a4 <Uart_isr>

 	// HAL_UART_IRQHandler(&huart1);
 }
 8040b96:	bf00      	nop
 8040b98:	bd80      	pop	{r7, pc}
 8040b9a:	bf00      	nop
 8040b9c:	20000110 	.word	0x20000110

08040ba0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8040ba0:	b580      	push	{r7, lr}
 8040ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8040ba4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8040ba8:	f000 fb8e 	bl	80412c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8040bac:	bf00      	nop
 8040bae:	bd80      	pop	{r7, pc}

08040bb0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8040bb0:	b480      	push	{r7}
 8040bb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8040bb4:	4b07      	ldr	r3, [pc, #28]	; (8040bd4 <SystemInit+0x24>)
 8040bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8040bba:	4a06      	ldr	r2, [pc, #24]	; (8040bd4 <SystemInit+0x24>)
 8040bbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8040bc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8040bc4:	4b03      	ldr	r3, [pc, #12]	; (8040bd4 <SystemInit+0x24>)
 8040bc6:	4a04      	ldr	r2, [pc, #16]	; (8040bd8 <SystemInit+0x28>)
 8040bc8:	609a      	str	r2, [r3, #8]
#endif
}
 8040bca:	bf00      	nop
 8040bcc:	46bd      	mov	sp, r7
 8040bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040bd2:	4770      	bx	lr
 8040bd4:	e000ed00 	.word	0xe000ed00
 8040bd8:	08040000 	.word	0x08040000

08040bdc <uart_send_msg>:
  * @brief	Sends a message through UART
  * @param	user_data
  * @retval	status
  */
HAL_StatusTypeDef uart_send_msg(char *user_data)
{
 8040bdc:	b580      	push	{r7, lr}
 8040bde:	b084      	sub	sp, #16
 8040be0:	af00      	add	r7, sp, #0
 8040be2:	6078      	str	r0, [r7, #4]
	// do nothing
	return HAL_OK;
#else
	HAL_StatusTypeDef Status;
	Status = HAL_UART_Transmit_IT(&huart1, (uint8_t*)user_data,
			strlen(user_data));
 8040be4:	6878      	ldr	r0, [r7, #4]
 8040be6:	f7ff fb17 	bl	8040218 <strlen>
 8040bea:	4603      	mov	r3, r0
	Status = HAL_UART_Transmit_IT(&huart1, (uint8_t*)user_data,
 8040bec:	b29b      	uxth	r3, r3
 8040bee:	461a      	mov	r2, r3
 8040bf0:	6879      	ldr	r1, [r7, #4]
 8040bf2:	4805      	ldr	r0, [pc, #20]	; (8040c08 <uart_send_msg+0x2c>)
 8040bf4:	f001 fe00 	bl	80427f8 <HAL_UART_Transmit_IT>
 8040bf8:	4603      	mov	r3, r0
 8040bfa:	73fb      	strb	r3, [r7, #15]

	return Status;
 8040bfc:	7bfb      	ldrb	r3, [r7, #15]
#endif
}
 8040bfe:	4618      	mov	r0, r3
 8040c00:	3710      	adds	r7, #16
 8040c02:	46bd      	mov	sp, r7
 8040c04:	bd80      	pop	{r7, pc}
 8040c06:	bf00      	nop
 8040c08:	20000110 	.word	0x20000110

08040c0c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8040c0c:	480d      	ldr	r0, [pc, #52]	; (8040c44 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8040c0e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8040c10:	480d      	ldr	r0, [pc, #52]	; (8040c48 <LoopForever+0x6>)
  ldr r1, =_edata
 8040c12:	490e      	ldr	r1, [pc, #56]	; (8040c4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8040c14:	4a0e      	ldr	r2, [pc, #56]	; (8040c50 <LoopForever+0xe>)
  movs r3, #0
 8040c16:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8040c18:	e002      	b.n	8040c20 <LoopCopyDataInit>

08040c1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8040c1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8040c1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8040c1e:	3304      	adds	r3, #4

08040c20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8040c20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8040c22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8040c24:	d3f9      	bcc.n	8040c1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8040c26:	4a0b      	ldr	r2, [pc, #44]	; (8040c54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8040c28:	4c0b      	ldr	r4, [pc, #44]	; (8040c58 <LoopForever+0x16>)
  movs r3, #0
 8040c2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8040c2c:	e001      	b.n	8040c32 <LoopFillZerobss>

08040c2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8040c2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8040c30:	3204      	adds	r2, #4

08040c32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8040c32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8040c34:	d3fb      	bcc.n	8040c2e <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8040c36:	f7ff ffbb 	bl	8040bb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8040c3a:	f002 fcff 	bl	804363c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8040c3e:	f7ff fd8b 	bl	8040758 <main>

08040c42 <LoopForever>:

LoopForever:
    b LoopForever
 8040c42:	e7fe      	b.n	8040c42 <LoopForever>
  ldr   r0, =_estack
 8040c44:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8040c48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8040c4c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8040c50:	08043718 	.word	0x08043718
  ldr r2, =_sbss
 8040c54:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8040c58:	200001a0 	.word	0x200001a0

08040c5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8040c5c:	e7fe      	b.n	8040c5c <ADC1_2_IRQHandler>

08040c5e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8040c5e:	b580      	push	{r7, lr}
 8040c60:	b082      	sub	sp, #8
 8040c62:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8040c64:	2300      	movs	r3, #0
 8040c66:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8040c68:	2003      	movs	r0, #3
 8040c6a:	f000 f939 	bl	8040ee0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8040c6e:	2000      	movs	r0, #0
 8040c70:	f000 f80e 	bl	8040c90 <HAL_InitTick>
 8040c74:	4603      	mov	r3, r0
 8040c76:	2b00      	cmp	r3, #0
 8040c78:	d002      	beq.n	8040c80 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8040c7a:	2301      	movs	r3, #1
 8040c7c:	71fb      	strb	r3, [r7, #7]
 8040c7e:	e001      	b.n	8040c84 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8040c80:	f7ff fee0 	bl	8040a44 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8040c84:	79fb      	ldrb	r3, [r7, #7]

}
 8040c86:	4618      	mov	r0, r3
 8040c88:	3708      	adds	r7, #8
 8040c8a:	46bd      	mov	sp, r7
 8040c8c:	bd80      	pop	{r7, pc}
	...

08040c90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8040c90:	b580      	push	{r7, lr}
 8040c92:	b084      	sub	sp, #16
 8040c94:	af00      	add	r7, sp, #0
 8040c96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8040c98:	2300      	movs	r3, #0
 8040c9a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8040c9c:	4b16      	ldr	r3, [pc, #88]	; (8040cf8 <HAL_InitTick+0x68>)
 8040c9e:	681b      	ldr	r3, [r3, #0]
 8040ca0:	2b00      	cmp	r3, #0
 8040ca2:	d022      	beq.n	8040cea <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8040ca4:	4b15      	ldr	r3, [pc, #84]	; (8040cfc <HAL_InitTick+0x6c>)
 8040ca6:	681a      	ldr	r2, [r3, #0]
 8040ca8:	4b13      	ldr	r3, [pc, #76]	; (8040cf8 <HAL_InitTick+0x68>)
 8040caa:	681b      	ldr	r3, [r3, #0]
 8040cac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8040cb0:	fbb1 f3f3 	udiv	r3, r1, r3
 8040cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8040cb8:	4618      	mov	r0, r3
 8040cba:	f000 f944 	bl	8040f46 <HAL_SYSTICK_Config>
 8040cbe:	4603      	mov	r3, r0
 8040cc0:	2b00      	cmp	r3, #0
 8040cc2:	d10f      	bne.n	8040ce4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8040cc4:	687b      	ldr	r3, [r7, #4]
 8040cc6:	2b0f      	cmp	r3, #15
 8040cc8:	d809      	bhi.n	8040cde <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8040cca:	2200      	movs	r2, #0
 8040ccc:	6879      	ldr	r1, [r7, #4]
 8040cce:	f04f 30ff 	mov.w	r0, #4294967295
 8040cd2:	f000 f910 	bl	8040ef6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8040cd6:	4a0a      	ldr	r2, [pc, #40]	; (8040d00 <HAL_InitTick+0x70>)
 8040cd8:	687b      	ldr	r3, [r7, #4]
 8040cda:	6013      	str	r3, [r2, #0]
 8040cdc:	e007      	b.n	8040cee <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8040cde:	2301      	movs	r3, #1
 8040ce0:	73fb      	strb	r3, [r7, #15]
 8040ce2:	e004      	b.n	8040cee <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8040ce4:	2301      	movs	r3, #1
 8040ce6:	73fb      	strb	r3, [r7, #15]
 8040ce8:	e001      	b.n	8040cee <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8040cea:	2301      	movs	r3, #1
 8040cec:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8040cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8040cf0:	4618      	mov	r0, r3
 8040cf2:	3710      	adds	r7, #16
 8040cf4:	46bd      	mov	sp, r7
 8040cf6:	bd80      	pop	{r7, pc}
 8040cf8:	20000008 	.word	0x20000008
 8040cfc:	20000000 	.word	0x20000000
 8040d00:	20000004 	.word	0x20000004

08040d04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8040d04:	b480      	push	{r7}
 8040d06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8040d08:	4b05      	ldr	r3, [pc, #20]	; (8040d20 <HAL_IncTick+0x1c>)
 8040d0a:	681a      	ldr	r2, [r3, #0]
 8040d0c:	4b05      	ldr	r3, [pc, #20]	; (8040d24 <HAL_IncTick+0x20>)
 8040d0e:	681b      	ldr	r3, [r3, #0]
 8040d10:	4413      	add	r3, r2
 8040d12:	4a03      	ldr	r2, [pc, #12]	; (8040d20 <HAL_IncTick+0x1c>)
 8040d14:	6013      	str	r3, [r2, #0]
}
 8040d16:	bf00      	nop
 8040d18:	46bd      	mov	sp, r7
 8040d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040d1e:	4770      	bx	lr
 8040d20:	2000019c 	.word	0x2000019c
 8040d24:	20000008 	.word	0x20000008

08040d28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8040d28:	b480      	push	{r7}
 8040d2a:	af00      	add	r7, sp, #0
  return uwTick;
 8040d2c:	4b03      	ldr	r3, [pc, #12]	; (8040d3c <HAL_GetTick+0x14>)
 8040d2e:	681b      	ldr	r3, [r3, #0]
}
 8040d30:	4618      	mov	r0, r3
 8040d32:	46bd      	mov	sp, r7
 8040d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040d38:	4770      	bx	lr
 8040d3a:	bf00      	nop
 8040d3c:	2000019c 	.word	0x2000019c

08040d40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8040d40:	b480      	push	{r7}
 8040d42:	b085      	sub	sp, #20
 8040d44:	af00      	add	r7, sp, #0
 8040d46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8040d48:	687b      	ldr	r3, [r7, #4]
 8040d4a:	f003 0307 	and.w	r3, r3, #7
 8040d4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8040d50:	4b0c      	ldr	r3, [pc, #48]	; (8040d84 <__NVIC_SetPriorityGrouping+0x44>)
 8040d52:	68db      	ldr	r3, [r3, #12]
 8040d54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8040d56:	68ba      	ldr	r2, [r7, #8]
 8040d58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8040d5c:	4013      	ands	r3, r2
 8040d5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8040d60:	68fb      	ldr	r3, [r7, #12]
 8040d62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8040d64:	68bb      	ldr	r3, [r7, #8]
 8040d66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8040d68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8040d6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8040d70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8040d72:	4a04      	ldr	r2, [pc, #16]	; (8040d84 <__NVIC_SetPriorityGrouping+0x44>)
 8040d74:	68bb      	ldr	r3, [r7, #8]
 8040d76:	60d3      	str	r3, [r2, #12]
}
 8040d78:	bf00      	nop
 8040d7a:	3714      	adds	r7, #20
 8040d7c:	46bd      	mov	sp, r7
 8040d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040d82:	4770      	bx	lr
 8040d84:	e000ed00 	.word	0xe000ed00

08040d88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8040d88:	b480      	push	{r7}
 8040d8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8040d8c:	4b04      	ldr	r3, [pc, #16]	; (8040da0 <__NVIC_GetPriorityGrouping+0x18>)
 8040d8e:	68db      	ldr	r3, [r3, #12]
 8040d90:	0a1b      	lsrs	r3, r3, #8
 8040d92:	f003 0307 	and.w	r3, r3, #7
}
 8040d96:	4618      	mov	r0, r3
 8040d98:	46bd      	mov	sp, r7
 8040d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040d9e:	4770      	bx	lr
 8040da0:	e000ed00 	.word	0xe000ed00

08040da4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8040da4:	b480      	push	{r7}
 8040da6:	b083      	sub	sp, #12
 8040da8:	af00      	add	r7, sp, #0
 8040daa:	4603      	mov	r3, r0
 8040dac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8040dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040db2:	2b00      	cmp	r3, #0
 8040db4:	db0b      	blt.n	8040dce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8040db6:	79fb      	ldrb	r3, [r7, #7]
 8040db8:	f003 021f 	and.w	r2, r3, #31
 8040dbc:	4907      	ldr	r1, [pc, #28]	; (8040ddc <__NVIC_EnableIRQ+0x38>)
 8040dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040dc2:	095b      	lsrs	r3, r3, #5
 8040dc4:	2001      	movs	r0, #1
 8040dc6:	fa00 f202 	lsl.w	r2, r0, r2
 8040dca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8040dce:	bf00      	nop
 8040dd0:	370c      	adds	r7, #12
 8040dd2:	46bd      	mov	sp, r7
 8040dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040dd8:	4770      	bx	lr
 8040dda:	bf00      	nop
 8040ddc:	e000e100 	.word	0xe000e100

08040de0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8040de0:	b480      	push	{r7}
 8040de2:	b083      	sub	sp, #12
 8040de4:	af00      	add	r7, sp, #0
 8040de6:	4603      	mov	r3, r0
 8040de8:	6039      	str	r1, [r7, #0]
 8040dea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8040dec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040df0:	2b00      	cmp	r3, #0
 8040df2:	db0a      	blt.n	8040e0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8040df4:	683b      	ldr	r3, [r7, #0]
 8040df6:	b2da      	uxtb	r2, r3
 8040df8:	490c      	ldr	r1, [pc, #48]	; (8040e2c <__NVIC_SetPriority+0x4c>)
 8040dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040dfe:	0112      	lsls	r2, r2, #4
 8040e00:	b2d2      	uxtb	r2, r2
 8040e02:	440b      	add	r3, r1
 8040e04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8040e08:	e00a      	b.n	8040e20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8040e0a:	683b      	ldr	r3, [r7, #0]
 8040e0c:	b2da      	uxtb	r2, r3
 8040e0e:	4908      	ldr	r1, [pc, #32]	; (8040e30 <__NVIC_SetPriority+0x50>)
 8040e10:	79fb      	ldrb	r3, [r7, #7]
 8040e12:	f003 030f 	and.w	r3, r3, #15
 8040e16:	3b04      	subs	r3, #4
 8040e18:	0112      	lsls	r2, r2, #4
 8040e1a:	b2d2      	uxtb	r2, r2
 8040e1c:	440b      	add	r3, r1
 8040e1e:	761a      	strb	r2, [r3, #24]
}
 8040e20:	bf00      	nop
 8040e22:	370c      	adds	r7, #12
 8040e24:	46bd      	mov	sp, r7
 8040e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040e2a:	4770      	bx	lr
 8040e2c:	e000e100 	.word	0xe000e100
 8040e30:	e000ed00 	.word	0xe000ed00

08040e34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8040e34:	b480      	push	{r7}
 8040e36:	b089      	sub	sp, #36	; 0x24
 8040e38:	af00      	add	r7, sp, #0
 8040e3a:	60f8      	str	r0, [r7, #12]
 8040e3c:	60b9      	str	r1, [r7, #8]
 8040e3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8040e40:	68fb      	ldr	r3, [r7, #12]
 8040e42:	f003 0307 	and.w	r3, r3, #7
 8040e46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8040e48:	69fb      	ldr	r3, [r7, #28]
 8040e4a:	f1c3 0307 	rsb	r3, r3, #7
 8040e4e:	2b04      	cmp	r3, #4
 8040e50:	bf28      	it	cs
 8040e52:	2304      	movcs	r3, #4
 8040e54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8040e56:	69fb      	ldr	r3, [r7, #28]
 8040e58:	3304      	adds	r3, #4
 8040e5a:	2b06      	cmp	r3, #6
 8040e5c:	d902      	bls.n	8040e64 <NVIC_EncodePriority+0x30>
 8040e5e:	69fb      	ldr	r3, [r7, #28]
 8040e60:	3b03      	subs	r3, #3
 8040e62:	e000      	b.n	8040e66 <NVIC_EncodePriority+0x32>
 8040e64:	2300      	movs	r3, #0
 8040e66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8040e68:	f04f 32ff 	mov.w	r2, #4294967295
 8040e6c:	69bb      	ldr	r3, [r7, #24]
 8040e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8040e72:	43da      	mvns	r2, r3
 8040e74:	68bb      	ldr	r3, [r7, #8]
 8040e76:	401a      	ands	r2, r3
 8040e78:	697b      	ldr	r3, [r7, #20]
 8040e7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8040e7c:	f04f 31ff 	mov.w	r1, #4294967295
 8040e80:	697b      	ldr	r3, [r7, #20]
 8040e82:	fa01 f303 	lsl.w	r3, r1, r3
 8040e86:	43d9      	mvns	r1, r3
 8040e88:	687b      	ldr	r3, [r7, #4]
 8040e8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8040e8c:	4313      	orrs	r3, r2
         );
}
 8040e8e:	4618      	mov	r0, r3
 8040e90:	3724      	adds	r7, #36	; 0x24
 8040e92:	46bd      	mov	sp, r7
 8040e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040e98:	4770      	bx	lr
	...

08040e9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8040e9c:	b580      	push	{r7, lr}
 8040e9e:	b082      	sub	sp, #8
 8040ea0:	af00      	add	r7, sp, #0
 8040ea2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8040ea4:	687b      	ldr	r3, [r7, #4]
 8040ea6:	3b01      	subs	r3, #1
 8040ea8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8040eac:	d301      	bcc.n	8040eb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8040eae:	2301      	movs	r3, #1
 8040eb0:	e00f      	b.n	8040ed2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8040eb2:	4a0a      	ldr	r2, [pc, #40]	; (8040edc <SysTick_Config+0x40>)
 8040eb4:	687b      	ldr	r3, [r7, #4]
 8040eb6:	3b01      	subs	r3, #1
 8040eb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8040eba:	210f      	movs	r1, #15
 8040ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8040ec0:	f7ff ff8e 	bl	8040de0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8040ec4:	4b05      	ldr	r3, [pc, #20]	; (8040edc <SysTick_Config+0x40>)
 8040ec6:	2200      	movs	r2, #0
 8040ec8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8040eca:	4b04      	ldr	r3, [pc, #16]	; (8040edc <SysTick_Config+0x40>)
 8040ecc:	2207      	movs	r2, #7
 8040ece:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8040ed0:	2300      	movs	r3, #0
}
 8040ed2:	4618      	mov	r0, r3
 8040ed4:	3708      	adds	r7, #8
 8040ed6:	46bd      	mov	sp, r7
 8040ed8:	bd80      	pop	{r7, pc}
 8040eda:	bf00      	nop
 8040edc:	e000e010 	.word	0xe000e010

08040ee0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8040ee0:	b580      	push	{r7, lr}
 8040ee2:	b082      	sub	sp, #8
 8040ee4:	af00      	add	r7, sp, #0
 8040ee6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8040ee8:	6878      	ldr	r0, [r7, #4]
 8040eea:	f7ff ff29 	bl	8040d40 <__NVIC_SetPriorityGrouping>
}
 8040eee:	bf00      	nop
 8040ef0:	3708      	adds	r7, #8
 8040ef2:	46bd      	mov	sp, r7
 8040ef4:	bd80      	pop	{r7, pc}

08040ef6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8040ef6:	b580      	push	{r7, lr}
 8040ef8:	b086      	sub	sp, #24
 8040efa:	af00      	add	r7, sp, #0
 8040efc:	4603      	mov	r3, r0
 8040efe:	60b9      	str	r1, [r7, #8]
 8040f00:	607a      	str	r2, [r7, #4]
 8040f02:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8040f04:	f7ff ff40 	bl	8040d88 <__NVIC_GetPriorityGrouping>
 8040f08:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8040f0a:	687a      	ldr	r2, [r7, #4]
 8040f0c:	68b9      	ldr	r1, [r7, #8]
 8040f0e:	6978      	ldr	r0, [r7, #20]
 8040f10:	f7ff ff90 	bl	8040e34 <NVIC_EncodePriority>
 8040f14:	4602      	mov	r2, r0
 8040f16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8040f1a:	4611      	mov	r1, r2
 8040f1c:	4618      	mov	r0, r3
 8040f1e:	f7ff ff5f 	bl	8040de0 <__NVIC_SetPriority>
}
 8040f22:	bf00      	nop
 8040f24:	3718      	adds	r7, #24
 8040f26:	46bd      	mov	sp, r7
 8040f28:	bd80      	pop	{r7, pc}

08040f2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8040f2a:	b580      	push	{r7, lr}
 8040f2c:	b082      	sub	sp, #8
 8040f2e:	af00      	add	r7, sp, #0
 8040f30:	4603      	mov	r3, r0
 8040f32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8040f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040f38:	4618      	mov	r0, r3
 8040f3a:	f7ff ff33 	bl	8040da4 <__NVIC_EnableIRQ>
}
 8040f3e:	bf00      	nop
 8040f40:	3708      	adds	r7, #8
 8040f42:	46bd      	mov	sp, r7
 8040f44:	bd80      	pop	{r7, pc}

08040f46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8040f46:	b580      	push	{r7, lr}
 8040f48:	b082      	sub	sp, #8
 8040f4a:	af00      	add	r7, sp, #0
 8040f4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8040f4e:	6878      	ldr	r0, [r7, #4]
 8040f50:	f7ff ffa4 	bl	8040e9c <SysTick_Config>
 8040f54:	4603      	mov	r3, r0
}
 8040f56:	4618      	mov	r0, r3
 8040f58:	3708      	adds	r7, #8
 8040f5a:	46bd      	mov	sp, r7
 8040f5c:	bd80      	pop	{r7, pc}
	...

08040f60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8040f60:	b480      	push	{r7}
 8040f62:	b087      	sub	sp, #28
 8040f64:	af00      	add	r7, sp, #0
 8040f66:	6078      	str	r0, [r7, #4]
 8040f68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8040f6a:	2300      	movs	r3, #0
 8040f6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8040f6e:	e15a      	b.n	8041226 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8040f70:	683b      	ldr	r3, [r7, #0]
 8040f72:	681a      	ldr	r2, [r3, #0]
 8040f74:	2101      	movs	r1, #1
 8040f76:	697b      	ldr	r3, [r7, #20]
 8040f78:	fa01 f303 	lsl.w	r3, r1, r3
 8040f7c:	4013      	ands	r3, r2
 8040f7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8040f80:	68fb      	ldr	r3, [r7, #12]
 8040f82:	2b00      	cmp	r3, #0
 8040f84:	f000 814c 	beq.w	8041220 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8040f88:	683b      	ldr	r3, [r7, #0]
 8040f8a:	685b      	ldr	r3, [r3, #4]
 8040f8c:	2b01      	cmp	r3, #1
 8040f8e:	d00b      	beq.n	8040fa8 <HAL_GPIO_Init+0x48>
 8040f90:	683b      	ldr	r3, [r7, #0]
 8040f92:	685b      	ldr	r3, [r3, #4]
 8040f94:	2b02      	cmp	r3, #2
 8040f96:	d007      	beq.n	8040fa8 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8040f98:	683b      	ldr	r3, [r7, #0]
 8040f9a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8040f9c:	2b11      	cmp	r3, #17
 8040f9e:	d003      	beq.n	8040fa8 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8040fa0:	683b      	ldr	r3, [r7, #0]
 8040fa2:	685b      	ldr	r3, [r3, #4]
 8040fa4:	2b12      	cmp	r3, #18
 8040fa6:	d130      	bne.n	804100a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8040fa8:	687b      	ldr	r3, [r7, #4]
 8040faa:	689b      	ldr	r3, [r3, #8]
 8040fac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8040fae:	697b      	ldr	r3, [r7, #20]
 8040fb0:	005b      	lsls	r3, r3, #1
 8040fb2:	2203      	movs	r2, #3
 8040fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8040fb8:	43db      	mvns	r3, r3
 8040fba:	693a      	ldr	r2, [r7, #16]
 8040fbc:	4013      	ands	r3, r2
 8040fbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8040fc0:	683b      	ldr	r3, [r7, #0]
 8040fc2:	68da      	ldr	r2, [r3, #12]
 8040fc4:	697b      	ldr	r3, [r7, #20]
 8040fc6:	005b      	lsls	r3, r3, #1
 8040fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8040fcc:	693a      	ldr	r2, [r7, #16]
 8040fce:	4313      	orrs	r3, r2
 8040fd0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8040fd2:	687b      	ldr	r3, [r7, #4]
 8040fd4:	693a      	ldr	r2, [r7, #16]
 8040fd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8040fd8:	687b      	ldr	r3, [r7, #4]
 8040fda:	685b      	ldr	r3, [r3, #4]
 8040fdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8040fde:	2201      	movs	r2, #1
 8040fe0:	697b      	ldr	r3, [r7, #20]
 8040fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8040fe6:	43db      	mvns	r3, r3
 8040fe8:	693a      	ldr	r2, [r7, #16]
 8040fea:	4013      	ands	r3, r2
 8040fec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8040fee:	683b      	ldr	r3, [r7, #0]
 8040ff0:	685b      	ldr	r3, [r3, #4]
 8040ff2:	091b      	lsrs	r3, r3, #4
 8040ff4:	f003 0201 	and.w	r2, r3, #1
 8040ff8:	697b      	ldr	r3, [r7, #20]
 8040ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8040ffe:	693a      	ldr	r2, [r7, #16]
 8041000:	4313      	orrs	r3, r2
 8041002:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8041004:	687b      	ldr	r3, [r7, #4]
 8041006:	693a      	ldr	r2, [r7, #16]
 8041008:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 804100a:	687b      	ldr	r3, [r7, #4]
 804100c:	68db      	ldr	r3, [r3, #12]
 804100e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8041010:	697b      	ldr	r3, [r7, #20]
 8041012:	005b      	lsls	r3, r3, #1
 8041014:	2203      	movs	r2, #3
 8041016:	fa02 f303 	lsl.w	r3, r2, r3
 804101a:	43db      	mvns	r3, r3
 804101c:	693a      	ldr	r2, [r7, #16]
 804101e:	4013      	ands	r3, r2
 8041020:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8041022:	683b      	ldr	r3, [r7, #0]
 8041024:	689a      	ldr	r2, [r3, #8]
 8041026:	697b      	ldr	r3, [r7, #20]
 8041028:	005b      	lsls	r3, r3, #1
 804102a:	fa02 f303 	lsl.w	r3, r2, r3
 804102e:	693a      	ldr	r2, [r7, #16]
 8041030:	4313      	orrs	r3, r2
 8041032:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8041034:	687b      	ldr	r3, [r7, #4]
 8041036:	693a      	ldr	r2, [r7, #16]
 8041038:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 804103a:	683b      	ldr	r3, [r7, #0]
 804103c:	685b      	ldr	r3, [r3, #4]
 804103e:	2b02      	cmp	r3, #2
 8041040:	d003      	beq.n	804104a <HAL_GPIO_Init+0xea>
 8041042:	683b      	ldr	r3, [r7, #0]
 8041044:	685b      	ldr	r3, [r3, #4]
 8041046:	2b12      	cmp	r3, #18
 8041048:	d123      	bne.n	8041092 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 804104a:	697b      	ldr	r3, [r7, #20]
 804104c:	08da      	lsrs	r2, r3, #3
 804104e:	687b      	ldr	r3, [r7, #4]
 8041050:	3208      	adds	r2, #8
 8041052:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8041056:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8041058:	697b      	ldr	r3, [r7, #20]
 804105a:	f003 0307 	and.w	r3, r3, #7
 804105e:	009b      	lsls	r3, r3, #2
 8041060:	220f      	movs	r2, #15
 8041062:	fa02 f303 	lsl.w	r3, r2, r3
 8041066:	43db      	mvns	r3, r3
 8041068:	693a      	ldr	r2, [r7, #16]
 804106a:	4013      	ands	r3, r2
 804106c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 804106e:	683b      	ldr	r3, [r7, #0]
 8041070:	691a      	ldr	r2, [r3, #16]
 8041072:	697b      	ldr	r3, [r7, #20]
 8041074:	f003 0307 	and.w	r3, r3, #7
 8041078:	009b      	lsls	r3, r3, #2
 804107a:	fa02 f303 	lsl.w	r3, r2, r3
 804107e:	693a      	ldr	r2, [r7, #16]
 8041080:	4313      	orrs	r3, r2
 8041082:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8041084:	697b      	ldr	r3, [r7, #20]
 8041086:	08da      	lsrs	r2, r3, #3
 8041088:	687b      	ldr	r3, [r7, #4]
 804108a:	3208      	adds	r2, #8
 804108c:	6939      	ldr	r1, [r7, #16]
 804108e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8041092:	687b      	ldr	r3, [r7, #4]
 8041094:	681b      	ldr	r3, [r3, #0]
 8041096:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8041098:	697b      	ldr	r3, [r7, #20]
 804109a:	005b      	lsls	r3, r3, #1
 804109c:	2203      	movs	r2, #3
 804109e:	fa02 f303 	lsl.w	r3, r2, r3
 80410a2:	43db      	mvns	r3, r3
 80410a4:	693a      	ldr	r2, [r7, #16]
 80410a6:	4013      	ands	r3, r2
 80410a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80410aa:	683b      	ldr	r3, [r7, #0]
 80410ac:	685b      	ldr	r3, [r3, #4]
 80410ae:	f003 0203 	and.w	r2, r3, #3
 80410b2:	697b      	ldr	r3, [r7, #20]
 80410b4:	005b      	lsls	r3, r3, #1
 80410b6:	fa02 f303 	lsl.w	r3, r2, r3
 80410ba:	693a      	ldr	r2, [r7, #16]
 80410bc:	4313      	orrs	r3, r2
 80410be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80410c0:	687b      	ldr	r3, [r7, #4]
 80410c2:	693a      	ldr	r2, [r7, #16]
 80410c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80410c6:	683b      	ldr	r3, [r7, #0]
 80410c8:	685b      	ldr	r3, [r3, #4]
 80410ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80410ce:	2b00      	cmp	r3, #0
 80410d0:	f000 80a6 	beq.w	8041220 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80410d4:	4b5b      	ldr	r3, [pc, #364]	; (8041244 <HAL_GPIO_Init+0x2e4>)
 80410d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80410d8:	4a5a      	ldr	r2, [pc, #360]	; (8041244 <HAL_GPIO_Init+0x2e4>)
 80410da:	f043 0301 	orr.w	r3, r3, #1
 80410de:	6613      	str	r3, [r2, #96]	; 0x60
 80410e0:	4b58      	ldr	r3, [pc, #352]	; (8041244 <HAL_GPIO_Init+0x2e4>)
 80410e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80410e4:	f003 0301 	and.w	r3, r3, #1
 80410e8:	60bb      	str	r3, [r7, #8]
 80410ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80410ec:	4a56      	ldr	r2, [pc, #344]	; (8041248 <HAL_GPIO_Init+0x2e8>)
 80410ee:	697b      	ldr	r3, [r7, #20]
 80410f0:	089b      	lsrs	r3, r3, #2
 80410f2:	3302      	adds	r3, #2
 80410f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80410f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80410fa:	697b      	ldr	r3, [r7, #20]
 80410fc:	f003 0303 	and.w	r3, r3, #3
 8041100:	009b      	lsls	r3, r3, #2
 8041102:	220f      	movs	r2, #15
 8041104:	fa02 f303 	lsl.w	r3, r2, r3
 8041108:	43db      	mvns	r3, r3
 804110a:	693a      	ldr	r2, [r7, #16]
 804110c:	4013      	ands	r3, r2
 804110e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8041110:	687b      	ldr	r3, [r7, #4]
 8041112:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8041116:	d01f      	beq.n	8041158 <HAL_GPIO_Init+0x1f8>
 8041118:	687b      	ldr	r3, [r7, #4]
 804111a:	4a4c      	ldr	r2, [pc, #304]	; (804124c <HAL_GPIO_Init+0x2ec>)
 804111c:	4293      	cmp	r3, r2
 804111e:	d019      	beq.n	8041154 <HAL_GPIO_Init+0x1f4>
 8041120:	687b      	ldr	r3, [r7, #4]
 8041122:	4a4b      	ldr	r2, [pc, #300]	; (8041250 <HAL_GPIO_Init+0x2f0>)
 8041124:	4293      	cmp	r3, r2
 8041126:	d013      	beq.n	8041150 <HAL_GPIO_Init+0x1f0>
 8041128:	687b      	ldr	r3, [r7, #4]
 804112a:	4a4a      	ldr	r2, [pc, #296]	; (8041254 <HAL_GPIO_Init+0x2f4>)
 804112c:	4293      	cmp	r3, r2
 804112e:	d00d      	beq.n	804114c <HAL_GPIO_Init+0x1ec>
 8041130:	687b      	ldr	r3, [r7, #4]
 8041132:	4a49      	ldr	r2, [pc, #292]	; (8041258 <HAL_GPIO_Init+0x2f8>)
 8041134:	4293      	cmp	r3, r2
 8041136:	d007      	beq.n	8041148 <HAL_GPIO_Init+0x1e8>
 8041138:	687b      	ldr	r3, [r7, #4]
 804113a:	4a48      	ldr	r2, [pc, #288]	; (804125c <HAL_GPIO_Init+0x2fc>)
 804113c:	4293      	cmp	r3, r2
 804113e:	d101      	bne.n	8041144 <HAL_GPIO_Init+0x1e4>
 8041140:	2305      	movs	r3, #5
 8041142:	e00a      	b.n	804115a <HAL_GPIO_Init+0x1fa>
 8041144:	2306      	movs	r3, #6
 8041146:	e008      	b.n	804115a <HAL_GPIO_Init+0x1fa>
 8041148:	2304      	movs	r3, #4
 804114a:	e006      	b.n	804115a <HAL_GPIO_Init+0x1fa>
 804114c:	2303      	movs	r3, #3
 804114e:	e004      	b.n	804115a <HAL_GPIO_Init+0x1fa>
 8041150:	2302      	movs	r3, #2
 8041152:	e002      	b.n	804115a <HAL_GPIO_Init+0x1fa>
 8041154:	2301      	movs	r3, #1
 8041156:	e000      	b.n	804115a <HAL_GPIO_Init+0x1fa>
 8041158:	2300      	movs	r3, #0
 804115a:	697a      	ldr	r2, [r7, #20]
 804115c:	f002 0203 	and.w	r2, r2, #3
 8041160:	0092      	lsls	r2, r2, #2
 8041162:	4093      	lsls	r3, r2
 8041164:	693a      	ldr	r2, [r7, #16]
 8041166:	4313      	orrs	r3, r2
 8041168:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 804116a:	4937      	ldr	r1, [pc, #220]	; (8041248 <HAL_GPIO_Init+0x2e8>)
 804116c:	697b      	ldr	r3, [r7, #20]
 804116e:	089b      	lsrs	r3, r3, #2
 8041170:	3302      	adds	r3, #2
 8041172:	693a      	ldr	r2, [r7, #16]
 8041174:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8041178:	4b39      	ldr	r3, [pc, #228]	; (8041260 <HAL_GPIO_Init+0x300>)
 804117a:	681b      	ldr	r3, [r3, #0]
 804117c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 804117e:	68fb      	ldr	r3, [r7, #12]
 8041180:	43db      	mvns	r3, r3
 8041182:	693a      	ldr	r2, [r7, #16]
 8041184:	4013      	ands	r3, r2
 8041186:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8041188:	683b      	ldr	r3, [r7, #0]
 804118a:	685b      	ldr	r3, [r3, #4]
 804118c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8041190:	2b00      	cmp	r3, #0
 8041192:	d003      	beq.n	804119c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8041194:	693a      	ldr	r2, [r7, #16]
 8041196:	68fb      	ldr	r3, [r7, #12]
 8041198:	4313      	orrs	r3, r2
 804119a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 804119c:	4a30      	ldr	r2, [pc, #192]	; (8041260 <HAL_GPIO_Init+0x300>)
 804119e:	693b      	ldr	r3, [r7, #16]
 80411a0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80411a2:	4b2f      	ldr	r3, [pc, #188]	; (8041260 <HAL_GPIO_Init+0x300>)
 80411a4:	685b      	ldr	r3, [r3, #4]
 80411a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80411a8:	68fb      	ldr	r3, [r7, #12]
 80411aa:	43db      	mvns	r3, r3
 80411ac:	693a      	ldr	r2, [r7, #16]
 80411ae:	4013      	ands	r3, r2
 80411b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80411b2:	683b      	ldr	r3, [r7, #0]
 80411b4:	685b      	ldr	r3, [r3, #4]
 80411b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80411ba:	2b00      	cmp	r3, #0
 80411bc:	d003      	beq.n	80411c6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80411be:	693a      	ldr	r2, [r7, #16]
 80411c0:	68fb      	ldr	r3, [r7, #12]
 80411c2:	4313      	orrs	r3, r2
 80411c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80411c6:	4a26      	ldr	r2, [pc, #152]	; (8041260 <HAL_GPIO_Init+0x300>)
 80411c8:	693b      	ldr	r3, [r7, #16]
 80411ca:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80411cc:	4b24      	ldr	r3, [pc, #144]	; (8041260 <HAL_GPIO_Init+0x300>)
 80411ce:	689b      	ldr	r3, [r3, #8]
 80411d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80411d2:	68fb      	ldr	r3, [r7, #12]
 80411d4:	43db      	mvns	r3, r3
 80411d6:	693a      	ldr	r2, [r7, #16]
 80411d8:	4013      	ands	r3, r2
 80411da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80411dc:	683b      	ldr	r3, [r7, #0]
 80411de:	685b      	ldr	r3, [r3, #4]
 80411e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80411e4:	2b00      	cmp	r3, #0
 80411e6:	d003      	beq.n	80411f0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80411e8:	693a      	ldr	r2, [r7, #16]
 80411ea:	68fb      	ldr	r3, [r7, #12]
 80411ec:	4313      	orrs	r3, r2
 80411ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80411f0:	4a1b      	ldr	r2, [pc, #108]	; (8041260 <HAL_GPIO_Init+0x300>)
 80411f2:	693b      	ldr	r3, [r7, #16]
 80411f4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80411f6:	4b1a      	ldr	r3, [pc, #104]	; (8041260 <HAL_GPIO_Init+0x300>)
 80411f8:	68db      	ldr	r3, [r3, #12]
 80411fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80411fc:	68fb      	ldr	r3, [r7, #12]
 80411fe:	43db      	mvns	r3, r3
 8041200:	693a      	ldr	r2, [r7, #16]
 8041202:	4013      	ands	r3, r2
 8041204:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8041206:	683b      	ldr	r3, [r7, #0]
 8041208:	685b      	ldr	r3, [r3, #4]
 804120a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 804120e:	2b00      	cmp	r3, #0
 8041210:	d003      	beq.n	804121a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8041212:	693a      	ldr	r2, [r7, #16]
 8041214:	68fb      	ldr	r3, [r7, #12]
 8041216:	4313      	orrs	r3, r2
 8041218:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 804121a:	4a11      	ldr	r2, [pc, #68]	; (8041260 <HAL_GPIO_Init+0x300>)
 804121c:	693b      	ldr	r3, [r7, #16]
 804121e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8041220:	697b      	ldr	r3, [r7, #20]
 8041222:	3301      	adds	r3, #1
 8041224:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8041226:	683b      	ldr	r3, [r7, #0]
 8041228:	681a      	ldr	r2, [r3, #0]
 804122a:	697b      	ldr	r3, [r7, #20]
 804122c:	fa22 f303 	lsr.w	r3, r2, r3
 8041230:	2b00      	cmp	r3, #0
 8041232:	f47f ae9d 	bne.w	8040f70 <HAL_GPIO_Init+0x10>
  }
}
 8041236:	bf00      	nop
 8041238:	bf00      	nop
 804123a:	371c      	adds	r7, #28
 804123c:	46bd      	mov	sp, r7
 804123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041242:	4770      	bx	lr
 8041244:	40021000 	.word	0x40021000
 8041248:	40010000 	.word	0x40010000
 804124c:	48000400 	.word	0x48000400
 8041250:	48000800 	.word	0x48000800
 8041254:	48000c00 	.word	0x48000c00
 8041258:	48001000 	.word	0x48001000
 804125c:	48001400 	.word	0x48001400
 8041260:	40010400 	.word	0x40010400

08041264 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8041264:	b480      	push	{r7}
 8041266:	b083      	sub	sp, #12
 8041268:	af00      	add	r7, sp, #0
 804126a:	6078      	str	r0, [r7, #4]
 804126c:	460b      	mov	r3, r1
 804126e:	807b      	strh	r3, [r7, #2]
 8041270:	4613      	mov	r3, r2
 8041272:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8041274:	787b      	ldrb	r3, [r7, #1]
 8041276:	2b00      	cmp	r3, #0
 8041278:	d003      	beq.n	8041282 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 804127a:	887a      	ldrh	r2, [r7, #2]
 804127c:	687b      	ldr	r3, [r7, #4]
 804127e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8041280:	e002      	b.n	8041288 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8041282:	887a      	ldrh	r2, [r7, #2]
 8041284:	687b      	ldr	r3, [r7, #4]
 8041286:	629a      	str	r2, [r3, #40]	; 0x28
}
 8041288:	bf00      	nop
 804128a:	370c      	adds	r7, #12
 804128c:	46bd      	mov	sp, r7
 804128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041292:	4770      	bx	lr

08041294 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8041294:	b480      	push	{r7}
 8041296:	b085      	sub	sp, #20
 8041298:	af00      	add	r7, sp, #0
 804129a:	6078      	str	r0, [r7, #4]
 804129c:	460b      	mov	r3, r1
 804129e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80412a0:	687b      	ldr	r3, [r7, #4]
 80412a2:	695b      	ldr	r3, [r3, #20]
 80412a4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80412a6:	887a      	ldrh	r2, [r7, #2]
 80412a8:	68fb      	ldr	r3, [r7, #12]
 80412aa:	4013      	ands	r3, r2
 80412ac:	041a      	lsls	r2, r3, #16
 80412ae:	68fb      	ldr	r3, [r7, #12]
 80412b0:	43d9      	mvns	r1, r3
 80412b2:	887b      	ldrh	r3, [r7, #2]
 80412b4:	400b      	ands	r3, r1
 80412b6:	431a      	orrs	r2, r3
 80412b8:	687b      	ldr	r3, [r7, #4]
 80412ba:	619a      	str	r2, [r3, #24]
}
 80412bc:	bf00      	nop
 80412be:	3714      	adds	r7, #20
 80412c0:	46bd      	mov	sp, r7
 80412c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80412c6:	4770      	bx	lr

080412c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80412c8:	b580      	push	{r7, lr}
 80412ca:	b082      	sub	sp, #8
 80412cc:	af00      	add	r7, sp, #0
 80412ce:	4603      	mov	r3, r0
 80412d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80412d2:	4b08      	ldr	r3, [pc, #32]	; (80412f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80412d4:	695a      	ldr	r2, [r3, #20]
 80412d6:	88fb      	ldrh	r3, [r7, #6]
 80412d8:	4013      	ands	r3, r2
 80412da:	2b00      	cmp	r3, #0
 80412dc:	d006      	beq.n	80412ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80412de:	4a05      	ldr	r2, [pc, #20]	; (80412f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80412e0:	88fb      	ldrh	r3, [r7, #6]
 80412e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80412e4:	88fb      	ldrh	r3, [r7, #6]
 80412e6:	4618      	mov	r0, r3
 80412e8:	f000 f806 	bl	80412f8 <HAL_GPIO_EXTI_Callback>
  }
}
 80412ec:	bf00      	nop
 80412ee:	3708      	adds	r7, #8
 80412f0:	46bd      	mov	sp, r7
 80412f2:	bd80      	pop	{r7, pc}
 80412f4:	40010400 	.word	0x40010400

080412f8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80412f8:	b480      	push	{r7}
 80412fa:	b083      	sub	sp, #12
 80412fc:	af00      	add	r7, sp, #0
 80412fe:	4603      	mov	r3, r0
 8041300:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8041302:	bf00      	nop
 8041304:	370c      	adds	r7, #12
 8041306:	46bd      	mov	sp, r7
 8041308:	f85d 7b04 	ldr.w	r7, [sp], #4
 804130c:	4770      	bx	lr
	...

08041310 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8041310:	b480      	push	{r7}
 8041312:	b085      	sub	sp, #20
 8041314:	af00      	add	r7, sp, #0
 8041316:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8041318:	687b      	ldr	r3, [r7, #4]
 804131a:	2b00      	cmp	r3, #0
 804131c:	d141      	bne.n	80413a2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 804131e:	4b4b      	ldr	r3, [pc, #300]	; (804144c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8041320:	681b      	ldr	r3, [r3, #0]
 8041322:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8041326:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 804132a:	d131      	bne.n	8041390 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 804132c:	4b47      	ldr	r3, [pc, #284]	; (804144c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 804132e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8041332:	4a46      	ldr	r2, [pc, #280]	; (804144c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8041334:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8041338:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 804133c:	4b43      	ldr	r3, [pc, #268]	; (804144c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 804133e:	681b      	ldr	r3, [r3, #0]
 8041340:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8041344:	4a41      	ldr	r2, [pc, #260]	; (804144c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8041346:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 804134a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 804134c:	4b40      	ldr	r3, [pc, #256]	; (8041450 <HAL_PWREx_ControlVoltageScaling+0x140>)
 804134e:	681b      	ldr	r3, [r3, #0]
 8041350:	2232      	movs	r2, #50	; 0x32
 8041352:	fb02 f303 	mul.w	r3, r2, r3
 8041356:	4a3f      	ldr	r2, [pc, #252]	; (8041454 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8041358:	fba2 2303 	umull	r2, r3, r2, r3
 804135c:	0c9b      	lsrs	r3, r3, #18
 804135e:	3301      	adds	r3, #1
 8041360:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8041362:	e002      	b.n	804136a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8041364:	68fb      	ldr	r3, [r7, #12]
 8041366:	3b01      	subs	r3, #1
 8041368:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 804136a:	4b38      	ldr	r3, [pc, #224]	; (804144c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 804136c:	695b      	ldr	r3, [r3, #20]
 804136e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8041372:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8041376:	d102      	bne.n	804137e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8041378:	68fb      	ldr	r3, [r7, #12]
 804137a:	2b00      	cmp	r3, #0
 804137c:	d1f2      	bne.n	8041364 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 804137e:	4b33      	ldr	r3, [pc, #204]	; (804144c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8041380:	695b      	ldr	r3, [r3, #20]
 8041382:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8041386:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 804138a:	d158      	bne.n	804143e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 804138c:	2303      	movs	r3, #3
 804138e:	e057      	b.n	8041440 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8041390:	4b2e      	ldr	r3, [pc, #184]	; (804144c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8041392:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8041396:	4a2d      	ldr	r2, [pc, #180]	; (804144c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8041398:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 804139c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80413a0:	e04d      	b.n	804143e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80413a2:	687b      	ldr	r3, [r7, #4]
 80413a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80413a8:	d141      	bne.n	804142e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80413aa:	4b28      	ldr	r3, [pc, #160]	; (804144c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80413ac:	681b      	ldr	r3, [r3, #0]
 80413ae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80413b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80413b6:	d131      	bne.n	804141c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80413b8:	4b24      	ldr	r3, [pc, #144]	; (804144c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80413ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80413be:	4a23      	ldr	r2, [pc, #140]	; (804144c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80413c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80413c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80413c8:	4b20      	ldr	r3, [pc, #128]	; (804144c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80413ca:	681b      	ldr	r3, [r3, #0]
 80413cc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80413d0:	4a1e      	ldr	r2, [pc, #120]	; (804144c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80413d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80413d6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80413d8:	4b1d      	ldr	r3, [pc, #116]	; (8041450 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80413da:	681b      	ldr	r3, [r3, #0]
 80413dc:	2232      	movs	r2, #50	; 0x32
 80413de:	fb02 f303 	mul.w	r3, r2, r3
 80413e2:	4a1c      	ldr	r2, [pc, #112]	; (8041454 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80413e4:	fba2 2303 	umull	r2, r3, r2, r3
 80413e8:	0c9b      	lsrs	r3, r3, #18
 80413ea:	3301      	adds	r3, #1
 80413ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80413ee:	e002      	b.n	80413f6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80413f0:	68fb      	ldr	r3, [r7, #12]
 80413f2:	3b01      	subs	r3, #1
 80413f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80413f6:	4b15      	ldr	r3, [pc, #84]	; (804144c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80413f8:	695b      	ldr	r3, [r3, #20]
 80413fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80413fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8041402:	d102      	bne.n	804140a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8041404:	68fb      	ldr	r3, [r7, #12]
 8041406:	2b00      	cmp	r3, #0
 8041408:	d1f2      	bne.n	80413f0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 804140a:	4b10      	ldr	r3, [pc, #64]	; (804144c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 804140c:	695b      	ldr	r3, [r3, #20]
 804140e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8041412:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8041416:	d112      	bne.n	804143e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8041418:	2303      	movs	r3, #3
 804141a:	e011      	b.n	8041440 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 804141c:	4b0b      	ldr	r3, [pc, #44]	; (804144c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 804141e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8041422:	4a0a      	ldr	r2, [pc, #40]	; (804144c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8041424:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8041428:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 804142c:	e007      	b.n	804143e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 804142e:	4b07      	ldr	r3, [pc, #28]	; (804144c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8041430:	681b      	ldr	r3, [r3, #0]
 8041432:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8041436:	4a05      	ldr	r2, [pc, #20]	; (804144c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8041438:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 804143c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 804143e:	2300      	movs	r3, #0
}
 8041440:	4618      	mov	r0, r3
 8041442:	3714      	adds	r7, #20
 8041444:	46bd      	mov	sp, r7
 8041446:	f85d 7b04 	ldr.w	r7, [sp], #4
 804144a:	4770      	bx	lr
 804144c:	40007000 	.word	0x40007000
 8041450:	20000000 	.word	0x20000000
 8041454:	431bde83 	.word	0x431bde83

08041458 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8041458:	b480      	push	{r7}
 804145a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 804145c:	4b05      	ldr	r3, [pc, #20]	; (8041474 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 804145e:	689b      	ldr	r3, [r3, #8]
 8041460:	4a04      	ldr	r2, [pc, #16]	; (8041474 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8041462:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8041466:	6093      	str	r3, [r2, #8]
}
 8041468:	bf00      	nop
 804146a:	46bd      	mov	sp, r7
 804146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041470:	4770      	bx	lr
 8041472:	bf00      	nop
 8041474:	40007000 	.word	0x40007000

08041478 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8041478:	b580      	push	{r7, lr}
 804147a:	b088      	sub	sp, #32
 804147c:	af00      	add	r7, sp, #0
 804147e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8041480:	687b      	ldr	r3, [r7, #4]
 8041482:	2b00      	cmp	r3, #0
 8041484:	d101      	bne.n	804148a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8041486:	2301      	movs	r3, #1
 8041488:	e306      	b.n	8041a98 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 804148a:	687b      	ldr	r3, [r7, #4]
 804148c:	681b      	ldr	r3, [r3, #0]
 804148e:	f003 0301 	and.w	r3, r3, #1
 8041492:	2b00      	cmp	r3, #0
 8041494:	d075      	beq.n	8041582 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8041496:	4b97      	ldr	r3, [pc, #604]	; (80416f4 <HAL_RCC_OscConfig+0x27c>)
 8041498:	689b      	ldr	r3, [r3, #8]
 804149a:	f003 030c 	and.w	r3, r3, #12
 804149e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80414a0:	4b94      	ldr	r3, [pc, #592]	; (80416f4 <HAL_RCC_OscConfig+0x27c>)
 80414a2:	68db      	ldr	r3, [r3, #12]
 80414a4:	f003 0303 	and.w	r3, r3, #3
 80414a8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80414aa:	69bb      	ldr	r3, [r7, #24]
 80414ac:	2b0c      	cmp	r3, #12
 80414ae:	d102      	bne.n	80414b6 <HAL_RCC_OscConfig+0x3e>
 80414b0:	697b      	ldr	r3, [r7, #20]
 80414b2:	2b03      	cmp	r3, #3
 80414b4:	d002      	beq.n	80414bc <HAL_RCC_OscConfig+0x44>
 80414b6:	69bb      	ldr	r3, [r7, #24]
 80414b8:	2b08      	cmp	r3, #8
 80414ba:	d10b      	bne.n	80414d4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80414bc:	4b8d      	ldr	r3, [pc, #564]	; (80416f4 <HAL_RCC_OscConfig+0x27c>)
 80414be:	681b      	ldr	r3, [r3, #0]
 80414c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80414c4:	2b00      	cmp	r3, #0
 80414c6:	d05b      	beq.n	8041580 <HAL_RCC_OscConfig+0x108>
 80414c8:	687b      	ldr	r3, [r7, #4]
 80414ca:	685b      	ldr	r3, [r3, #4]
 80414cc:	2b00      	cmp	r3, #0
 80414ce:	d157      	bne.n	8041580 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80414d0:	2301      	movs	r3, #1
 80414d2:	e2e1      	b.n	8041a98 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80414d4:	687b      	ldr	r3, [r7, #4]
 80414d6:	685b      	ldr	r3, [r3, #4]
 80414d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80414dc:	d106      	bne.n	80414ec <HAL_RCC_OscConfig+0x74>
 80414de:	4b85      	ldr	r3, [pc, #532]	; (80416f4 <HAL_RCC_OscConfig+0x27c>)
 80414e0:	681b      	ldr	r3, [r3, #0]
 80414e2:	4a84      	ldr	r2, [pc, #528]	; (80416f4 <HAL_RCC_OscConfig+0x27c>)
 80414e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80414e8:	6013      	str	r3, [r2, #0]
 80414ea:	e01d      	b.n	8041528 <HAL_RCC_OscConfig+0xb0>
 80414ec:	687b      	ldr	r3, [r7, #4]
 80414ee:	685b      	ldr	r3, [r3, #4]
 80414f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80414f4:	d10c      	bne.n	8041510 <HAL_RCC_OscConfig+0x98>
 80414f6:	4b7f      	ldr	r3, [pc, #508]	; (80416f4 <HAL_RCC_OscConfig+0x27c>)
 80414f8:	681b      	ldr	r3, [r3, #0]
 80414fa:	4a7e      	ldr	r2, [pc, #504]	; (80416f4 <HAL_RCC_OscConfig+0x27c>)
 80414fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8041500:	6013      	str	r3, [r2, #0]
 8041502:	4b7c      	ldr	r3, [pc, #496]	; (80416f4 <HAL_RCC_OscConfig+0x27c>)
 8041504:	681b      	ldr	r3, [r3, #0]
 8041506:	4a7b      	ldr	r2, [pc, #492]	; (80416f4 <HAL_RCC_OscConfig+0x27c>)
 8041508:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 804150c:	6013      	str	r3, [r2, #0]
 804150e:	e00b      	b.n	8041528 <HAL_RCC_OscConfig+0xb0>
 8041510:	4b78      	ldr	r3, [pc, #480]	; (80416f4 <HAL_RCC_OscConfig+0x27c>)
 8041512:	681b      	ldr	r3, [r3, #0]
 8041514:	4a77      	ldr	r2, [pc, #476]	; (80416f4 <HAL_RCC_OscConfig+0x27c>)
 8041516:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 804151a:	6013      	str	r3, [r2, #0]
 804151c:	4b75      	ldr	r3, [pc, #468]	; (80416f4 <HAL_RCC_OscConfig+0x27c>)
 804151e:	681b      	ldr	r3, [r3, #0]
 8041520:	4a74      	ldr	r2, [pc, #464]	; (80416f4 <HAL_RCC_OscConfig+0x27c>)
 8041522:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8041526:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8041528:	687b      	ldr	r3, [r7, #4]
 804152a:	685b      	ldr	r3, [r3, #4]
 804152c:	2b00      	cmp	r3, #0
 804152e:	d013      	beq.n	8041558 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041530:	f7ff fbfa 	bl	8040d28 <HAL_GetTick>
 8041534:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8041536:	e008      	b.n	804154a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8041538:	f7ff fbf6 	bl	8040d28 <HAL_GetTick>
 804153c:	4602      	mov	r2, r0
 804153e:	693b      	ldr	r3, [r7, #16]
 8041540:	1ad3      	subs	r3, r2, r3
 8041542:	2b64      	cmp	r3, #100	; 0x64
 8041544:	d901      	bls.n	804154a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8041546:	2303      	movs	r3, #3
 8041548:	e2a6      	b.n	8041a98 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 804154a:	4b6a      	ldr	r3, [pc, #424]	; (80416f4 <HAL_RCC_OscConfig+0x27c>)
 804154c:	681b      	ldr	r3, [r3, #0]
 804154e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8041552:	2b00      	cmp	r3, #0
 8041554:	d0f0      	beq.n	8041538 <HAL_RCC_OscConfig+0xc0>
 8041556:	e014      	b.n	8041582 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041558:	f7ff fbe6 	bl	8040d28 <HAL_GetTick>
 804155c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 804155e:	e008      	b.n	8041572 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8041560:	f7ff fbe2 	bl	8040d28 <HAL_GetTick>
 8041564:	4602      	mov	r2, r0
 8041566:	693b      	ldr	r3, [r7, #16]
 8041568:	1ad3      	subs	r3, r2, r3
 804156a:	2b64      	cmp	r3, #100	; 0x64
 804156c:	d901      	bls.n	8041572 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 804156e:	2303      	movs	r3, #3
 8041570:	e292      	b.n	8041a98 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8041572:	4b60      	ldr	r3, [pc, #384]	; (80416f4 <HAL_RCC_OscConfig+0x27c>)
 8041574:	681b      	ldr	r3, [r3, #0]
 8041576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 804157a:	2b00      	cmp	r3, #0
 804157c:	d1f0      	bne.n	8041560 <HAL_RCC_OscConfig+0xe8>
 804157e:	e000      	b.n	8041582 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8041580:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8041582:	687b      	ldr	r3, [r7, #4]
 8041584:	681b      	ldr	r3, [r3, #0]
 8041586:	f003 0302 	and.w	r3, r3, #2
 804158a:	2b00      	cmp	r3, #0
 804158c:	d075      	beq.n	804167a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 804158e:	4b59      	ldr	r3, [pc, #356]	; (80416f4 <HAL_RCC_OscConfig+0x27c>)
 8041590:	689b      	ldr	r3, [r3, #8]
 8041592:	f003 030c 	and.w	r3, r3, #12
 8041596:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8041598:	4b56      	ldr	r3, [pc, #344]	; (80416f4 <HAL_RCC_OscConfig+0x27c>)
 804159a:	68db      	ldr	r3, [r3, #12]
 804159c:	f003 0303 	and.w	r3, r3, #3
 80415a0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80415a2:	69bb      	ldr	r3, [r7, #24]
 80415a4:	2b0c      	cmp	r3, #12
 80415a6:	d102      	bne.n	80415ae <HAL_RCC_OscConfig+0x136>
 80415a8:	697b      	ldr	r3, [r7, #20]
 80415aa:	2b02      	cmp	r3, #2
 80415ac:	d002      	beq.n	80415b4 <HAL_RCC_OscConfig+0x13c>
 80415ae:	69bb      	ldr	r3, [r7, #24]
 80415b0:	2b04      	cmp	r3, #4
 80415b2:	d11f      	bne.n	80415f4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80415b4:	4b4f      	ldr	r3, [pc, #316]	; (80416f4 <HAL_RCC_OscConfig+0x27c>)
 80415b6:	681b      	ldr	r3, [r3, #0]
 80415b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80415bc:	2b00      	cmp	r3, #0
 80415be:	d005      	beq.n	80415cc <HAL_RCC_OscConfig+0x154>
 80415c0:	687b      	ldr	r3, [r7, #4]
 80415c2:	68db      	ldr	r3, [r3, #12]
 80415c4:	2b00      	cmp	r3, #0
 80415c6:	d101      	bne.n	80415cc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80415c8:	2301      	movs	r3, #1
 80415ca:	e265      	b.n	8041a98 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80415cc:	4b49      	ldr	r3, [pc, #292]	; (80416f4 <HAL_RCC_OscConfig+0x27c>)
 80415ce:	685b      	ldr	r3, [r3, #4]
 80415d0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80415d4:	687b      	ldr	r3, [r7, #4]
 80415d6:	691b      	ldr	r3, [r3, #16]
 80415d8:	061b      	lsls	r3, r3, #24
 80415da:	4946      	ldr	r1, [pc, #280]	; (80416f4 <HAL_RCC_OscConfig+0x27c>)
 80415dc:	4313      	orrs	r3, r2
 80415de:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80415e0:	4b45      	ldr	r3, [pc, #276]	; (80416f8 <HAL_RCC_OscConfig+0x280>)
 80415e2:	681b      	ldr	r3, [r3, #0]
 80415e4:	4618      	mov	r0, r3
 80415e6:	f7ff fb53 	bl	8040c90 <HAL_InitTick>
 80415ea:	4603      	mov	r3, r0
 80415ec:	2b00      	cmp	r3, #0
 80415ee:	d043      	beq.n	8041678 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80415f0:	2301      	movs	r3, #1
 80415f2:	e251      	b.n	8041a98 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80415f4:	687b      	ldr	r3, [r7, #4]
 80415f6:	68db      	ldr	r3, [r3, #12]
 80415f8:	2b00      	cmp	r3, #0
 80415fa:	d023      	beq.n	8041644 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80415fc:	4b3d      	ldr	r3, [pc, #244]	; (80416f4 <HAL_RCC_OscConfig+0x27c>)
 80415fe:	681b      	ldr	r3, [r3, #0]
 8041600:	4a3c      	ldr	r2, [pc, #240]	; (80416f4 <HAL_RCC_OscConfig+0x27c>)
 8041602:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8041606:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041608:	f7ff fb8e 	bl	8040d28 <HAL_GetTick>
 804160c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 804160e:	e008      	b.n	8041622 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8041610:	f7ff fb8a 	bl	8040d28 <HAL_GetTick>
 8041614:	4602      	mov	r2, r0
 8041616:	693b      	ldr	r3, [r7, #16]
 8041618:	1ad3      	subs	r3, r2, r3
 804161a:	2b02      	cmp	r3, #2
 804161c:	d901      	bls.n	8041622 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 804161e:	2303      	movs	r3, #3
 8041620:	e23a      	b.n	8041a98 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8041622:	4b34      	ldr	r3, [pc, #208]	; (80416f4 <HAL_RCC_OscConfig+0x27c>)
 8041624:	681b      	ldr	r3, [r3, #0]
 8041626:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 804162a:	2b00      	cmp	r3, #0
 804162c:	d0f0      	beq.n	8041610 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 804162e:	4b31      	ldr	r3, [pc, #196]	; (80416f4 <HAL_RCC_OscConfig+0x27c>)
 8041630:	685b      	ldr	r3, [r3, #4]
 8041632:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8041636:	687b      	ldr	r3, [r7, #4]
 8041638:	691b      	ldr	r3, [r3, #16]
 804163a:	061b      	lsls	r3, r3, #24
 804163c:	492d      	ldr	r1, [pc, #180]	; (80416f4 <HAL_RCC_OscConfig+0x27c>)
 804163e:	4313      	orrs	r3, r2
 8041640:	604b      	str	r3, [r1, #4]
 8041642:	e01a      	b.n	804167a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8041644:	4b2b      	ldr	r3, [pc, #172]	; (80416f4 <HAL_RCC_OscConfig+0x27c>)
 8041646:	681b      	ldr	r3, [r3, #0]
 8041648:	4a2a      	ldr	r2, [pc, #168]	; (80416f4 <HAL_RCC_OscConfig+0x27c>)
 804164a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 804164e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041650:	f7ff fb6a 	bl	8040d28 <HAL_GetTick>
 8041654:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8041656:	e008      	b.n	804166a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8041658:	f7ff fb66 	bl	8040d28 <HAL_GetTick>
 804165c:	4602      	mov	r2, r0
 804165e:	693b      	ldr	r3, [r7, #16]
 8041660:	1ad3      	subs	r3, r2, r3
 8041662:	2b02      	cmp	r3, #2
 8041664:	d901      	bls.n	804166a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8041666:	2303      	movs	r3, #3
 8041668:	e216      	b.n	8041a98 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 804166a:	4b22      	ldr	r3, [pc, #136]	; (80416f4 <HAL_RCC_OscConfig+0x27c>)
 804166c:	681b      	ldr	r3, [r3, #0]
 804166e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8041672:	2b00      	cmp	r3, #0
 8041674:	d1f0      	bne.n	8041658 <HAL_RCC_OscConfig+0x1e0>
 8041676:	e000      	b.n	804167a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8041678:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 804167a:	687b      	ldr	r3, [r7, #4]
 804167c:	681b      	ldr	r3, [r3, #0]
 804167e:	f003 0308 	and.w	r3, r3, #8
 8041682:	2b00      	cmp	r3, #0
 8041684:	d041      	beq.n	804170a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8041686:	687b      	ldr	r3, [r7, #4]
 8041688:	695b      	ldr	r3, [r3, #20]
 804168a:	2b00      	cmp	r3, #0
 804168c:	d01c      	beq.n	80416c8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 804168e:	4b19      	ldr	r3, [pc, #100]	; (80416f4 <HAL_RCC_OscConfig+0x27c>)
 8041690:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8041694:	4a17      	ldr	r2, [pc, #92]	; (80416f4 <HAL_RCC_OscConfig+0x27c>)
 8041696:	f043 0301 	orr.w	r3, r3, #1
 804169a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 804169e:	f7ff fb43 	bl	8040d28 <HAL_GetTick>
 80416a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80416a4:	e008      	b.n	80416b8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80416a6:	f7ff fb3f 	bl	8040d28 <HAL_GetTick>
 80416aa:	4602      	mov	r2, r0
 80416ac:	693b      	ldr	r3, [r7, #16]
 80416ae:	1ad3      	subs	r3, r2, r3
 80416b0:	2b02      	cmp	r3, #2
 80416b2:	d901      	bls.n	80416b8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80416b4:	2303      	movs	r3, #3
 80416b6:	e1ef      	b.n	8041a98 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80416b8:	4b0e      	ldr	r3, [pc, #56]	; (80416f4 <HAL_RCC_OscConfig+0x27c>)
 80416ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80416be:	f003 0302 	and.w	r3, r3, #2
 80416c2:	2b00      	cmp	r3, #0
 80416c4:	d0ef      	beq.n	80416a6 <HAL_RCC_OscConfig+0x22e>
 80416c6:	e020      	b.n	804170a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80416c8:	4b0a      	ldr	r3, [pc, #40]	; (80416f4 <HAL_RCC_OscConfig+0x27c>)
 80416ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80416ce:	4a09      	ldr	r2, [pc, #36]	; (80416f4 <HAL_RCC_OscConfig+0x27c>)
 80416d0:	f023 0301 	bic.w	r3, r3, #1
 80416d4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80416d8:	f7ff fb26 	bl	8040d28 <HAL_GetTick>
 80416dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80416de:	e00d      	b.n	80416fc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80416e0:	f7ff fb22 	bl	8040d28 <HAL_GetTick>
 80416e4:	4602      	mov	r2, r0
 80416e6:	693b      	ldr	r3, [r7, #16]
 80416e8:	1ad3      	subs	r3, r2, r3
 80416ea:	2b02      	cmp	r3, #2
 80416ec:	d906      	bls.n	80416fc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80416ee:	2303      	movs	r3, #3
 80416f0:	e1d2      	b.n	8041a98 <HAL_RCC_OscConfig+0x620>
 80416f2:	bf00      	nop
 80416f4:	40021000 	.word	0x40021000
 80416f8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80416fc:	4b8c      	ldr	r3, [pc, #560]	; (8041930 <HAL_RCC_OscConfig+0x4b8>)
 80416fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8041702:	f003 0302 	and.w	r3, r3, #2
 8041706:	2b00      	cmp	r3, #0
 8041708:	d1ea      	bne.n	80416e0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 804170a:	687b      	ldr	r3, [r7, #4]
 804170c:	681b      	ldr	r3, [r3, #0]
 804170e:	f003 0304 	and.w	r3, r3, #4
 8041712:	2b00      	cmp	r3, #0
 8041714:	f000 80a6 	beq.w	8041864 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8041718:	2300      	movs	r3, #0
 804171a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 804171c:	4b84      	ldr	r3, [pc, #528]	; (8041930 <HAL_RCC_OscConfig+0x4b8>)
 804171e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8041720:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8041724:	2b00      	cmp	r3, #0
 8041726:	d101      	bne.n	804172c <HAL_RCC_OscConfig+0x2b4>
 8041728:	2301      	movs	r3, #1
 804172a:	e000      	b.n	804172e <HAL_RCC_OscConfig+0x2b6>
 804172c:	2300      	movs	r3, #0
 804172e:	2b00      	cmp	r3, #0
 8041730:	d00d      	beq.n	804174e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8041732:	4b7f      	ldr	r3, [pc, #508]	; (8041930 <HAL_RCC_OscConfig+0x4b8>)
 8041734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8041736:	4a7e      	ldr	r2, [pc, #504]	; (8041930 <HAL_RCC_OscConfig+0x4b8>)
 8041738:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 804173c:	6593      	str	r3, [r2, #88]	; 0x58
 804173e:	4b7c      	ldr	r3, [pc, #496]	; (8041930 <HAL_RCC_OscConfig+0x4b8>)
 8041740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8041742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8041746:	60fb      	str	r3, [r7, #12]
 8041748:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 804174a:	2301      	movs	r3, #1
 804174c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 804174e:	4b79      	ldr	r3, [pc, #484]	; (8041934 <HAL_RCC_OscConfig+0x4bc>)
 8041750:	681b      	ldr	r3, [r3, #0]
 8041752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8041756:	2b00      	cmp	r3, #0
 8041758:	d118      	bne.n	804178c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 804175a:	4b76      	ldr	r3, [pc, #472]	; (8041934 <HAL_RCC_OscConfig+0x4bc>)
 804175c:	681b      	ldr	r3, [r3, #0]
 804175e:	4a75      	ldr	r2, [pc, #468]	; (8041934 <HAL_RCC_OscConfig+0x4bc>)
 8041760:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8041764:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8041766:	f7ff fadf 	bl	8040d28 <HAL_GetTick>
 804176a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 804176c:	e008      	b.n	8041780 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 804176e:	f7ff fadb 	bl	8040d28 <HAL_GetTick>
 8041772:	4602      	mov	r2, r0
 8041774:	693b      	ldr	r3, [r7, #16]
 8041776:	1ad3      	subs	r3, r2, r3
 8041778:	2b02      	cmp	r3, #2
 804177a:	d901      	bls.n	8041780 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 804177c:	2303      	movs	r3, #3
 804177e:	e18b      	b.n	8041a98 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8041780:	4b6c      	ldr	r3, [pc, #432]	; (8041934 <HAL_RCC_OscConfig+0x4bc>)
 8041782:	681b      	ldr	r3, [r3, #0]
 8041784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8041788:	2b00      	cmp	r3, #0
 804178a:	d0f0      	beq.n	804176e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 804178c:	687b      	ldr	r3, [r7, #4]
 804178e:	689b      	ldr	r3, [r3, #8]
 8041790:	2b01      	cmp	r3, #1
 8041792:	d108      	bne.n	80417a6 <HAL_RCC_OscConfig+0x32e>
 8041794:	4b66      	ldr	r3, [pc, #408]	; (8041930 <HAL_RCC_OscConfig+0x4b8>)
 8041796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804179a:	4a65      	ldr	r2, [pc, #404]	; (8041930 <HAL_RCC_OscConfig+0x4b8>)
 804179c:	f043 0301 	orr.w	r3, r3, #1
 80417a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80417a4:	e024      	b.n	80417f0 <HAL_RCC_OscConfig+0x378>
 80417a6:	687b      	ldr	r3, [r7, #4]
 80417a8:	689b      	ldr	r3, [r3, #8]
 80417aa:	2b05      	cmp	r3, #5
 80417ac:	d110      	bne.n	80417d0 <HAL_RCC_OscConfig+0x358>
 80417ae:	4b60      	ldr	r3, [pc, #384]	; (8041930 <HAL_RCC_OscConfig+0x4b8>)
 80417b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80417b4:	4a5e      	ldr	r2, [pc, #376]	; (8041930 <HAL_RCC_OscConfig+0x4b8>)
 80417b6:	f043 0304 	orr.w	r3, r3, #4
 80417ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80417be:	4b5c      	ldr	r3, [pc, #368]	; (8041930 <HAL_RCC_OscConfig+0x4b8>)
 80417c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80417c4:	4a5a      	ldr	r2, [pc, #360]	; (8041930 <HAL_RCC_OscConfig+0x4b8>)
 80417c6:	f043 0301 	orr.w	r3, r3, #1
 80417ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80417ce:	e00f      	b.n	80417f0 <HAL_RCC_OscConfig+0x378>
 80417d0:	4b57      	ldr	r3, [pc, #348]	; (8041930 <HAL_RCC_OscConfig+0x4b8>)
 80417d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80417d6:	4a56      	ldr	r2, [pc, #344]	; (8041930 <HAL_RCC_OscConfig+0x4b8>)
 80417d8:	f023 0301 	bic.w	r3, r3, #1
 80417dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80417e0:	4b53      	ldr	r3, [pc, #332]	; (8041930 <HAL_RCC_OscConfig+0x4b8>)
 80417e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80417e6:	4a52      	ldr	r2, [pc, #328]	; (8041930 <HAL_RCC_OscConfig+0x4b8>)
 80417e8:	f023 0304 	bic.w	r3, r3, #4
 80417ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80417f0:	687b      	ldr	r3, [r7, #4]
 80417f2:	689b      	ldr	r3, [r3, #8]
 80417f4:	2b00      	cmp	r3, #0
 80417f6:	d016      	beq.n	8041826 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80417f8:	f7ff fa96 	bl	8040d28 <HAL_GetTick>
 80417fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80417fe:	e00a      	b.n	8041816 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8041800:	f7ff fa92 	bl	8040d28 <HAL_GetTick>
 8041804:	4602      	mov	r2, r0
 8041806:	693b      	ldr	r3, [r7, #16]
 8041808:	1ad3      	subs	r3, r2, r3
 804180a:	f241 3288 	movw	r2, #5000	; 0x1388
 804180e:	4293      	cmp	r3, r2
 8041810:	d901      	bls.n	8041816 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8041812:	2303      	movs	r3, #3
 8041814:	e140      	b.n	8041a98 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8041816:	4b46      	ldr	r3, [pc, #280]	; (8041930 <HAL_RCC_OscConfig+0x4b8>)
 8041818:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804181c:	f003 0302 	and.w	r3, r3, #2
 8041820:	2b00      	cmp	r3, #0
 8041822:	d0ed      	beq.n	8041800 <HAL_RCC_OscConfig+0x388>
 8041824:	e015      	b.n	8041852 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8041826:	f7ff fa7f 	bl	8040d28 <HAL_GetTick>
 804182a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 804182c:	e00a      	b.n	8041844 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 804182e:	f7ff fa7b 	bl	8040d28 <HAL_GetTick>
 8041832:	4602      	mov	r2, r0
 8041834:	693b      	ldr	r3, [r7, #16]
 8041836:	1ad3      	subs	r3, r2, r3
 8041838:	f241 3288 	movw	r2, #5000	; 0x1388
 804183c:	4293      	cmp	r3, r2
 804183e:	d901      	bls.n	8041844 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8041840:	2303      	movs	r3, #3
 8041842:	e129      	b.n	8041a98 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8041844:	4b3a      	ldr	r3, [pc, #232]	; (8041930 <HAL_RCC_OscConfig+0x4b8>)
 8041846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804184a:	f003 0302 	and.w	r3, r3, #2
 804184e:	2b00      	cmp	r3, #0
 8041850:	d1ed      	bne.n	804182e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8041852:	7ffb      	ldrb	r3, [r7, #31]
 8041854:	2b01      	cmp	r3, #1
 8041856:	d105      	bne.n	8041864 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8041858:	4b35      	ldr	r3, [pc, #212]	; (8041930 <HAL_RCC_OscConfig+0x4b8>)
 804185a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804185c:	4a34      	ldr	r2, [pc, #208]	; (8041930 <HAL_RCC_OscConfig+0x4b8>)
 804185e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8041862:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8041864:	687b      	ldr	r3, [r7, #4]
 8041866:	681b      	ldr	r3, [r3, #0]
 8041868:	f003 0320 	and.w	r3, r3, #32
 804186c:	2b00      	cmp	r3, #0
 804186e:	d03c      	beq.n	80418ea <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8041870:	687b      	ldr	r3, [r7, #4]
 8041872:	699b      	ldr	r3, [r3, #24]
 8041874:	2b00      	cmp	r3, #0
 8041876:	d01c      	beq.n	80418b2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8041878:	4b2d      	ldr	r3, [pc, #180]	; (8041930 <HAL_RCC_OscConfig+0x4b8>)
 804187a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 804187e:	4a2c      	ldr	r2, [pc, #176]	; (8041930 <HAL_RCC_OscConfig+0x4b8>)
 8041880:	f043 0301 	orr.w	r3, r3, #1
 8041884:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8041888:	f7ff fa4e 	bl	8040d28 <HAL_GetTick>
 804188c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 804188e:	e008      	b.n	80418a2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8041890:	f7ff fa4a 	bl	8040d28 <HAL_GetTick>
 8041894:	4602      	mov	r2, r0
 8041896:	693b      	ldr	r3, [r7, #16]
 8041898:	1ad3      	subs	r3, r2, r3
 804189a:	2b02      	cmp	r3, #2
 804189c:	d901      	bls.n	80418a2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 804189e:	2303      	movs	r3, #3
 80418a0:	e0fa      	b.n	8041a98 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80418a2:	4b23      	ldr	r3, [pc, #140]	; (8041930 <HAL_RCC_OscConfig+0x4b8>)
 80418a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80418a8:	f003 0302 	and.w	r3, r3, #2
 80418ac:	2b00      	cmp	r3, #0
 80418ae:	d0ef      	beq.n	8041890 <HAL_RCC_OscConfig+0x418>
 80418b0:	e01b      	b.n	80418ea <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80418b2:	4b1f      	ldr	r3, [pc, #124]	; (8041930 <HAL_RCC_OscConfig+0x4b8>)
 80418b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80418b8:	4a1d      	ldr	r2, [pc, #116]	; (8041930 <HAL_RCC_OscConfig+0x4b8>)
 80418ba:	f023 0301 	bic.w	r3, r3, #1
 80418be:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80418c2:	f7ff fa31 	bl	8040d28 <HAL_GetTick>
 80418c6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80418c8:	e008      	b.n	80418dc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80418ca:	f7ff fa2d 	bl	8040d28 <HAL_GetTick>
 80418ce:	4602      	mov	r2, r0
 80418d0:	693b      	ldr	r3, [r7, #16]
 80418d2:	1ad3      	subs	r3, r2, r3
 80418d4:	2b02      	cmp	r3, #2
 80418d6:	d901      	bls.n	80418dc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80418d8:	2303      	movs	r3, #3
 80418da:	e0dd      	b.n	8041a98 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80418dc:	4b14      	ldr	r3, [pc, #80]	; (8041930 <HAL_RCC_OscConfig+0x4b8>)
 80418de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80418e2:	f003 0302 	and.w	r3, r3, #2
 80418e6:	2b00      	cmp	r3, #0
 80418e8:	d1ef      	bne.n	80418ca <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80418ea:	687b      	ldr	r3, [r7, #4]
 80418ec:	69db      	ldr	r3, [r3, #28]
 80418ee:	2b00      	cmp	r3, #0
 80418f0:	f000 80d1 	beq.w	8041a96 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80418f4:	4b0e      	ldr	r3, [pc, #56]	; (8041930 <HAL_RCC_OscConfig+0x4b8>)
 80418f6:	689b      	ldr	r3, [r3, #8]
 80418f8:	f003 030c 	and.w	r3, r3, #12
 80418fc:	2b0c      	cmp	r3, #12
 80418fe:	f000 808b 	beq.w	8041a18 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8041902:	687b      	ldr	r3, [r7, #4]
 8041904:	69db      	ldr	r3, [r3, #28]
 8041906:	2b02      	cmp	r3, #2
 8041908:	d15e      	bne.n	80419c8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 804190a:	4b09      	ldr	r3, [pc, #36]	; (8041930 <HAL_RCC_OscConfig+0x4b8>)
 804190c:	681b      	ldr	r3, [r3, #0]
 804190e:	4a08      	ldr	r2, [pc, #32]	; (8041930 <HAL_RCC_OscConfig+0x4b8>)
 8041910:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8041914:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041916:	f7ff fa07 	bl	8040d28 <HAL_GetTick>
 804191a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 804191c:	e00c      	b.n	8041938 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 804191e:	f7ff fa03 	bl	8040d28 <HAL_GetTick>
 8041922:	4602      	mov	r2, r0
 8041924:	693b      	ldr	r3, [r7, #16]
 8041926:	1ad3      	subs	r3, r2, r3
 8041928:	2b02      	cmp	r3, #2
 804192a:	d905      	bls.n	8041938 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 804192c:	2303      	movs	r3, #3
 804192e:	e0b3      	b.n	8041a98 <HAL_RCC_OscConfig+0x620>
 8041930:	40021000 	.word	0x40021000
 8041934:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8041938:	4b59      	ldr	r3, [pc, #356]	; (8041aa0 <HAL_RCC_OscConfig+0x628>)
 804193a:	681b      	ldr	r3, [r3, #0]
 804193c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8041940:	2b00      	cmp	r3, #0
 8041942:	d1ec      	bne.n	804191e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8041944:	4b56      	ldr	r3, [pc, #344]	; (8041aa0 <HAL_RCC_OscConfig+0x628>)
 8041946:	68da      	ldr	r2, [r3, #12]
 8041948:	4b56      	ldr	r3, [pc, #344]	; (8041aa4 <HAL_RCC_OscConfig+0x62c>)
 804194a:	4013      	ands	r3, r2
 804194c:	687a      	ldr	r2, [r7, #4]
 804194e:	6a11      	ldr	r1, [r2, #32]
 8041950:	687a      	ldr	r2, [r7, #4]
 8041952:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8041954:	3a01      	subs	r2, #1
 8041956:	0112      	lsls	r2, r2, #4
 8041958:	4311      	orrs	r1, r2
 804195a:	687a      	ldr	r2, [r7, #4]
 804195c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 804195e:	0212      	lsls	r2, r2, #8
 8041960:	4311      	orrs	r1, r2
 8041962:	687a      	ldr	r2, [r7, #4]
 8041964:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8041966:	0852      	lsrs	r2, r2, #1
 8041968:	3a01      	subs	r2, #1
 804196a:	0552      	lsls	r2, r2, #21
 804196c:	4311      	orrs	r1, r2
 804196e:	687a      	ldr	r2, [r7, #4]
 8041970:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8041972:	0852      	lsrs	r2, r2, #1
 8041974:	3a01      	subs	r2, #1
 8041976:	0652      	lsls	r2, r2, #25
 8041978:	4311      	orrs	r1, r2
 804197a:	687a      	ldr	r2, [r7, #4]
 804197c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 804197e:	06d2      	lsls	r2, r2, #27
 8041980:	430a      	orrs	r2, r1
 8041982:	4947      	ldr	r1, [pc, #284]	; (8041aa0 <HAL_RCC_OscConfig+0x628>)
 8041984:	4313      	orrs	r3, r2
 8041986:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8041988:	4b45      	ldr	r3, [pc, #276]	; (8041aa0 <HAL_RCC_OscConfig+0x628>)
 804198a:	681b      	ldr	r3, [r3, #0]
 804198c:	4a44      	ldr	r2, [pc, #272]	; (8041aa0 <HAL_RCC_OscConfig+0x628>)
 804198e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8041992:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8041994:	4b42      	ldr	r3, [pc, #264]	; (8041aa0 <HAL_RCC_OscConfig+0x628>)
 8041996:	68db      	ldr	r3, [r3, #12]
 8041998:	4a41      	ldr	r2, [pc, #260]	; (8041aa0 <HAL_RCC_OscConfig+0x628>)
 804199a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 804199e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80419a0:	f7ff f9c2 	bl	8040d28 <HAL_GetTick>
 80419a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80419a6:	e008      	b.n	80419ba <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80419a8:	f7ff f9be 	bl	8040d28 <HAL_GetTick>
 80419ac:	4602      	mov	r2, r0
 80419ae:	693b      	ldr	r3, [r7, #16]
 80419b0:	1ad3      	subs	r3, r2, r3
 80419b2:	2b02      	cmp	r3, #2
 80419b4:	d901      	bls.n	80419ba <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80419b6:	2303      	movs	r3, #3
 80419b8:	e06e      	b.n	8041a98 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80419ba:	4b39      	ldr	r3, [pc, #228]	; (8041aa0 <HAL_RCC_OscConfig+0x628>)
 80419bc:	681b      	ldr	r3, [r3, #0]
 80419be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80419c2:	2b00      	cmp	r3, #0
 80419c4:	d0f0      	beq.n	80419a8 <HAL_RCC_OscConfig+0x530>
 80419c6:	e066      	b.n	8041a96 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80419c8:	4b35      	ldr	r3, [pc, #212]	; (8041aa0 <HAL_RCC_OscConfig+0x628>)
 80419ca:	681b      	ldr	r3, [r3, #0]
 80419cc:	4a34      	ldr	r2, [pc, #208]	; (8041aa0 <HAL_RCC_OscConfig+0x628>)
 80419ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80419d2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80419d4:	4b32      	ldr	r3, [pc, #200]	; (8041aa0 <HAL_RCC_OscConfig+0x628>)
 80419d6:	68db      	ldr	r3, [r3, #12]
 80419d8:	4a31      	ldr	r2, [pc, #196]	; (8041aa0 <HAL_RCC_OscConfig+0x628>)
 80419da:	f023 0303 	bic.w	r3, r3, #3
 80419de:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80419e0:	4b2f      	ldr	r3, [pc, #188]	; (8041aa0 <HAL_RCC_OscConfig+0x628>)
 80419e2:	68db      	ldr	r3, [r3, #12]
 80419e4:	4a2e      	ldr	r2, [pc, #184]	; (8041aa0 <HAL_RCC_OscConfig+0x628>)
 80419e6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80419ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80419ee:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80419f0:	f7ff f99a 	bl	8040d28 <HAL_GetTick>
 80419f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80419f6:	e008      	b.n	8041a0a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80419f8:	f7ff f996 	bl	8040d28 <HAL_GetTick>
 80419fc:	4602      	mov	r2, r0
 80419fe:	693b      	ldr	r3, [r7, #16]
 8041a00:	1ad3      	subs	r3, r2, r3
 8041a02:	2b02      	cmp	r3, #2
 8041a04:	d901      	bls.n	8041a0a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8041a06:	2303      	movs	r3, #3
 8041a08:	e046      	b.n	8041a98 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8041a0a:	4b25      	ldr	r3, [pc, #148]	; (8041aa0 <HAL_RCC_OscConfig+0x628>)
 8041a0c:	681b      	ldr	r3, [r3, #0]
 8041a0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8041a12:	2b00      	cmp	r3, #0
 8041a14:	d1f0      	bne.n	80419f8 <HAL_RCC_OscConfig+0x580>
 8041a16:	e03e      	b.n	8041a96 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8041a18:	687b      	ldr	r3, [r7, #4]
 8041a1a:	69db      	ldr	r3, [r3, #28]
 8041a1c:	2b01      	cmp	r3, #1
 8041a1e:	d101      	bne.n	8041a24 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8041a20:	2301      	movs	r3, #1
 8041a22:	e039      	b.n	8041a98 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8041a24:	4b1e      	ldr	r3, [pc, #120]	; (8041aa0 <HAL_RCC_OscConfig+0x628>)
 8041a26:	68db      	ldr	r3, [r3, #12]
 8041a28:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8041a2a:	697b      	ldr	r3, [r7, #20]
 8041a2c:	f003 0203 	and.w	r2, r3, #3
 8041a30:	687b      	ldr	r3, [r7, #4]
 8041a32:	6a1b      	ldr	r3, [r3, #32]
 8041a34:	429a      	cmp	r2, r3
 8041a36:	d12c      	bne.n	8041a92 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8041a38:	697b      	ldr	r3, [r7, #20]
 8041a3a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8041a3e:	687b      	ldr	r3, [r7, #4]
 8041a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8041a42:	3b01      	subs	r3, #1
 8041a44:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8041a46:	429a      	cmp	r2, r3
 8041a48:	d123      	bne.n	8041a92 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8041a4a:	697b      	ldr	r3, [r7, #20]
 8041a4c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8041a50:	687b      	ldr	r3, [r7, #4]
 8041a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8041a54:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8041a56:	429a      	cmp	r2, r3
 8041a58:	d11b      	bne.n	8041a92 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8041a5a:	697b      	ldr	r3, [r7, #20]
 8041a5c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8041a60:	687b      	ldr	r3, [r7, #4]
 8041a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8041a64:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8041a66:	429a      	cmp	r2, r3
 8041a68:	d113      	bne.n	8041a92 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8041a6a:	697b      	ldr	r3, [r7, #20]
 8041a6c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8041a70:	687b      	ldr	r3, [r7, #4]
 8041a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041a74:	085b      	lsrs	r3, r3, #1
 8041a76:	3b01      	subs	r3, #1
 8041a78:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8041a7a:	429a      	cmp	r2, r3
 8041a7c:	d109      	bne.n	8041a92 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8041a7e:	697b      	ldr	r3, [r7, #20]
 8041a80:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8041a84:	687b      	ldr	r3, [r7, #4]
 8041a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8041a88:	085b      	lsrs	r3, r3, #1
 8041a8a:	3b01      	subs	r3, #1
 8041a8c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8041a8e:	429a      	cmp	r2, r3
 8041a90:	d001      	beq.n	8041a96 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8041a92:	2301      	movs	r3, #1
 8041a94:	e000      	b.n	8041a98 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8041a96:	2300      	movs	r3, #0
}
 8041a98:	4618      	mov	r0, r3
 8041a9a:	3720      	adds	r7, #32
 8041a9c:	46bd      	mov	sp, r7
 8041a9e:	bd80      	pop	{r7, pc}
 8041aa0:	40021000 	.word	0x40021000
 8041aa4:	019f800c 	.word	0x019f800c

08041aa8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8041aa8:	b580      	push	{r7, lr}
 8041aaa:	b086      	sub	sp, #24
 8041aac:	af00      	add	r7, sp, #0
 8041aae:	6078      	str	r0, [r7, #4]
 8041ab0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8041ab2:	2300      	movs	r3, #0
 8041ab4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8041ab6:	687b      	ldr	r3, [r7, #4]
 8041ab8:	2b00      	cmp	r3, #0
 8041aba:	d101      	bne.n	8041ac0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8041abc:	2301      	movs	r3, #1
 8041abe:	e11e      	b.n	8041cfe <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8041ac0:	4b91      	ldr	r3, [pc, #580]	; (8041d08 <HAL_RCC_ClockConfig+0x260>)
 8041ac2:	681b      	ldr	r3, [r3, #0]
 8041ac4:	f003 030f 	and.w	r3, r3, #15
 8041ac8:	683a      	ldr	r2, [r7, #0]
 8041aca:	429a      	cmp	r2, r3
 8041acc:	d910      	bls.n	8041af0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8041ace:	4b8e      	ldr	r3, [pc, #568]	; (8041d08 <HAL_RCC_ClockConfig+0x260>)
 8041ad0:	681b      	ldr	r3, [r3, #0]
 8041ad2:	f023 020f 	bic.w	r2, r3, #15
 8041ad6:	498c      	ldr	r1, [pc, #560]	; (8041d08 <HAL_RCC_ClockConfig+0x260>)
 8041ad8:	683b      	ldr	r3, [r7, #0]
 8041ada:	4313      	orrs	r3, r2
 8041adc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8041ade:	4b8a      	ldr	r3, [pc, #552]	; (8041d08 <HAL_RCC_ClockConfig+0x260>)
 8041ae0:	681b      	ldr	r3, [r3, #0]
 8041ae2:	f003 030f 	and.w	r3, r3, #15
 8041ae6:	683a      	ldr	r2, [r7, #0]
 8041ae8:	429a      	cmp	r2, r3
 8041aea:	d001      	beq.n	8041af0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8041aec:	2301      	movs	r3, #1
 8041aee:	e106      	b.n	8041cfe <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8041af0:	687b      	ldr	r3, [r7, #4]
 8041af2:	681b      	ldr	r3, [r3, #0]
 8041af4:	f003 0301 	and.w	r3, r3, #1
 8041af8:	2b00      	cmp	r3, #0
 8041afa:	d073      	beq.n	8041be4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8041afc:	687b      	ldr	r3, [r7, #4]
 8041afe:	685b      	ldr	r3, [r3, #4]
 8041b00:	2b03      	cmp	r3, #3
 8041b02:	d129      	bne.n	8041b58 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8041b04:	4b81      	ldr	r3, [pc, #516]	; (8041d0c <HAL_RCC_ClockConfig+0x264>)
 8041b06:	681b      	ldr	r3, [r3, #0]
 8041b08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8041b0c:	2b00      	cmp	r3, #0
 8041b0e:	d101      	bne.n	8041b14 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8041b10:	2301      	movs	r3, #1
 8041b12:	e0f4      	b.n	8041cfe <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8041b14:	f000 f99e 	bl	8041e54 <RCC_GetSysClockFreqFromPLLSource>
 8041b18:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8041b1a:	693b      	ldr	r3, [r7, #16]
 8041b1c:	4a7c      	ldr	r2, [pc, #496]	; (8041d10 <HAL_RCC_ClockConfig+0x268>)
 8041b1e:	4293      	cmp	r3, r2
 8041b20:	d93f      	bls.n	8041ba2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8041b22:	4b7a      	ldr	r3, [pc, #488]	; (8041d0c <HAL_RCC_ClockConfig+0x264>)
 8041b24:	689b      	ldr	r3, [r3, #8]
 8041b26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8041b2a:	2b00      	cmp	r3, #0
 8041b2c:	d009      	beq.n	8041b42 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8041b2e:	687b      	ldr	r3, [r7, #4]
 8041b30:	681b      	ldr	r3, [r3, #0]
 8041b32:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8041b36:	2b00      	cmp	r3, #0
 8041b38:	d033      	beq.n	8041ba2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8041b3a:	687b      	ldr	r3, [r7, #4]
 8041b3c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8041b3e:	2b00      	cmp	r3, #0
 8041b40:	d12f      	bne.n	8041ba2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8041b42:	4b72      	ldr	r3, [pc, #456]	; (8041d0c <HAL_RCC_ClockConfig+0x264>)
 8041b44:	689b      	ldr	r3, [r3, #8]
 8041b46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8041b4a:	4a70      	ldr	r2, [pc, #448]	; (8041d0c <HAL_RCC_ClockConfig+0x264>)
 8041b4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8041b50:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8041b52:	2380      	movs	r3, #128	; 0x80
 8041b54:	617b      	str	r3, [r7, #20]
 8041b56:	e024      	b.n	8041ba2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8041b58:	687b      	ldr	r3, [r7, #4]
 8041b5a:	685b      	ldr	r3, [r3, #4]
 8041b5c:	2b02      	cmp	r3, #2
 8041b5e:	d107      	bne.n	8041b70 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8041b60:	4b6a      	ldr	r3, [pc, #424]	; (8041d0c <HAL_RCC_ClockConfig+0x264>)
 8041b62:	681b      	ldr	r3, [r3, #0]
 8041b64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8041b68:	2b00      	cmp	r3, #0
 8041b6a:	d109      	bne.n	8041b80 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8041b6c:	2301      	movs	r3, #1
 8041b6e:	e0c6      	b.n	8041cfe <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8041b70:	4b66      	ldr	r3, [pc, #408]	; (8041d0c <HAL_RCC_ClockConfig+0x264>)
 8041b72:	681b      	ldr	r3, [r3, #0]
 8041b74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8041b78:	2b00      	cmp	r3, #0
 8041b7a:	d101      	bne.n	8041b80 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8041b7c:	2301      	movs	r3, #1
 8041b7e:	e0be      	b.n	8041cfe <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8041b80:	f000 f8ce 	bl	8041d20 <HAL_RCC_GetSysClockFreq>
 8041b84:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8041b86:	693b      	ldr	r3, [r7, #16]
 8041b88:	4a61      	ldr	r2, [pc, #388]	; (8041d10 <HAL_RCC_ClockConfig+0x268>)
 8041b8a:	4293      	cmp	r3, r2
 8041b8c:	d909      	bls.n	8041ba2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8041b8e:	4b5f      	ldr	r3, [pc, #380]	; (8041d0c <HAL_RCC_ClockConfig+0x264>)
 8041b90:	689b      	ldr	r3, [r3, #8]
 8041b92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8041b96:	4a5d      	ldr	r2, [pc, #372]	; (8041d0c <HAL_RCC_ClockConfig+0x264>)
 8041b98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8041b9c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8041b9e:	2380      	movs	r3, #128	; 0x80
 8041ba0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8041ba2:	4b5a      	ldr	r3, [pc, #360]	; (8041d0c <HAL_RCC_ClockConfig+0x264>)
 8041ba4:	689b      	ldr	r3, [r3, #8]
 8041ba6:	f023 0203 	bic.w	r2, r3, #3
 8041baa:	687b      	ldr	r3, [r7, #4]
 8041bac:	685b      	ldr	r3, [r3, #4]
 8041bae:	4957      	ldr	r1, [pc, #348]	; (8041d0c <HAL_RCC_ClockConfig+0x264>)
 8041bb0:	4313      	orrs	r3, r2
 8041bb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8041bb4:	f7ff f8b8 	bl	8040d28 <HAL_GetTick>
 8041bb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8041bba:	e00a      	b.n	8041bd2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8041bbc:	f7ff f8b4 	bl	8040d28 <HAL_GetTick>
 8041bc0:	4602      	mov	r2, r0
 8041bc2:	68fb      	ldr	r3, [r7, #12]
 8041bc4:	1ad3      	subs	r3, r2, r3
 8041bc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8041bca:	4293      	cmp	r3, r2
 8041bcc:	d901      	bls.n	8041bd2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8041bce:	2303      	movs	r3, #3
 8041bd0:	e095      	b.n	8041cfe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8041bd2:	4b4e      	ldr	r3, [pc, #312]	; (8041d0c <HAL_RCC_ClockConfig+0x264>)
 8041bd4:	689b      	ldr	r3, [r3, #8]
 8041bd6:	f003 020c 	and.w	r2, r3, #12
 8041bda:	687b      	ldr	r3, [r7, #4]
 8041bdc:	685b      	ldr	r3, [r3, #4]
 8041bde:	009b      	lsls	r3, r3, #2
 8041be0:	429a      	cmp	r2, r3
 8041be2:	d1eb      	bne.n	8041bbc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8041be4:	687b      	ldr	r3, [r7, #4]
 8041be6:	681b      	ldr	r3, [r3, #0]
 8041be8:	f003 0302 	and.w	r3, r3, #2
 8041bec:	2b00      	cmp	r3, #0
 8041bee:	d023      	beq.n	8041c38 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8041bf0:	687b      	ldr	r3, [r7, #4]
 8041bf2:	681b      	ldr	r3, [r3, #0]
 8041bf4:	f003 0304 	and.w	r3, r3, #4
 8041bf8:	2b00      	cmp	r3, #0
 8041bfa:	d005      	beq.n	8041c08 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8041bfc:	4b43      	ldr	r3, [pc, #268]	; (8041d0c <HAL_RCC_ClockConfig+0x264>)
 8041bfe:	689b      	ldr	r3, [r3, #8]
 8041c00:	4a42      	ldr	r2, [pc, #264]	; (8041d0c <HAL_RCC_ClockConfig+0x264>)
 8041c02:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8041c06:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8041c08:	687b      	ldr	r3, [r7, #4]
 8041c0a:	681b      	ldr	r3, [r3, #0]
 8041c0c:	f003 0308 	and.w	r3, r3, #8
 8041c10:	2b00      	cmp	r3, #0
 8041c12:	d007      	beq.n	8041c24 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8041c14:	4b3d      	ldr	r3, [pc, #244]	; (8041d0c <HAL_RCC_ClockConfig+0x264>)
 8041c16:	689b      	ldr	r3, [r3, #8]
 8041c18:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8041c1c:	4a3b      	ldr	r2, [pc, #236]	; (8041d0c <HAL_RCC_ClockConfig+0x264>)
 8041c1e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8041c22:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8041c24:	4b39      	ldr	r3, [pc, #228]	; (8041d0c <HAL_RCC_ClockConfig+0x264>)
 8041c26:	689b      	ldr	r3, [r3, #8]
 8041c28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8041c2c:	687b      	ldr	r3, [r7, #4]
 8041c2e:	689b      	ldr	r3, [r3, #8]
 8041c30:	4936      	ldr	r1, [pc, #216]	; (8041d0c <HAL_RCC_ClockConfig+0x264>)
 8041c32:	4313      	orrs	r3, r2
 8041c34:	608b      	str	r3, [r1, #8]
 8041c36:	e008      	b.n	8041c4a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8041c38:	697b      	ldr	r3, [r7, #20]
 8041c3a:	2b80      	cmp	r3, #128	; 0x80
 8041c3c:	d105      	bne.n	8041c4a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8041c3e:	4b33      	ldr	r3, [pc, #204]	; (8041d0c <HAL_RCC_ClockConfig+0x264>)
 8041c40:	689b      	ldr	r3, [r3, #8]
 8041c42:	4a32      	ldr	r2, [pc, #200]	; (8041d0c <HAL_RCC_ClockConfig+0x264>)
 8041c44:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8041c48:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8041c4a:	4b2f      	ldr	r3, [pc, #188]	; (8041d08 <HAL_RCC_ClockConfig+0x260>)
 8041c4c:	681b      	ldr	r3, [r3, #0]
 8041c4e:	f003 030f 	and.w	r3, r3, #15
 8041c52:	683a      	ldr	r2, [r7, #0]
 8041c54:	429a      	cmp	r2, r3
 8041c56:	d21d      	bcs.n	8041c94 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8041c58:	4b2b      	ldr	r3, [pc, #172]	; (8041d08 <HAL_RCC_ClockConfig+0x260>)
 8041c5a:	681b      	ldr	r3, [r3, #0]
 8041c5c:	f023 020f 	bic.w	r2, r3, #15
 8041c60:	4929      	ldr	r1, [pc, #164]	; (8041d08 <HAL_RCC_ClockConfig+0x260>)
 8041c62:	683b      	ldr	r3, [r7, #0]
 8041c64:	4313      	orrs	r3, r2
 8041c66:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8041c68:	f7ff f85e 	bl	8040d28 <HAL_GetTick>
 8041c6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8041c6e:	e00a      	b.n	8041c86 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8041c70:	f7ff f85a 	bl	8040d28 <HAL_GetTick>
 8041c74:	4602      	mov	r2, r0
 8041c76:	68fb      	ldr	r3, [r7, #12]
 8041c78:	1ad3      	subs	r3, r2, r3
 8041c7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8041c7e:	4293      	cmp	r3, r2
 8041c80:	d901      	bls.n	8041c86 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8041c82:	2303      	movs	r3, #3
 8041c84:	e03b      	b.n	8041cfe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8041c86:	4b20      	ldr	r3, [pc, #128]	; (8041d08 <HAL_RCC_ClockConfig+0x260>)
 8041c88:	681b      	ldr	r3, [r3, #0]
 8041c8a:	f003 030f 	and.w	r3, r3, #15
 8041c8e:	683a      	ldr	r2, [r7, #0]
 8041c90:	429a      	cmp	r2, r3
 8041c92:	d1ed      	bne.n	8041c70 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8041c94:	687b      	ldr	r3, [r7, #4]
 8041c96:	681b      	ldr	r3, [r3, #0]
 8041c98:	f003 0304 	and.w	r3, r3, #4
 8041c9c:	2b00      	cmp	r3, #0
 8041c9e:	d008      	beq.n	8041cb2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8041ca0:	4b1a      	ldr	r3, [pc, #104]	; (8041d0c <HAL_RCC_ClockConfig+0x264>)
 8041ca2:	689b      	ldr	r3, [r3, #8]
 8041ca4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8041ca8:	687b      	ldr	r3, [r7, #4]
 8041caa:	68db      	ldr	r3, [r3, #12]
 8041cac:	4917      	ldr	r1, [pc, #92]	; (8041d0c <HAL_RCC_ClockConfig+0x264>)
 8041cae:	4313      	orrs	r3, r2
 8041cb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8041cb2:	687b      	ldr	r3, [r7, #4]
 8041cb4:	681b      	ldr	r3, [r3, #0]
 8041cb6:	f003 0308 	and.w	r3, r3, #8
 8041cba:	2b00      	cmp	r3, #0
 8041cbc:	d009      	beq.n	8041cd2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8041cbe:	4b13      	ldr	r3, [pc, #76]	; (8041d0c <HAL_RCC_ClockConfig+0x264>)
 8041cc0:	689b      	ldr	r3, [r3, #8]
 8041cc2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8041cc6:	687b      	ldr	r3, [r7, #4]
 8041cc8:	691b      	ldr	r3, [r3, #16]
 8041cca:	00db      	lsls	r3, r3, #3
 8041ccc:	490f      	ldr	r1, [pc, #60]	; (8041d0c <HAL_RCC_ClockConfig+0x264>)
 8041cce:	4313      	orrs	r3, r2
 8041cd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8041cd2:	f000 f825 	bl	8041d20 <HAL_RCC_GetSysClockFreq>
 8041cd6:	4602      	mov	r2, r0
 8041cd8:	4b0c      	ldr	r3, [pc, #48]	; (8041d0c <HAL_RCC_ClockConfig+0x264>)
 8041cda:	689b      	ldr	r3, [r3, #8]
 8041cdc:	091b      	lsrs	r3, r3, #4
 8041cde:	f003 030f 	and.w	r3, r3, #15
 8041ce2:	490c      	ldr	r1, [pc, #48]	; (8041d14 <HAL_RCC_ClockConfig+0x26c>)
 8041ce4:	5ccb      	ldrb	r3, [r1, r3]
 8041ce6:	f003 031f 	and.w	r3, r3, #31
 8041cea:	fa22 f303 	lsr.w	r3, r2, r3
 8041cee:	4a0a      	ldr	r2, [pc, #40]	; (8041d18 <HAL_RCC_ClockConfig+0x270>)
 8041cf0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8041cf2:	4b0a      	ldr	r3, [pc, #40]	; (8041d1c <HAL_RCC_ClockConfig+0x274>)
 8041cf4:	681b      	ldr	r3, [r3, #0]
 8041cf6:	4618      	mov	r0, r3
 8041cf8:	f7fe ffca 	bl	8040c90 <HAL_InitTick>
 8041cfc:	4603      	mov	r3, r0
}
 8041cfe:	4618      	mov	r0, r3
 8041d00:	3718      	adds	r7, #24
 8041d02:	46bd      	mov	sp, r7
 8041d04:	bd80      	pop	{r7, pc}
 8041d06:	bf00      	nop
 8041d08:	40022000 	.word	0x40022000
 8041d0c:	40021000 	.word	0x40021000
 8041d10:	04c4b400 	.word	0x04c4b400
 8041d14:	080436d8 	.word	0x080436d8
 8041d18:	20000000 	.word	0x20000000
 8041d1c:	20000004 	.word	0x20000004

08041d20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8041d20:	b480      	push	{r7}
 8041d22:	b087      	sub	sp, #28
 8041d24:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8041d26:	4b2c      	ldr	r3, [pc, #176]	; (8041dd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8041d28:	689b      	ldr	r3, [r3, #8]
 8041d2a:	f003 030c 	and.w	r3, r3, #12
 8041d2e:	2b04      	cmp	r3, #4
 8041d30:	d102      	bne.n	8041d38 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8041d32:	4b2a      	ldr	r3, [pc, #168]	; (8041ddc <HAL_RCC_GetSysClockFreq+0xbc>)
 8041d34:	613b      	str	r3, [r7, #16]
 8041d36:	e047      	b.n	8041dc8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8041d38:	4b27      	ldr	r3, [pc, #156]	; (8041dd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8041d3a:	689b      	ldr	r3, [r3, #8]
 8041d3c:	f003 030c 	and.w	r3, r3, #12
 8041d40:	2b08      	cmp	r3, #8
 8041d42:	d102      	bne.n	8041d4a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8041d44:	4b26      	ldr	r3, [pc, #152]	; (8041de0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8041d46:	613b      	str	r3, [r7, #16]
 8041d48:	e03e      	b.n	8041dc8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8041d4a:	4b23      	ldr	r3, [pc, #140]	; (8041dd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8041d4c:	689b      	ldr	r3, [r3, #8]
 8041d4e:	f003 030c 	and.w	r3, r3, #12
 8041d52:	2b0c      	cmp	r3, #12
 8041d54:	d136      	bne.n	8041dc4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8041d56:	4b20      	ldr	r3, [pc, #128]	; (8041dd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8041d58:	68db      	ldr	r3, [r3, #12]
 8041d5a:	f003 0303 	and.w	r3, r3, #3
 8041d5e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8041d60:	4b1d      	ldr	r3, [pc, #116]	; (8041dd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8041d62:	68db      	ldr	r3, [r3, #12]
 8041d64:	091b      	lsrs	r3, r3, #4
 8041d66:	f003 030f 	and.w	r3, r3, #15
 8041d6a:	3301      	adds	r3, #1
 8041d6c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8041d6e:	68fb      	ldr	r3, [r7, #12]
 8041d70:	2b03      	cmp	r3, #3
 8041d72:	d10c      	bne.n	8041d8e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8041d74:	4a1a      	ldr	r2, [pc, #104]	; (8041de0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8041d76:	68bb      	ldr	r3, [r7, #8]
 8041d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8041d7c:	4a16      	ldr	r2, [pc, #88]	; (8041dd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8041d7e:	68d2      	ldr	r2, [r2, #12]
 8041d80:	0a12      	lsrs	r2, r2, #8
 8041d82:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8041d86:	fb02 f303 	mul.w	r3, r2, r3
 8041d8a:	617b      	str	r3, [r7, #20]
      break;
 8041d8c:	e00c      	b.n	8041da8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8041d8e:	4a13      	ldr	r2, [pc, #76]	; (8041ddc <HAL_RCC_GetSysClockFreq+0xbc>)
 8041d90:	68bb      	ldr	r3, [r7, #8]
 8041d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8041d96:	4a10      	ldr	r2, [pc, #64]	; (8041dd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8041d98:	68d2      	ldr	r2, [r2, #12]
 8041d9a:	0a12      	lsrs	r2, r2, #8
 8041d9c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8041da0:	fb02 f303 	mul.w	r3, r2, r3
 8041da4:	617b      	str	r3, [r7, #20]
      break;
 8041da6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8041da8:	4b0b      	ldr	r3, [pc, #44]	; (8041dd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8041daa:	68db      	ldr	r3, [r3, #12]
 8041dac:	0e5b      	lsrs	r3, r3, #25
 8041dae:	f003 0303 	and.w	r3, r3, #3
 8041db2:	3301      	adds	r3, #1
 8041db4:	005b      	lsls	r3, r3, #1
 8041db6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8041db8:	697a      	ldr	r2, [r7, #20]
 8041dba:	687b      	ldr	r3, [r7, #4]
 8041dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8041dc0:	613b      	str	r3, [r7, #16]
 8041dc2:	e001      	b.n	8041dc8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8041dc4:	2300      	movs	r3, #0
 8041dc6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8041dc8:	693b      	ldr	r3, [r7, #16]
}
 8041dca:	4618      	mov	r0, r3
 8041dcc:	371c      	adds	r7, #28
 8041dce:	46bd      	mov	sp, r7
 8041dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041dd4:	4770      	bx	lr
 8041dd6:	bf00      	nop
 8041dd8:	40021000 	.word	0x40021000
 8041ddc:	00f42400 	.word	0x00f42400
 8041de0:	016e3600 	.word	0x016e3600

08041de4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8041de4:	b480      	push	{r7}
 8041de6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8041de8:	4b03      	ldr	r3, [pc, #12]	; (8041df8 <HAL_RCC_GetHCLKFreq+0x14>)
 8041dea:	681b      	ldr	r3, [r3, #0]
}
 8041dec:	4618      	mov	r0, r3
 8041dee:	46bd      	mov	sp, r7
 8041df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041df4:	4770      	bx	lr
 8041df6:	bf00      	nop
 8041df8:	20000000 	.word	0x20000000

08041dfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8041dfc:	b580      	push	{r7, lr}
 8041dfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8041e00:	f7ff fff0 	bl	8041de4 <HAL_RCC_GetHCLKFreq>
 8041e04:	4602      	mov	r2, r0
 8041e06:	4b06      	ldr	r3, [pc, #24]	; (8041e20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8041e08:	689b      	ldr	r3, [r3, #8]
 8041e0a:	0a1b      	lsrs	r3, r3, #8
 8041e0c:	f003 0307 	and.w	r3, r3, #7
 8041e10:	4904      	ldr	r1, [pc, #16]	; (8041e24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8041e12:	5ccb      	ldrb	r3, [r1, r3]
 8041e14:	f003 031f 	and.w	r3, r3, #31
 8041e18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8041e1c:	4618      	mov	r0, r3
 8041e1e:	bd80      	pop	{r7, pc}
 8041e20:	40021000 	.word	0x40021000
 8041e24:	080436e8 	.word	0x080436e8

08041e28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8041e28:	b580      	push	{r7, lr}
 8041e2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8041e2c:	f7ff ffda 	bl	8041de4 <HAL_RCC_GetHCLKFreq>
 8041e30:	4602      	mov	r2, r0
 8041e32:	4b06      	ldr	r3, [pc, #24]	; (8041e4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8041e34:	689b      	ldr	r3, [r3, #8]
 8041e36:	0adb      	lsrs	r3, r3, #11
 8041e38:	f003 0307 	and.w	r3, r3, #7
 8041e3c:	4904      	ldr	r1, [pc, #16]	; (8041e50 <HAL_RCC_GetPCLK2Freq+0x28>)
 8041e3e:	5ccb      	ldrb	r3, [r1, r3]
 8041e40:	f003 031f 	and.w	r3, r3, #31
 8041e44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8041e48:	4618      	mov	r0, r3
 8041e4a:	bd80      	pop	{r7, pc}
 8041e4c:	40021000 	.word	0x40021000
 8041e50:	080436e8 	.word	0x080436e8

08041e54 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8041e54:	b480      	push	{r7}
 8041e56:	b087      	sub	sp, #28
 8041e58:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8041e5a:	4b1e      	ldr	r3, [pc, #120]	; (8041ed4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8041e5c:	68db      	ldr	r3, [r3, #12]
 8041e5e:	f003 0303 	and.w	r3, r3, #3
 8041e62:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8041e64:	4b1b      	ldr	r3, [pc, #108]	; (8041ed4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8041e66:	68db      	ldr	r3, [r3, #12]
 8041e68:	091b      	lsrs	r3, r3, #4
 8041e6a:	f003 030f 	and.w	r3, r3, #15
 8041e6e:	3301      	adds	r3, #1
 8041e70:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8041e72:	693b      	ldr	r3, [r7, #16]
 8041e74:	2b03      	cmp	r3, #3
 8041e76:	d10c      	bne.n	8041e92 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8041e78:	4a17      	ldr	r2, [pc, #92]	; (8041ed8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8041e7a:	68fb      	ldr	r3, [r7, #12]
 8041e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8041e80:	4a14      	ldr	r2, [pc, #80]	; (8041ed4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8041e82:	68d2      	ldr	r2, [r2, #12]
 8041e84:	0a12      	lsrs	r2, r2, #8
 8041e86:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8041e8a:	fb02 f303 	mul.w	r3, r2, r3
 8041e8e:	617b      	str	r3, [r7, #20]
    break;
 8041e90:	e00c      	b.n	8041eac <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8041e92:	4a12      	ldr	r2, [pc, #72]	; (8041edc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8041e94:	68fb      	ldr	r3, [r7, #12]
 8041e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8041e9a:	4a0e      	ldr	r2, [pc, #56]	; (8041ed4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8041e9c:	68d2      	ldr	r2, [r2, #12]
 8041e9e:	0a12      	lsrs	r2, r2, #8
 8041ea0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8041ea4:	fb02 f303 	mul.w	r3, r2, r3
 8041ea8:	617b      	str	r3, [r7, #20]
    break;
 8041eaa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8041eac:	4b09      	ldr	r3, [pc, #36]	; (8041ed4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8041eae:	68db      	ldr	r3, [r3, #12]
 8041eb0:	0e5b      	lsrs	r3, r3, #25
 8041eb2:	f003 0303 	and.w	r3, r3, #3
 8041eb6:	3301      	adds	r3, #1
 8041eb8:	005b      	lsls	r3, r3, #1
 8041eba:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8041ebc:	697a      	ldr	r2, [r7, #20]
 8041ebe:	68bb      	ldr	r3, [r7, #8]
 8041ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8041ec4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8041ec6:	687b      	ldr	r3, [r7, #4]
}
 8041ec8:	4618      	mov	r0, r3
 8041eca:	371c      	adds	r7, #28
 8041ecc:	46bd      	mov	sp, r7
 8041ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041ed2:	4770      	bx	lr
 8041ed4:	40021000 	.word	0x40021000
 8041ed8:	016e3600 	.word	0x016e3600
 8041edc:	00f42400 	.word	0x00f42400

08041ee0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8041ee0:	b580      	push	{r7, lr}
 8041ee2:	b086      	sub	sp, #24
 8041ee4:	af00      	add	r7, sp, #0
 8041ee6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8041ee8:	2300      	movs	r3, #0
 8041eea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8041eec:	2300      	movs	r3, #0
 8041eee:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8041ef0:	687b      	ldr	r3, [r7, #4]
 8041ef2:	681b      	ldr	r3, [r3, #0]
 8041ef4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8041ef8:	2b00      	cmp	r3, #0
 8041efa:	f000 8098 	beq.w	804202e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8041efe:	2300      	movs	r3, #0
 8041f00:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8041f02:	4b43      	ldr	r3, [pc, #268]	; (8042010 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8041f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8041f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8041f0a:	2b00      	cmp	r3, #0
 8041f0c:	d10d      	bne.n	8041f2a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8041f0e:	4b40      	ldr	r3, [pc, #256]	; (8042010 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8041f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8041f12:	4a3f      	ldr	r2, [pc, #252]	; (8042010 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8041f14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8041f18:	6593      	str	r3, [r2, #88]	; 0x58
 8041f1a:	4b3d      	ldr	r3, [pc, #244]	; (8042010 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8041f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8041f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8041f22:	60bb      	str	r3, [r7, #8]
 8041f24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8041f26:	2301      	movs	r3, #1
 8041f28:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8041f2a:	4b3a      	ldr	r3, [pc, #232]	; (8042014 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8041f2c:	681b      	ldr	r3, [r3, #0]
 8041f2e:	4a39      	ldr	r2, [pc, #228]	; (8042014 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8041f30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8041f34:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8041f36:	f7fe fef7 	bl	8040d28 <HAL_GetTick>
 8041f3a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8041f3c:	e009      	b.n	8041f52 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8041f3e:	f7fe fef3 	bl	8040d28 <HAL_GetTick>
 8041f42:	4602      	mov	r2, r0
 8041f44:	68fb      	ldr	r3, [r7, #12]
 8041f46:	1ad3      	subs	r3, r2, r3
 8041f48:	2b02      	cmp	r3, #2
 8041f4a:	d902      	bls.n	8041f52 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8041f4c:	2303      	movs	r3, #3
 8041f4e:	74fb      	strb	r3, [r7, #19]
        break;
 8041f50:	e005      	b.n	8041f5e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8041f52:	4b30      	ldr	r3, [pc, #192]	; (8042014 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8041f54:	681b      	ldr	r3, [r3, #0]
 8041f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8041f5a:	2b00      	cmp	r3, #0
 8041f5c:	d0ef      	beq.n	8041f3e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8041f5e:	7cfb      	ldrb	r3, [r7, #19]
 8041f60:	2b00      	cmp	r3, #0
 8041f62:	d159      	bne.n	8042018 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8041f64:	4b2a      	ldr	r3, [pc, #168]	; (8042010 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8041f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041f6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8041f6e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8041f70:	697b      	ldr	r3, [r7, #20]
 8041f72:	2b00      	cmp	r3, #0
 8041f74:	d01e      	beq.n	8041fb4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8041f76:	687b      	ldr	r3, [r7, #4]
 8041f78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8041f7a:	697a      	ldr	r2, [r7, #20]
 8041f7c:	429a      	cmp	r2, r3
 8041f7e:	d019      	beq.n	8041fb4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8041f80:	4b23      	ldr	r3, [pc, #140]	; (8042010 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8041f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041f86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8041f8a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8041f8c:	4b20      	ldr	r3, [pc, #128]	; (8042010 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8041f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041f92:	4a1f      	ldr	r2, [pc, #124]	; (8042010 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8041f94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8041f98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8041f9c:	4b1c      	ldr	r3, [pc, #112]	; (8042010 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8041f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041fa2:	4a1b      	ldr	r2, [pc, #108]	; (8042010 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8041fa4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8041fa8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8041fac:	4a18      	ldr	r2, [pc, #96]	; (8042010 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8041fae:	697b      	ldr	r3, [r7, #20]
 8041fb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8041fb4:	697b      	ldr	r3, [r7, #20]
 8041fb6:	f003 0301 	and.w	r3, r3, #1
 8041fba:	2b00      	cmp	r3, #0
 8041fbc:	d016      	beq.n	8041fec <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041fbe:	f7fe feb3 	bl	8040d28 <HAL_GetTick>
 8041fc2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8041fc4:	e00b      	b.n	8041fde <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8041fc6:	f7fe feaf 	bl	8040d28 <HAL_GetTick>
 8041fca:	4602      	mov	r2, r0
 8041fcc:	68fb      	ldr	r3, [r7, #12]
 8041fce:	1ad3      	subs	r3, r2, r3
 8041fd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8041fd4:	4293      	cmp	r3, r2
 8041fd6:	d902      	bls.n	8041fde <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8041fd8:	2303      	movs	r3, #3
 8041fda:	74fb      	strb	r3, [r7, #19]
            break;
 8041fdc:	e006      	b.n	8041fec <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8041fde:	4b0c      	ldr	r3, [pc, #48]	; (8042010 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8041fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041fe4:	f003 0302 	and.w	r3, r3, #2
 8041fe8:	2b00      	cmp	r3, #0
 8041fea:	d0ec      	beq.n	8041fc6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8041fec:	7cfb      	ldrb	r3, [r7, #19]
 8041fee:	2b00      	cmp	r3, #0
 8041ff0:	d10b      	bne.n	804200a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8041ff2:	4b07      	ldr	r3, [pc, #28]	; (8042010 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8041ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041ff8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8041ffc:	687b      	ldr	r3, [r7, #4]
 8041ffe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8042000:	4903      	ldr	r1, [pc, #12]	; (8042010 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8042002:	4313      	orrs	r3, r2
 8042004:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8042008:	e008      	b.n	804201c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 804200a:	7cfb      	ldrb	r3, [r7, #19]
 804200c:	74bb      	strb	r3, [r7, #18]
 804200e:	e005      	b.n	804201c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8042010:	40021000 	.word	0x40021000
 8042014:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8042018:	7cfb      	ldrb	r3, [r7, #19]
 804201a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 804201c:	7c7b      	ldrb	r3, [r7, #17]
 804201e:	2b01      	cmp	r3, #1
 8042020:	d105      	bne.n	804202e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8042022:	4ba7      	ldr	r3, [pc, #668]	; (80422c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8042024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8042026:	4aa6      	ldr	r2, [pc, #664]	; (80422c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8042028:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 804202c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 804202e:	687b      	ldr	r3, [r7, #4]
 8042030:	681b      	ldr	r3, [r3, #0]
 8042032:	f003 0301 	and.w	r3, r3, #1
 8042036:	2b00      	cmp	r3, #0
 8042038:	d00a      	beq.n	8042050 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 804203a:	4ba1      	ldr	r3, [pc, #644]	; (80422c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 804203c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042040:	f023 0203 	bic.w	r2, r3, #3
 8042044:	687b      	ldr	r3, [r7, #4]
 8042046:	685b      	ldr	r3, [r3, #4]
 8042048:	499d      	ldr	r1, [pc, #628]	; (80422c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 804204a:	4313      	orrs	r3, r2
 804204c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8042050:	687b      	ldr	r3, [r7, #4]
 8042052:	681b      	ldr	r3, [r3, #0]
 8042054:	f003 0302 	and.w	r3, r3, #2
 8042058:	2b00      	cmp	r3, #0
 804205a:	d00a      	beq.n	8042072 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 804205c:	4b98      	ldr	r3, [pc, #608]	; (80422c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 804205e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042062:	f023 020c 	bic.w	r2, r3, #12
 8042066:	687b      	ldr	r3, [r7, #4]
 8042068:	689b      	ldr	r3, [r3, #8]
 804206a:	4995      	ldr	r1, [pc, #596]	; (80422c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 804206c:	4313      	orrs	r3, r2
 804206e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8042072:	687b      	ldr	r3, [r7, #4]
 8042074:	681b      	ldr	r3, [r3, #0]
 8042076:	f003 0304 	and.w	r3, r3, #4
 804207a:	2b00      	cmp	r3, #0
 804207c:	d00a      	beq.n	8042094 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 804207e:	4b90      	ldr	r3, [pc, #576]	; (80422c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8042080:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042084:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8042088:	687b      	ldr	r3, [r7, #4]
 804208a:	68db      	ldr	r3, [r3, #12]
 804208c:	498c      	ldr	r1, [pc, #560]	; (80422c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 804208e:	4313      	orrs	r3, r2
 8042090:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8042094:	687b      	ldr	r3, [r7, #4]
 8042096:	681b      	ldr	r3, [r3, #0]
 8042098:	f003 0308 	and.w	r3, r3, #8
 804209c:	2b00      	cmp	r3, #0
 804209e:	d00a      	beq.n	80420b6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80420a0:	4b87      	ldr	r3, [pc, #540]	; (80422c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80420a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80420a6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80420aa:	687b      	ldr	r3, [r7, #4]
 80420ac:	691b      	ldr	r3, [r3, #16]
 80420ae:	4984      	ldr	r1, [pc, #528]	; (80422c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80420b0:	4313      	orrs	r3, r2
 80420b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80420b6:	687b      	ldr	r3, [r7, #4]
 80420b8:	681b      	ldr	r3, [r3, #0]
 80420ba:	f003 0310 	and.w	r3, r3, #16
 80420be:	2b00      	cmp	r3, #0
 80420c0:	d00a      	beq.n	80420d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80420c2:	4b7f      	ldr	r3, [pc, #508]	; (80422c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80420c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80420c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80420cc:	687b      	ldr	r3, [r7, #4]
 80420ce:	695b      	ldr	r3, [r3, #20]
 80420d0:	497b      	ldr	r1, [pc, #492]	; (80422c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80420d2:	4313      	orrs	r3, r2
 80420d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80420d8:	687b      	ldr	r3, [r7, #4]
 80420da:	681b      	ldr	r3, [r3, #0]
 80420dc:	f003 0320 	and.w	r3, r3, #32
 80420e0:	2b00      	cmp	r3, #0
 80420e2:	d00a      	beq.n	80420fa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80420e4:	4b76      	ldr	r3, [pc, #472]	; (80422c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80420e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80420ea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80420ee:	687b      	ldr	r3, [r7, #4]
 80420f0:	699b      	ldr	r3, [r3, #24]
 80420f2:	4973      	ldr	r1, [pc, #460]	; (80422c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80420f4:	4313      	orrs	r3, r2
 80420f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80420fa:	687b      	ldr	r3, [r7, #4]
 80420fc:	681b      	ldr	r3, [r3, #0]
 80420fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8042102:	2b00      	cmp	r3, #0
 8042104:	d00a      	beq.n	804211c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8042106:	4b6e      	ldr	r3, [pc, #440]	; (80422c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8042108:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804210c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8042110:	687b      	ldr	r3, [r7, #4]
 8042112:	69db      	ldr	r3, [r3, #28]
 8042114:	496a      	ldr	r1, [pc, #424]	; (80422c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8042116:	4313      	orrs	r3, r2
 8042118:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 804211c:	687b      	ldr	r3, [r7, #4]
 804211e:	681b      	ldr	r3, [r3, #0]
 8042120:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8042124:	2b00      	cmp	r3, #0
 8042126:	d00a      	beq.n	804213e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8042128:	4b65      	ldr	r3, [pc, #404]	; (80422c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 804212a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804212e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8042132:	687b      	ldr	r3, [r7, #4]
 8042134:	6a1b      	ldr	r3, [r3, #32]
 8042136:	4962      	ldr	r1, [pc, #392]	; (80422c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8042138:	4313      	orrs	r3, r2
 804213a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 804213e:	687b      	ldr	r3, [r7, #4]
 8042140:	681b      	ldr	r3, [r3, #0]
 8042142:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8042146:	2b00      	cmp	r3, #0
 8042148:	d00a      	beq.n	8042160 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 804214a:	4b5d      	ldr	r3, [pc, #372]	; (80422c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 804214c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042150:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8042154:	687b      	ldr	r3, [r7, #4]
 8042156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8042158:	4959      	ldr	r1, [pc, #356]	; (80422c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 804215a:	4313      	orrs	r3, r2
 804215c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8042160:	687b      	ldr	r3, [r7, #4]
 8042162:	681b      	ldr	r3, [r3, #0]
 8042164:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8042168:	2b00      	cmp	r3, #0
 804216a:	d00a      	beq.n	8042182 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 804216c:	4b54      	ldr	r3, [pc, #336]	; (80422c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 804216e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8042172:	f023 0203 	bic.w	r2, r3, #3
 8042176:	687b      	ldr	r3, [r7, #4]
 8042178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804217a:	4951      	ldr	r1, [pc, #324]	; (80422c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 804217c:	4313      	orrs	r3, r2
 804217e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8042182:	687b      	ldr	r3, [r7, #4]
 8042184:	681b      	ldr	r3, [r3, #0]
 8042186:	f403 7300 	and.w	r3, r3, #512	; 0x200
 804218a:	2b00      	cmp	r3, #0
 804218c:	d00a      	beq.n	80421a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 804218e:	4b4c      	ldr	r3, [pc, #304]	; (80422c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8042190:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042194:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8042198:	687b      	ldr	r3, [r7, #4]
 804219a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804219c:	4948      	ldr	r1, [pc, #288]	; (80422c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 804219e:	4313      	orrs	r3, r2
 80421a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80421a4:	687b      	ldr	r3, [r7, #4]
 80421a6:	681b      	ldr	r3, [r3, #0]
 80421a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80421ac:	2b00      	cmp	r3, #0
 80421ae:	d015      	beq.n	80421dc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80421b0:	4b43      	ldr	r3, [pc, #268]	; (80422c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80421b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80421b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80421ba:	687b      	ldr	r3, [r7, #4]
 80421bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80421be:	4940      	ldr	r1, [pc, #256]	; (80422c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80421c0:	4313      	orrs	r3, r2
 80421c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80421c6:	687b      	ldr	r3, [r7, #4]
 80421c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80421ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80421ce:	d105      	bne.n	80421dc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80421d0:	4b3b      	ldr	r3, [pc, #236]	; (80422c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80421d2:	68db      	ldr	r3, [r3, #12]
 80421d4:	4a3a      	ldr	r2, [pc, #232]	; (80422c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80421d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80421da:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80421dc:	687b      	ldr	r3, [r7, #4]
 80421de:	681b      	ldr	r3, [r3, #0]
 80421e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80421e4:	2b00      	cmp	r3, #0
 80421e6:	d015      	beq.n	8042214 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80421e8:	4b35      	ldr	r3, [pc, #212]	; (80422c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80421ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80421ee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80421f2:	687b      	ldr	r3, [r7, #4]
 80421f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80421f6:	4932      	ldr	r1, [pc, #200]	; (80422c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80421f8:	4313      	orrs	r3, r2
 80421fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80421fe:	687b      	ldr	r3, [r7, #4]
 8042200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8042202:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8042206:	d105      	bne.n	8042214 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8042208:	4b2d      	ldr	r3, [pc, #180]	; (80422c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 804220a:	68db      	ldr	r3, [r3, #12]
 804220c:	4a2c      	ldr	r2, [pc, #176]	; (80422c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 804220e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8042212:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8042214:	687b      	ldr	r3, [r7, #4]
 8042216:	681b      	ldr	r3, [r3, #0]
 8042218:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 804221c:	2b00      	cmp	r3, #0
 804221e:	d015      	beq.n	804224c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8042220:	4b27      	ldr	r3, [pc, #156]	; (80422c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8042222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042226:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 804222a:	687b      	ldr	r3, [r7, #4]
 804222c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804222e:	4924      	ldr	r1, [pc, #144]	; (80422c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8042230:	4313      	orrs	r3, r2
 8042232:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8042236:	687b      	ldr	r3, [r7, #4]
 8042238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804223a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 804223e:	d105      	bne.n	804224c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8042240:	4b1f      	ldr	r3, [pc, #124]	; (80422c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8042242:	68db      	ldr	r3, [r3, #12]
 8042244:	4a1e      	ldr	r2, [pc, #120]	; (80422c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8042246:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 804224a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 804224c:	687b      	ldr	r3, [r7, #4]
 804224e:	681b      	ldr	r3, [r3, #0]
 8042250:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8042254:	2b00      	cmp	r3, #0
 8042256:	d015      	beq.n	8042284 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8042258:	4b19      	ldr	r3, [pc, #100]	; (80422c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 804225a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804225e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8042262:	687b      	ldr	r3, [r7, #4]
 8042264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8042266:	4916      	ldr	r1, [pc, #88]	; (80422c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8042268:	4313      	orrs	r3, r2
 804226a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 804226e:	687b      	ldr	r3, [r7, #4]
 8042270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8042272:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8042276:	d105      	bne.n	8042284 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8042278:	4b11      	ldr	r3, [pc, #68]	; (80422c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 804227a:	68db      	ldr	r3, [r3, #12]
 804227c:	4a10      	ldr	r2, [pc, #64]	; (80422c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 804227e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8042282:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8042284:	687b      	ldr	r3, [r7, #4]
 8042286:	681b      	ldr	r3, [r3, #0]
 8042288:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 804228c:	2b00      	cmp	r3, #0
 804228e:	d019      	beq.n	80422c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8042290:	4b0b      	ldr	r3, [pc, #44]	; (80422c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8042292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042296:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 804229a:	687b      	ldr	r3, [r7, #4]
 804229c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804229e:	4908      	ldr	r1, [pc, #32]	; (80422c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80422a0:	4313      	orrs	r3, r2
 80422a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80422a6:	687b      	ldr	r3, [r7, #4]
 80422a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80422aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80422ae:	d109      	bne.n	80422c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80422b0:	4b03      	ldr	r3, [pc, #12]	; (80422c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80422b2:	68db      	ldr	r3, [r3, #12]
 80422b4:	4a02      	ldr	r2, [pc, #8]	; (80422c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80422b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80422ba:	60d3      	str	r3, [r2, #12]
 80422bc:	e002      	b.n	80422c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80422be:	bf00      	nop
 80422c0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80422c4:	687b      	ldr	r3, [r7, #4]
 80422c6:	681b      	ldr	r3, [r3, #0]
 80422c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80422cc:	2b00      	cmp	r3, #0
 80422ce:	d015      	beq.n	80422fc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80422d0:	4b29      	ldr	r3, [pc, #164]	; (8042378 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80422d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80422d6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80422da:	687b      	ldr	r3, [r7, #4]
 80422dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80422de:	4926      	ldr	r1, [pc, #152]	; (8042378 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80422e0:	4313      	orrs	r3, r2
 80422e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80422e6:	687b      	ldr	r3, [r7, #4]
 80422e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80422ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80422ee:	d105      	bne.n	80422fc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80422f0:	4b21      	ldr	r3, [pc, #132]	; (8042378 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80422f2:	68db      	ldr	r3, [r3, #12]
 80422f4:	4a20      	ldr	r2, [pc, #128]	; (8042378 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80422f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80422fa:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80422fc:	687b      	ldr	r3, [r7, #4]
 80422fe:	681b      	ldr	r3, [r3, #0]
 8042300:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8042304:	2b00      	cmp	r3, #0
 8042306:	d015      	beq.n	8042334 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8042308:	4b1b      	ldr	r3, [pc, #108]	; (8042378 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 804230a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804230e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8042312:	687b      	ldr	r3, [r7, #4]
 8042314:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8042316:	4918      	ldr	r1, [pc, #96]	; (8042378 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8042318:	4313      	orrs	r3, r2
 804231a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 804231e:	687b      	ldr	r3, [r7, #4]
 8042320:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8042322:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8042326:	d105      	bne.n	8042334 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8042328:	4b13      	ldr	r3, [pc, #76]	; (8042378 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 804232a:	68db      	ldr	r3, [r3, #12]
 804232c:	4a12      	ldr	r2, [pc, #72]	; (8042378 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 804232e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8042332:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8042334:	687b      	ldr	r3, [r7, #4]
 8042336:	681b      	ldr	r3, [r3, #0]
 8042338:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 804233c:	2b00      	cmp	r3, #0
 804233e:	d015      	beq.n	804236c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8042340:	4b0d      	ldr	r3, [pc, #52]	; (8042378 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8042342:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8042346:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 804234a:	687b      	ldr	r3, [r7, #4]
 804234c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 804234e:	490a      	ldr	r1, [pc, #40]	; (8042378 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8042350:	4313      	orrs	r3, r2
 8042352:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8042356:	687b      	ldr	r3, [r7, #4]
 8042358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 804235a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 804235e:	d105      	bne.n	804236c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8042360:	4b05      	ldr	r3, [pc, #20]	; (8042378 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8042362:	68db      	ldr	r3, [r3, #12]
 8042364:	4a04      	ldr	r2, [pc, #16]	; (8042378 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8042366:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 804236a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 804236c:	7cbb      	ldrb	r3, [r7, #18]
}
 804236e:	4618      	mov	r0, r3
 8042370:	3718      	adds	r7, #24
 8042372:	46bd      	mov	sp, r7
 8042374:	bd80      	pop	{r7, pc}
 8042376:	bf00      	nop
 8042378:	40021000 	.word	0x40021000

0804237c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 804237c:	b580      	push	{r7, lr}
 804237e:	b082      	sub	sp, #8
 8042380:	af00      	add	r7, sp, #0
 8042382:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8042384:	687b      	ldr	r3, [r7, #4]
 8042386:	681b      	ldr	r3, [r3, #0]
 8042388:	691b      	ldr	r3, [r3, #16]
 804238a:	f003 0302 	and.w	r3, r3, #2
 804238e:	2b02      	cmp	r3, #2
 8042390:	d122      	bne.n	80423d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8042392:	687b      	ldr	r3, [r7, #4]
 8042394:	681b      	ldr	r3, [r3, #0]
 8042396:	68db      	ldr	r3, [r3, #12]
 8042398:	f003 0302 	and.w	r3, r3, #2
 804239c:	2b02      	cmp	r3, #2
 804239e:	d11b      	bne.n	80423d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80423a0:	687b      	ldr	r3, [r7, #4]
 80423a2:	681b      	ldr	r3, [r3, #0]
 80423a4:	f06f 0202 	mvn.w	r2, #2
 80423a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80423aa:	687b      	ldr	r3, [r7, #4]
 80423ac:	2201      	movs	r2, #1
 80423ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80423b0:	687b      	ldr	r3, [r7, #4]
 80423b2:	681b      	ldr	r3, [r3, #0]
 80423b4:	699b      	ldr	r3, [r3, #24]
 80423b6:	f003 0303 	and.w	r3, r3, #3
 80423ba:	2b00      	cmp	r3, #0
 80423bc:	d003      	beq.n	80423c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80423be:	6878      	ldr	r0, [r7, #4]
 80423c0:	f000 f965 	bl	804268e <HAL_TIM_IC_CaptureCallback>
 80423c4:	e005      	b.n	80423d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80423c6:	6878      	ldr	r0, [r7, #4]
 80423c8:	f000 f957 	bl	804267a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80423cc:	6878      	ldr	r0, [r7, #4]
 80423ce:	f000 f968 	bl	80426a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80423d2:	687b      	ldr	r3, [r7, #4]
 80423d4:	2200      	movs	r2, #0
 80423d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80423d8:	687b      	ldr	r3, [r7, #4]
 80423da:	681b      	ldr	r3, [r3, #0]
 80423dc:	691b      	ldr	r3, [r3, #16]
 80423de:	f003 0304 	and.w	r3, r3, #4
 80423e2:	2b04      	cmp	r3, #4
 80423e4:	d122      	bne.n	804242c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80423e6:	687b      	ldr	r3, [r7, #4]
 80423e8:	681b      	ldr	r3, [r3, #0]
 80423ea:	68db      	ldr	r3, [r3, #12]
 80423ec:	f003 0304 	and.w	r3, r3, #4
 80423f0:	2b04      	cmp	r3, #4
 80423f2:	d11b      	bne.n	804242c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80423f4:	687b      	ldr	r3, [r7, #4]
 80423f6:	681b      	ldr	r3, [r3, #0]
 80423f8:	f06f 0204 	mvn.w	r2, #4
 80423fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80423fe:	687b      	ldr	r3, [r7, #4]
 8042400:	2202      	movs	r2, #2
 8042402:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8042404:	687b      	ldr	r3, [r7, #4]
 8042406:	681b      	ldr	r3, [r3, #0]
 8042408:	699b      	ldr	r3, [r3, #24]
 804240a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 804240e:	2b00      	cmp	r3, #0
 8042410:	d003      	beq.n	804241a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8042412:	6878      	ldr	r0, [r7, #4]
 8042414:	f000 f93b 	bl	804268e <HAL_TIM_IC_CaptureCallback>
 8042418:	e005      	b.n	8042426 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 804241a:	6878      	ldr	r0, [r7, #4]
 804241c:	f000 f92d 	bl	804267a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8042420:	6878      	ldr	r0, [r7, #4]
 8042422:	f000 f93e 	bl	80426a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8042426:	687b      	ldr	r3, [r7, #4]
 8042428:	2200      	movs	r2, #0
 804242a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 804242c:	687b      	ldr	r3, [r7, #4]
 804242e:	681b      	ldr	r3, [r3, #0]
 8042430:	691b      	ldr	r3, [r3, #16]
 8042432:	f003 0308 	and.w	r3, r3, #8
 8042436:	2b08      	cmp	r3, #8
 8042438:	d122      	bne.n	8042480 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 804243a:	687b      	ldr	r3, [r7, #4]
 804243c:	681b      	ldr	r3, [r3, #0]
 804243e:	68db      	ldr	r3, [r3, #12]
 8042440:	f003 0308 	and.w	r3, r3, #8
 8042444:	2b08      	cmp	r3, #8
 8042446:	d11b      	bne.n	8042480 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8042448:	687b      	ldr	r3, [r7, #4]
 804244a:	681b      	ldr	r3, [r3, #0]
 804244c:	f06f 0208 	mvn.w	r2, #8
 8042450:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8042452:	687b      	ldr	r3, [r7, #4]
 8042454:	2204      	movs	r2, #4
 8042456:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8042458:	687b      	ldr	r3, [r7, #4]
 804245a:	681b      	ldr	r3, [r3, #0]
 804245c:	69db      	ldr	r3, [r3, #28]
 804245e:	f003 0303 	and.w	r3, r3, #3
 8042462:	2b00      	cmp	r3, #0
 8042464:	d003      	beq.n	804246e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8042466:	6878      	ldr	r0, [r7, #4]
 8042468:	f000 f911 	bl	804268e <HAL_TIM_IC_CaptureCallback>
 804246c:	e005      	b.n	804247a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 804246e:	6878      	ldr	r0, [r7, #4]
 8042470:	f000 f903 	bl	804267a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8042474:	6878      	ldr	r0, [r7, #4]
 8042476:	f000 f914 	bl	80426a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 804247a:	687b      	ldr	r3, [r7, #4]
 804247c:	2200      	movs	r2, #0
 804247e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8042480:	687b      	ldr	r3, [r7, #4]
 8042482:	681b      	ldr	r3, [r3, #0]
 8042484:	691b      	ldr	r3, [r3, #16]
 8042486:	f003 0310 	and.w	r3, r3, #16
 804248a:	2b10      	cmp	r3, #16
 804248c:	d122      	bne.n	80424d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 804248e:	687b      	ldr	r3, [r7, #4]
 8042490:	681b      	ldr	r3, [r3, #0]
 8042492:	68db      	ldr	r3, [r3, #12]
 8042494:	f003 0310 	and.w	r3, r3, #16
 8042498:	2b10      	cmp	r3, #16
 804249a:	d11b      	bne.n	80424d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 804249c:	687b      	ldr	r3, [r7, #4]
 804249e:	681b      	ldr	r3, [r3, #0]
 80424a0:	f06f 0210 	mvn.w	r2, #16
 80424a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80424a6:	687b      	ldr	r3, [r7, #4]
 80424a8:	2208      	movs	r2, #8
 80424aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80424ac:	687b      	ldr	r3, [r7, #4]
 80424ae:	681b      	ldr	r3, [r3, #0]
 80424b0:	69db      	ldr	r3, [r3, #28]
 80424b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80424b6:	2b00      	cmp	r3, #0
 80424b8:	d003      	beq.n	80424c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80424ba:	6878      	ldr	r0, [r7, #4]
 80424bc:	f000 f8e7 	bl	804268e <HAL_TIM_IC_CaptureCallback>
 80424c0:	e005      	b.n	80424ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80424c2:	6878      	ldr	r0, [r7, #4]
 80424c4:	f000 f8d9 	bl	804267a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80424c8:	6878      	ldr	r0, [r7, #4]
 80424ca:	f000 f8ea 	bl	80426a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80424ce:	687b      	ldr	r3, [r7, #4]
 80424d0:	2200      	movs	r2, #0
 80424d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80424d4:	687b      	ldr	r3, [r7, #4]
 80424d6:	681b      	ldr	r3, [r3, #0]
 80424d8:	691b      	ldr	r3, [r3, #16]
 80424da:	f003 0301 	and.w	r3, r3, #1
 80424de:	2b01      	cmp	r3, #1
 80424e0:	d10e      	bne.n	8042500 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80424e2:	687b      	ldr	r3, [r7, #4]
 80424e4:	681b      	ldr	r3, [r3, #0]
 80424e6:	68db      	ldr	r3, [r3, #12]
 80424e8:	f003 0301 	and.w	r3, r3, #1
 80424ec:	2b01      	cmp	r3, #1
 80424ee:	d107      	bne.n	8042500 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80424f0:	687b      	ldr	r3, [r7, #4]
 80424f2:	681b      	ldr	r3, [r3, #0]
 80424f4:	f06f 0201 	mvn.w	r2, #1
 80424f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80424fa:	6878      	ldr	r0, [r7, #4]
 80424fc:	f7fe fa84 	bl	8040a08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8042500:	687b      	ldr	r3, [r7, #4]
 8042502:	681b      	ldr	r3, [r3, #0]
 8042504:	691b      	ldr	r3, [r3, #16]
 8042506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 804250a:	2b80      	cmp	r3, #128	; 0x80
 804250c:	d10e      	bne.n	804252c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 804250e:	687b      	ldr	r3, [r7, #4]
 8042510:	681b      	ldr	r3, [r3, #0]
 8042512:	68db      	ldr	r3, [r3, #12]
 8042514:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8042518:	2b80      	cmp	r3, #128	; 0x80
 804251a:	d107      	bne.n	804252c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 804251c:	687b      	ldr	r3, [r7, #4]
 804251e:	681b      	ldr	r3, [r3, #0]
 8042520:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8042524:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8042526:	6878      	ldr	r0, [r7, #4]
 8042528:	f000 f8d9 	bl	80426de <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 804252c:	687b      	ldr	r3, [r7, #4]
 804252e:	681b      	ldr	r3, [r3, #0]
 8042530:	691b      	ldr	r3, [r3, #16]
 8042532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8042536:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 804253a:	d10e      	bne.n	804255a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 804253c:	687b      	ldr	r3, [r7, #4]
 804253e:	681b      	ldr	r3, [r3, #0]
 8042540:	68db      	ldr	r3, [r3, #12]
 8042542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8042546:	2b80      	cmp	r3, #128	; 0x80
 8042548:	d107      	bne.n	804255a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 804254a:	687b      	ldr	r3, [r7, #4]
 804254c:	681b      	ldr	r3, [r3, #0]
 804254e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8042552:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8042554:	6878      	ldr	r0, [r7, #4]
 8042556:	f000 f8cc 	bl	80426f2 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 804255a:	687b      	ldr	r3, [r7, #4]
 804255c:	681b      	ldr	r3, [r3, #0]
 804255e:	691b      	ldr	r3, [r3, #16]
 8042560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8042564:	2b40      	cmp	r3, #64	; 0x40
 8042566:	d10e      	bne.n	8042586 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8042568:	687b      	ldr	r3, [r7, #4]
 804256a:	681b      	ldr	r3, [r3, #0]
 804256c:	68db      	ldr	r3, [r3, #12]
 804256e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8042572:	2b40      	cmp	r3, #64	; 0x40
 8042574:	d107      	bne.n	8042586 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8042576:	687b      	ldr	r3, [r7, #4]
 8042578:	681b      	ldr	r3, [r3, #0]
 804257a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 804257e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8042580:	6878      	ldr	r0, [r7, #4]
 8042582:	f000 f898 	bl	80426b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8042586:	687b      	ldr	r3, [r7, #4]
 8042588:	681b      	ldr	r3, [r3, #0]
 804258a:	691b      	ldr	r3, [r3, #16]
 804258c:	f003 0320 	and.w	r3, r3, #32
 8042590:	2b20      	cmp	r3, #32
 8042592:	d10e      	bne.n	80425b2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8042594:	687b      	ldr	r3, [r7, #4]
 8042596:	681b      	ldr	r3, [r3, #0]
 8042598:	68db      	ldr	r3, [r3, #12]
 804259a:	f003 0320 	and.w	r3, r3, #32
 804259e:	2b20      	cmp	r3, #32
 80425a0:	d107      	bne.n	80425b2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80425a2:	687b      	ldr	r3, [r7, #4]
 80425a4:	681b      	ldr	r3, [r3, #0]
 80425a6:	f06f 0220 	mvn.w	r2, #32
 80425aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80425ac:	6878      	ldr	r0, [r7, #4]
 80425ae:	f000 f88c 	bl	80426ca <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80425b2:	687b      	ldr	r3, [r7, #4]
 80425b4:	681b      	ldr	r3, [r3, #0]
 80425b6:	691b      	ldr	r3, [r3, #16]
 80425b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80425bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80425c0:	d10f      	bne.n	80425e2 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80425c2:	687b      	ldr	r3, [r7, #4]
 80425c4:	681b      	ldr	r3, [r3, #0]
 80425c6:	68db      	ldr	r3, [r3, #12]
 80425c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80425cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80425d0:	d107      	bne.n	80425e2 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80425d2:	687b      	ldr	r3, [r7, #4]
 80425d4:	681b      	ldr	r3, [r3, #0]
 80425d6:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80425da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80425dc:	6878      	ldr	r0, [r7, #4]
 80425de:	f000 f892 	bl	8042706 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80425e2:	687b      	ldr	r3, [r7, #4]
 80425e4:	681b      	ldr	r3, [r3, #0]
 80425e6:	691b      	ldr	r3, [r3, #16]
 80425e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80425ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80425f0:	d10f      	bne.n	8042612 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80425f2:	687b      	ldr	r3, [r7, #4]
 80425f4:	681b      	ldr	r3, [r3, #0]
 80425f6:	68db      	ldr	r3, [r3, #12]
 80425f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80425fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8042600:	d107      	bne.n	8042612 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8042602:	687b      	ldr	r3, [r7, #4]
 8042604:	681b      	ldr	r3, [r3, #0]
 8042606:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 804260a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 804260c:	6878      	ldr	r0, [r7, #4]
 804260e:	f000 f884 	bl	804271a <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8042612:	687b      	ldr	r3, [r7, #4]
 8042614:	681b      	ldr	r3, [r3, #0]
 8042616:	691b      	ldr	r3, [r3, #16]
 8042618:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 804261c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8042620:	d10f      	bne.n	8042642 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8042622:	687b      	ldr	r3, [r7, #4]
 8042624:	681b      	ldr	r3, [r3, #0]
 8042626:	68db      	ldr	r3, [r3, #12]
 8042628:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 804262c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8042630:	d107      	bne.n	8042642 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8042632:	687b      	ldr	r3, [r7, #4]
 8042634:	681b      	ldr	r3, [r3, #0]
 8042636:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 804263a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 804263c:	6878      	ldr	r0, [r7, #4]
 804263e:	f000 f876 	bl	804272e <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8042642:	687b      	ldr	r3, [r7, #4]
 8042644:	681b      	ldr	r3, [r3, #0]
 8042646:	691b      	ldr	r3, [r3, #16]
 8042648:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 804264c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8042650:	d10f      	bne.n	8042672 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8042652:	687b      	ldr	r3, [r7, #4]
 8042654:	681b      	ldr	r3, [r3, #0]
 8042656:	68db      	ldr	r3, [r3, #12]
 8042658:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 804265c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8042660:	d107      	bne.n	8042672 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8042662:	687b      	ldr	r3, [r7, #4]
 8042664:	681b      	ldr	r3, [r3, #0]
 8042666:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 804266a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 804266c:	6878      	ldr	r0, [r7, #4]
 804266e:	f000 f868 	bl	8042742 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8042672:	bf00      	nop
 8042674:	3708      	adds	r7, #8
 8042676:	46bd      	mov	sp, r7
 8042678:	bd80      	pop	{r7, pc}

0804267a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 804267a:	b480      	push	{r7}
 804267c:	b083      	sub	sp, #12
 804267e:	af00      	add	r7, sp, #0
 8042680:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8042682:	bf00      	nop
 8042684:	370c      	adds	r7, #12
 8042686:	46bd      	mov	sp, r7
 8042688:	f85d 7b04 	ldr.w	r7, [sp], #4
 804268c:	4770      	bx	lr

0804268e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 804268e:	b480      	push	{r7}
 8042690:	b083      	sub	sp, #12
 8042692:	af00      	add	r7, sp, #0
 8042694:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8042696:	bf00      	nop
 8042698:	370c      	adds	r7, #12
 804269a:	46bd      	mov	sp, r7
 804269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80426a0:	4770      	bx	lr

080426a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80426a2:	b480      	push	{r7}
 80426a4:	b083      	sub	sp, #12
 80426a6:	af00      	add	r7, sp, #0
 80426a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80426aa:	bf00      	nop
 80426ac:	370c      	adds	r7, #12
 80426ae:	46bd      	mov	sp, r7
 80426b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80426b4:	4770      	bx	lr

080426b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80426b6:	b480      	push	{r7}
 80426b8:	b083      	sub	sp, #12
 80426ba:	af00      	add	r7, sp, #0
 80426bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80426be:	bf00      	nop
 80426c0:	370c      	adds	r7, #12
 80426c2:	46bd      	mov	sp, r7
 80426c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80426c8:	4770      	bx	lr

080426ca <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80426ca:	b480      	push	{r7}
 80426cc:	b083      	sub	sp, #12
 80426ce:	af00      	add	r7, sp, #0
 80426d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80426d2:	bf00      	nop
 80426d4:	370c      	adds	r7, #12
 80426d6:	46bd      	mov	sp, r7
 80426d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80426dc:	4770      	bx	lr

080426de <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80426de:	b480      	push	{r7}
 80426e0:	b083      	sub	sp, #12
 80426e2:	af00      	add	r7, sp, #0
 80426e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80426e6:	bf00      	nop
 80426e8:	370c      	adds	r7, #12
 80426ea:	46bd      	mov	sp, r7
 80426ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80426f0:	4770      	bx	lr

080426f2 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80426f2:	b480      	push	{r7}
 80426f4:	b083      	sub	sp, #12
 80426f6:	af00      	add	r7, sp, #0
 80426f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80426fa:	bf00      	nop
 80426fc:	370c      	adds	r7, #12
 80426fe:	46bd      	mov	sp, r7
 8042700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042704:	4770      	bx	lr

08042706 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8042706:	b480      	push	{r7}
 8042708:	b083      	sub	sp, #12
 804270a:	af00      	add	r7, sp, #0
 804270c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 804270e:	bf00      	nop
 8042710:	370c      	adds	r7, #12
 8042712:	46bd      	mov	sp, r7
 8042714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042718:	4770      	bx	lr

0804271a <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 804271a:	b480      	push	{r7}
 804271c:	b083      	sub	sp, #12
 804271e:	af00      	add	r7, sp, #0
 8042720:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8042722:	bf00      	nop
 8042724:	370c      	adds	r7, #12
 8042726:	46bd      	mov	sp, r7
 8042728:	f85d 7b04 	ldr.w	r7, [sp], #4
 804272c:	4770      	bx	lr

0804272e <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 804272e:	b480      	push	{r7}
 8042730:	b083      	sub	sp, #12
 8042732:	af00      	add	r7, sp, #0
 8042734:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8042736:	bf00      	nop
 8042738:	370c      	adds	r7, #12
 804273a:	46bd      	mov	sp, r7
 804273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042740:	4770      	bx	lr

08042742 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8042742:	b480      	push	{r7}
 8042744:	b083      	sub	sp, #12
 8042746:	af00      	add	r7, sp, #0
 8042748:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 804274a:	bf00      	nop
 804274c:	370c      	adds	r7, #12
 804274e:	46bd      	mov	sp, r7
 8042750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042754:	4770      	bx	lr

08042756 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8042756:	b580      	push	{r7, lr}
 8042758:	b082      	sub	sp, #8
 804275a:	af00      	add	r7, sp, #0
 804275c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 804275e:	687b      	ldr	r3, [r7, #4]
 8042760:	2b00      	cmp	r3, #0
 8042762:	d101      	bne.n	8042768 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8042764:	2301      	movs	r3, #1
 8042766:	e042      	b.n	80427ee <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8042768:	687b      	ldr	r3, [r7, #4]
 804276a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 804276e:	2b00      	cmp	r3, #0
 8042770:	d106      	bne.n	8042780 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8042772:	687b      	ldr	r3, [r7, #4]
 8042774:	2200      	movs	r2, #0
 8042776:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 804277a:	6878      	ldr	r0, [r7, #4]
 804277c:	f7fe f986 	bl	8040a8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8042780:	687b      	ldr	r3, [r7, #4]
 8042782:	2224      	movs	r2, #36	; 0x24
 8042784:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8042788:	687b      	ldr	r3, [r7, #4]
 804278a:	681b      	ldr	r3, [r3, #0]
 804278c:	681a      	ldr	r2, [r3, #0]
 804278e:	687b      	ldr	r3, [r7, #4]
 8042790:	681b      	ldr	r3, [r3, #0]
 8042792:	f022 0201 	bic.w	r2, r2, #1
 8042796:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8042798:	6878      	ldr	r0, [r7, #4]
 804279a:	f000 f8b1 	bl	8042900 <UART_SetConfig>
 804279e:	4603      	mov	r3, r0
 80427a0:	2b01      	cmp	r3, #1
 80427a2:	d101      	bne.n	80427a8 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80427a4:	2301      	movs	r3, #1
 80427a6:	e022      	b.n	80427ee <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80427a8:	687b      	ldr	r3, [r7, #4]
 80427aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80427ac:	2b00      	cmp	r3, #0
 80427ae:	d002      	beq.n	80427b6 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80427b0:	6878      	ldr	r0, [r7, #4]
 80427b2:	f000 fba7 	bl	8042f04 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80427b6:	687b      	ldr	r3, [r7, #4]
 80427b8:	681b      	ldr	r3, [r3, #0]
 80427ba:	685a      	ldr	r2, [r3, #4]
 80427bc:	687b      	ldr	r3, [r7, #4]
 80427be:	681b      	ldr	r3, [r3, #0]
 80427c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80427c4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80427c6:	687b      	ldr	r3, [r7, #4]
 80427c8:	681b      	ldr	r3, [r3, #0]
 80427ca:	689a      	ldr	r2, [r3, #8]
 80427cc:	687b      	ldr	r3, [r7, #4]
 80427ce:	681b      	ldr	r3, [r3, #0]
 80427d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80427d4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80427d6:	687b      	ldr	r3, [r7, #4]
 80427d8:	681b      	ldr	r3, [r3, #0]
 80427da:	681a      	ldr	r2, [r3, #0]
 80427dc:	687b      	ldr	r3, [r7, #4]
 80427de:	681b      	ldr	r3, [r3, #0]
 80427e0:	f042 0201 	orr.w	r2, r2, #1
 80427e4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80427e6:	6878      	ldr	r0, [r7, #4]
 80427e8:	f000 fc2e 	bl	8043048 <UART_CheckIdleState>
 80427ec:	4603      	mov	r3, r0
}
 80427ee:	4618      	mov	r0, r3
 80427f0:	3708      	adds	r7, #8
 80427f2:	46bd      	mov	sp, r7
 80427f4:	bd80      	pop	{r7, pc}
	...

080427f8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80427f8:	b480      	push	{r7}
 80427fa:	b085      	sub	sp, #20
 80427fc:	af00      	add	r7, sp, #0
 80427fe:	60f8      	str	r0, [r7, #12]
 8042800:	60b9      	str	r1, [r7, #8]
 8042802:	4613      	mov	r3, r2
 8042804:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8042806:	68fb      	ldr	r3, [r7, #12]
 8042808:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 804280c:	2b20      	cmp	r3, #32
 804280e:	d168      	bne.n	80428e2 <HAL_UART_Transmit_IT+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8042810:	68bb      	ldr	r3, [r7, #8]
 8042812:	2b00      	cmp	r3, #0
 8042814:	d002      	beq.n	804281c <HAL_UART_Transmit_IT+0x24>
 8042816:	88fb      	ldrh	r3, [r7, #6]
 8042818:	2b00      	cmp	r3, #0
 804281a:	d101      	bne.n	8042820 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 804281c:	2301      	movs	r3, #1
 804281e:	e061      	b.n	80428e4 <HAL_UART_Transmit_IT+0xec>
    }

    __HAL_LOCK(huart);
 8042820:	68fb      	ldr	r3, [r7, #12]
 8042822:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8042826:	2b01      	cmp	r3, #1
 8042828:	d101      	bne.n	804282e <HAL_UART_Transmit_IT+0x36>
 804282a:	2302      	movs	r3, #2
 804282c:	e05a      	b.n	80428e4 <HAL_UART_Transmit_IT+0xec>
 804282e:	68fb      	ldr	r3, [r7, #12]
 8042830:	2201      	movs	r2, #1
 8042832:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 8042836:	68fb      	ldr	r3, [r7, #12]
 8042838:	68ba      	ldr	r2, [r7, #8]
 804283a:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 804283c:	68fb      	ldr	r3, [r7, #12]
 804283e:	88fa      	ldrh	r2, [r7, #6]
 8042840:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8042844:	68fb      	ldr	r3, [r7, #12]
 8042846:	88fa      	ldrh	r2, [r7, #6]
 8042848:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 804284c:	68fb      	ldr	r3, [r7, #12]
 804284e:	2200      	movs	r2, #0
 8042850:	671a      	str	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8042852:	68fb      	ldr	r3, [r7, #12]
 8042854:	2200      	movs	r2, #0
 8042856:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 804285a:	68fb      	ldr	r3, [r7, #12]
 804285c:	2221      	movs	r2, #33	; 0x21
 804285e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8042862:	68fb      	ldr	r3, [r7, #12]
 8042864:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8042866:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 804286a:	d11c      	bne.n	80428a6 <HAL_UART_Transmit_IT+0xae>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 804286c:	68fb      	ldr	r3, [r7, #12]
 804286e:	689b      	ldr	r3, [r3, #8]
 8042870:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8042874:	d107      	bne.n	8042886 <HAL_UART_Transmit_IT+0x8e>
 8042876:	68fb      	ldr	r3, [r7, #12]
 8042878:	691b      	ldr	r3, [r3, #16]
 804287a:	2b00      	cmp	r3, #0
 804287c:	d103      	bne.n	8042886 <HAL_UART_Transmit_IT+0x8e>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 804287e:	68fb      	ldr	r3, [r7, #12]
 8042880:	4a1b      	ldr	r2, [pc, #108]	; (80428f0 <HAL_UART_Transmit_IT+0xf8>)
 8042882:	671a      	str	r2, [r3, #112]	; 0x70
 8042884:	e002      	b.n	804288c <HAL_UART_Transmit_IT+0x94>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8042886:	68fb      	ldr	r3, [r7, #12]
 8042888:	4a1a      	ldr	r2, [pc, #104]	; (80428f4 <HAL_UART_Transmit_IT+0xfc>)
 804288a:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 804288c:	68fb      	ldr	r3, [r7, #12]
 804288e:	2200      	movs	r2, #0
 8042890:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the TX FIFO threshold interrupt */
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8042894:	68fb      	ldr	r3, [r7, #12]
 8042896:	681b      	ldr	r3, [r3, #0]
 8042898:	689a      	ldr	r2, [r3, #8]
 804289a:	68fb      	ldr	r3, [r7, #12]
 804289c:	681b      	ldr	r3, [r3, #0]
 804289e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80428a2:	609a      	str	r2, [r3, #8]
 80428a4:	e01b      	b.n	80428de <HAL_UART_Transmit_IT+0xe6>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80428a6:	68fb      	ldr	r3, [r7, #12]
 80428a8:	689b      	ldr	r3, [r3, #8]
 80428aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80428ae:	d107      	bne.n	80428c0 <HAL_UART_Transmit_IT+0xc8>
 80428b0:	68fb      	ldr	r3, [r7, #12]
 80428b2:	691b      	ldr	r3, [r3, #16]
 80428b4:	2b00      	cmp	r3, #0
 80428b6:	d103      	bne.n	80428c0 <HAL_UART_Transmit_IT+0xc8>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80428b8:	68fb      	ldr	r3, [r7, #12]
 80428ba:	4a0f      	ldr	r2, [pc, #60]	; (80428f8 <HAL_UART_Transmit_IT+0x100>)
 80428bc:	671a      	str	r2, [r3, #112]	; 0x70
 80428be:	e002      	b.n	80428c6 <HAL_UART_Transmit_IT+0xce>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80428c0:	68fb      	ldr	r3, [r7, #12]
 80428c2:	4a0e      	ldr	r2, [pc, #56]	; (80428fc <HAL_UART_Transmit_IT+0x104>)
 80428c4:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 80428c6:	68fb      	ldr	r3, [r7, #12]
 80428c8:	2200      	movs	r2, #0
 80428ca:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80428ce:	68fb      	ldr	r3, [r7, #12]
 80428d0:	681b      	ldr	r3, [r3, #0]
 80428d2:	681a      	ldr	r2, [r3, #0]
 80428d4:	68fb      	ldr	r3, [r7, #12]
 80428d6:	681b      	ldr	r3, [r3, #0]
 80428d8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80428dc:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 80428de:	2300      	movs	r3, #0
 80428e0:	e000      	b.n	80428e4 <HAL_UART_Transmit_IT+0xec>
  }
  else
  {
    return HAL_BUSY;
 80428e2:	2302      	movs	r3, #2
  }
}
 80428e4:	4618      	mov	r0, r3
 80428e6:	3714      	adds	r7, #20
 80428e8:	46bd      	mov	sp, r7
 80428ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80428ee:	4770      	bx	lr
 80428f0:	08043365 	.word	0x08043365
 80428f4:	080432cb 	.word	0x080432cb
 80428f8:	0804324d 	.word	0x0804324d
 80428fc:	080431d9 	.word	0x080431d9

08042900 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8042900:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8042904:	b08c      	sub	sp, #48	; 0x30
 8042906:	af00      	add	r7, sp, #0
 8042908:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 804290a:	2300      	movs	r3, #0
 804290c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8042910:	697b      	ldr	r3, [r7, #20]
 8042912:	689a      	ldr	r2, [r3, #8]
 8042914:	697b      	ldr	r3, [r7, #20]
 8042916:	691b      	ldr	r3, [r3, #16]
 8042918:	431a      	orrs	r2, r3
 804291a:	697b      	ldr	r3, [r7, #20]
 804291c:	695b      	ldr	r3, [r3, #20]
 804291e:	431a      	orrs	r2, r3
 8042920:	697b      	ldr	r3, [r7, #20]
 8042922:	69db      	ldr	r3, [r3, #28]
 8042924:	4313      	orrs	r3, r2
 8042926:	62fb      	str	r3, [r7, #44]	; 0x2c
  tmpreg |= (uint32_t)huart->FifoMode;
 8042928:	697b      	ldr	r3, [r7, #20]
 804292a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 804292c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 804292e:	4313      	orrs	r3, r2
 8042930:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8042932:	697b      	ldr	r3, [r7, #20]
 8042934:	681b      	ldr	r3, [r3, #0]
 8042936:	681a      	ldr	r2, [r3, #0]
 8042938:	4baa      	ldr	r3, [pc, #680]	; (8042be4 <UART_SetConfig+0x2e4>)
 804293a:	4013      	ands	r3, r2
 804293c:	697a      	ldr	r2, [r7, #20]
 804293e:	6812      	ldr	r2, [r2, #0]
 8042940:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8042942:	430b      	orrs	r3, r1
 8042944:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8042946:	697b      	ldr	r3, [r7, #20]
 8042948:	681b      	ldr	r3, [r3, #0]
 804294a:	685b      	ldr	r3, [r3, #4]
 804294c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8042950:	697b      	ldr	r3, [r7, #20]
 8042952:	68da      	ldr	r2, [r3, #12]
 8042954:	697b      	ldr	r3, [r7, #20]
 8042956:	681b      	ldr	r3, [r3, #0]
 8042958:	430a      	orrs	r2, r1
 804295a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 804295c:	697b      	ldr	r3, [r7, #20]
 804295e:	699b      	ldr	r3, [r3, #24]
 8042960:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8042962:	697b      	ldr	r3, [r7, #20]
 8042964:	681b      	ldr	r3, [r3, #0]
 8042966:	4aa0      	ldr	r2, [pc, #640]	; (8042be8 <UART_SetConfig+0x2e8>)
 8042968:	4293      	cmp	r3, r2
 804296a:	d004      	beq.n	8042976 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 804296c:	697b      	ldr	r3, [r7, #20]
 804296e:	6a1b      	ldr	r3, [r3, #32]
 8042970:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8042972:	4313      	orrs	r3, r2
 8042974:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8042976:	697b      	ldr	r3, [r7, #20]
 8042978:	681b      	ldr	r3, [r3, #0]
 804297a:	689b      	ldr	r3, [r3, #8]
 804297c:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8042980:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8042984:	697a      	ldr	r2, [r7, #20]
 8042986:	6812      	ldr	r2, [r2, #0]
 8042988:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 804298a:	430b      	orrs	r3, r1
 804298c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 804298e:	697b      	ldr	r3, [r7, #20]
 8042990:	681b      	ldr	r3, [r3, #0]
 8042992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8042994:	f023 010f 	bic.w	r1, r3, #15
 8042998:	697b      	ldr	r3, [r7, #20]
 804299a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 804299c:	697b      	ldr	r3, [r7, #20]
 804299e:	681b      	ldr	r3, [r3, #0]
 80429a0:	430a      	orrs	r2, r1
 80429a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80429a4:	697b      	ldr	r3, [r7, #20]
 80429a6:	681b      	ldr	r3, [r3, #0]
 80429a8:	4a90      	ldr	r2, [pc, #576]	; (8042bec <UART_SetConfig+0x2ec>)
 80429aa:	4293      	cmp	r3, r2
 80429ac:	d126      	bne.n	80429fc <UART_SetConfig+0xfc>
 80429ae:	4b90      	ldr	r3, [pc, #576]	; (8042bf0 <UART_SetConfig+0x2f0>)
 80429b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80429b4:	f003 0303 	and.w	r3, r3, #3
 80429b8:	2b03      	cmp	r3, #3
 80429ba:	d81b      	bhi.n	80429f4 <UART_SetConfig+0xf4>
 80429bc:	a201      	add	r2, pc, #4	; (adr r2, 80429c4 <UART_SetConfig+0xc4>)
 80429be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80429c2:	bf00      	nop
 80429c4:	080429d5 	.word	0x080429d5
 80429c8:	080429e5 	.word	0x080429e5
 80429cc:	080429dd 	.word	0x080429dd
 80429d0:	080429ed 	.word	0x080429ed
 80429d4:	2301      	movs	r3, #1
 80429d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80429da:	e116      	b.n	8042c0a <UART_SetConfig+0x30a>
 80429dc:	2302      	movs	r3, #2
 80429de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80429e2:	e112      	b.n	8042c0a <UART_SetConfig+0x30a>
 80429e4:	2304      	movs	r3, #4
 80429e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80429ea:	e10e      	b.n	8042c0a <UART_SetConfig+0x30a>
 80429ec:	2308      	movs	r3, #8
 80429ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80429f2:	e10a      	b.n	8042c0a <UART_SetConfig+0x30a>
 80429f4:	2310      	movs	r3, #16
 80429f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80429fa:	e106      	b.n	8042c0a <UART_SetConfig+0x30a>
 80429fc:	697b      	ldr	r3, [r7, #20]
 80429fe:	681b      	ldr	r3, [r3, #0]
 8042a00:	4a7c      	ldr	r2, [pc, #496]	; (8042bf4 <UART_SetConfig+0x2f4>)
 8042a02:	4293      	cmp	r3, r2
 8042a04:	d138      	bne.n	8042a78 <UART_SetConfig+0x178>
 8042a06:	4b7a      	ldr	r3, [pc, #488]	; (8042bf0 <UART_SetConfig+0x2f0>)
 8042a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042a0c:	f003 030c 	and.w	r3, r3, #12
 8042a10:	2b0c      	cmp	r3, #12
 8042a12:	d82d      	bhi.n	8042a70 <UART_SetConfig+0x170>
 8042a14:	a201      	add	r2, pc, #4	; (adr r2, 8042a1c <UART_SetConfig+0x11c>)
 8042a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8042a1a:	bf00      	nop
 8042a1c:	08042a51 	.word	0x08042a51
 8042a20:	08042a71 	.word	0x08042a71
 8042a24:	08042a71 	.word	0x08042a71
 8042a28:	08042a71 	.word	0x08042a71
 8042a2c:	08042a61 	.word	0x08042a61
 8042a30:	08042a71 	.word	0x08042a71
 8042a34:	08042a71 	.word	0x08042a71
 8042a38:	08042a71 	.word	0x08042a71
 8042a3c:	08042a59 	.word	0x08042a59
 8042a40:	08042a71 	.word	0x08042a71
 8042a44:	08042a71 	.word	0x08042a71
 8042a48:	08042a71 	.word	0x08042a71
 8042a4c:	08042a69 	.word	0x08042a69
 8042a50:	2300      	movs	r3, #0
 8042a52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8042a56:	e0d8      	b.n	8042c0a <UART_SetConfig+0x30a>
 8042a58:	2302      	movs	r3, #2
 8042a5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8042a5e:	e0d4      	b.n	8042c0a <UART_SetConfig+0x30a>
 8042a60:	2304      	movs	r3, #4
 8042a62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8042a66:	e0d0      	b.n	8042c0a <UART_SetConfig+0x30a>
 8042a68:	2308      	movs	r3, #8
 8042a6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8042a6e:	e0cc      	b.n	8042c0a <UART_SetConfig+0x30a>
 8042a70:	2310      	movs	r3, #16
 8042a72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8042a76:	e0c8      	b.n	8042c0a <UART_SetConfig+0x30a>
 8042a78:	697b      	ldr	r3, [r7, #20]
 8042a7a:	681b      	ldr	r3, [r3, #0]
 8042a7c:	4a5e      	ldr	r2, [pc, #376]	; (8042bf8 <UART_SetConfig+0x2f8>)
 8042a7e:	4293      	cmp	r3, r2
 8042a80:	d125      	bne.n	8042ace <UART_SetConfig+0x1ce>
 8042a82:	4b5b      	ldr	r3, [pc, #364]	; (8042bf0 <UART_SetConfig+0x2f0>)
 8042a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042a88:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8042a8c:	2b30      	cmp	r3, #48	; 0x30
 8042a8e:	d016      	beq.n	8042abe <UART_SetConfig+0x1be>
 8042a90:	2b30      	cmp	r3, #48	; 0x30
 8042a92:	d818      	bhi.n	8042ac6 <UART_SetConfig+0x1c6>
 8042a94:	2b20      	cmp	r3, #32
 8042a96:	d00a      	beq.n	8042aae <UART_SetConfig+0x1ae>
 8042a98:	2b20      	cmp	r3, #32
 8042a9a:	d814      	bhi.n	8042ac6 <UART_SetConfig+0x1c6>
 8042a9c:	2b00      	cmp	r3, #0
 8042a9e:	d002      	beq.n	8042aa6 <UART_SetConfig+0x1a6>
 8042aa0:	2b10      	cmp	r3, #16
 8042aa2:	d008      	beq.n	8042ab6 <UART_SetConfig+0x1b6>
 8042aa4:	e00f      	b.n	8042ac6 <UART_SetConfig+0x1c6>
 8042aa6:	2300      	movs	r3, #0
 8042aa8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8042aac:	e0ad      	b.n	8042c0a <UART_SetConfig+0x30a>
 8042aae:	2302      	movs	r3, #2
 8042ab0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8042ab4:	e0a9      	b.n	8042c0a <UART_SetConfig+0x30a>
 8042ab6:	2304      	movs	r3, #4
 8042ab8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8042abc:	e0a5      	b.n	8042c0a <UART_SetConfig+0x30a>
 8042abe:	2308      	movs	r3, #8
 8042ac0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8042ac4:	e0a1      	b.n	8042c0a <UART_SetConfig+0x30a>
 8042ac6:	2310      	movs	r3, #16
 8042ac8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8042acc:	e09d      	b.n	8042c0a <UART_SetConfig+0x30a>
 8042ace:	697b      	ldr	r3, [r7, #20]
 8042ad0:	681b      	ldr	r3, [r3, #0]
 8042ad2:	4a4a      	ldr	r2, [pc, #296]	; (8042bfc <UART_SetConfig+0x2fc>)
 8042ad4:	4293      	cmp	r3, r2
 8042ad6:	d125      	bne.n	8042b24 <UART_SetConfig+0x224>
 8042ad8:	4b45      	ldr	r3, [pc, #276]	; (8042bf0 <UART_SetConfig+0x2f0>)
 8042ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042ade:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8042ae2:	2bc0      	cmp	r3, #192	; 0xc0
 8042ae4:	d016      	beq.n	8042b14 <UART_SetConfig+0x214>
 8042ae6:	2bc0      	cmp	r3, #192	; 0xc0
 8042ae8:	d818      	bhi.n	8042b1c <UART_SetConfig+0x21c>
 8042aea:	2b80      	cmp	r3, #128	; 0x80
 8042aec:	d00a      	beq.n	8042b04 <UART_SetConfig+0x204>
 8042aee:	2b80      	cmp	r3, #128	; 0x80
 8042af0:	d814      	bhi.n	8042b1c <UART_SetConfig+0x21c>
 8042af2:	2b00      	cmp	r3, #0
 8042af4:	d002      	beq.n	8042afc <UART_SetConfig+0x1fc>
 8042af6:	2b40      	cmp	r3, #64	; 0x40
 8042af8:	d008      	beq.n	8042b0c <UART_SetConfig+0x20c>
 8042afa:	e00f      	b.n	8042b1c <UART_SetConfig+0x21c>
 8042afc:	2300      	movs	r3, #0
 8042afe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8042b02:	e082      	b.n	8042c0a <UART_SetConfig+0x30a>
 8042b04:	2302      	movs	r3, #2
 8042b06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8042b0a:	e07e      	b.n	8042c0a <UART_SetConfig+0x30a>
 8042b0c:	2304      	movs	r3, #4
 8042b0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8042b12:	e07a      	b.n	8042c0a <UART_SetConfig+0x30a>
 8042b14:	2308      	movs	r3, #8
 8042b16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8042b1a:	e076      	b.n	8042c0a <UART_SetConfig+0x30a>
 8042b1c:	2310      	movs	r3, #16
 8042b1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8042b22:	e072      	b.n	8042c0a <UART_SetConfig+0x30a>
 8042b24:	697b      	ldr	r3, [r7, #20]
 8042b26:	681b      	ldr	r3, [r3, #0]
 8042b28:	4a35      	ldr	r2, [pc, #212]	; (8042c00 <UART_SetConfig+0x300>)
 8042b2a:	4293      	cmp	r3, r2
 8042b2c:	d12a      	bne.n	8042b84 <UART_SetConfig+0x284>
 8042b2e:	4b30      	ldr	r3, [pc, #192]	; (8042bf0 <UART_SetConfig+0x2f0>)
 8042b30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042b34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8042b38:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8042b3c:	d01a      	beq.n	8042b74 <UART_SetConfig+0x274>
 8042b3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8042b42:	d81b      	bhi.n	8042b7c <UART_SetConfig+0x27c>
 8042b44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8042b48:	d00c      	beq.n	8042b64 <UART_SetConfig+0x264>
 8042b4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8042b4e:	d815      	bhi.n	8042b7c <UART_SetConfig+0x27c>
 8042b50:	2b00      	cmp	r3, #0
 8042b52:	d003      	beq.n	8042b5c <UART_SetConfig+0x25c>
 8042b54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8042b58:	d008      	beq.n	8042b6c <UART_SetConfig+0x26c>
 8042b5a:	e00f      	b.n	8042b7c <UART_SetConfig+0x27c>
 8042b5c:	2300      	movs	r3, #0
 8042b5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8042b62:	e052      	b.n	8042c0a <UART_SetConfig+0x30a>
 8042b64:	2302      	movs	r3, #2
 8042b66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8042b6a:	e04e      	b.n	8042c0a <UART_SetConfig+0x30a>
 8042b6c:	2304      	movs	r3, #4
 8042b6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8042b72:	e04a      	b.n	8042c0a <UART_SetConfig+0x30a>
 8042b74:	2308      	movs	r3, #8
 8042b76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8042b7a:	e046      	b.n	8042c0a <UART_SetConfig+0x30a>
 8042b7c:	2310      	movs	r3, #16
 8042b7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8042b82:	e042      	b.n	8042c0a <UART_SetConfig+0x30a>
 8042b84:	697b      	ldr	r3, [r7, #20]
 8042b86:	681b      	ldr	r3, [r3, #0]
 8042b88:	4a17      	ldr	r2, [pc, #92]	; (8042be8 <UART_SetConfig+0x2e8>)
 8042b8a:	4293      	cmp	r3, r2
 8042b8c:	d13a      	bne.n	8042c04 <UART_SetConfig+0x304>
 8042b8e:	4b18      	ldr	r3, [pc, #96]	; (8042bf0 <UART_SetConfig+0x2f0>)
 8042b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042b94:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8042b98:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8042b9c:	d01a      	beq.n	8042bd4 <UART_SetConfig+0x2d4>
 8042b9e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8042ba2:	d81b      	bhi.n	8042bdc <UART_SetConfig+0x2dc>
 8042ba4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8042ba8:	d00c      	beq.n	8042bc4 <UART_SetConfig+0x2c4>
 8042baa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8042bae:	d815      	bhi.n	8042bdc <UART_SetConfig+0x2dc>
 8042bb0:	2b00      	cmp	r3, #0
 8042bb2:	d003      	beq.n	8042bbc <UART_SetConfig+0x2bc>
 8042bb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8042bb8:	d008      	beq.n	8042bcc <UART_SetConfig+0x2cc>
 8042bba:	e00f      	b.n	8042bdc <UART_SetConfig+0x2dc>
 8042bbc:	2300      	movs	r3, #0
 8042bbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8042bc2:	e022      	b.n	8042c0a <UART_SetConfig+0x30a>
 8042bc4:	2302      	movs	r3, #2
 8042bc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8042bca:	e01e      	b.n	8042c0a <UART_SetConfig+0x30a>
 8042bcc:	2304      	movs	r3, #4
 8042bce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8042bd2:	e01a      	b.n	8042c0a <UART_SetConfig+0x30a>
 8042bd4:	2308      	movs	r3, #8
 8042bd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8042bda:	e016      	b.n	8042c0a <UART_SetConfig+0x30a>
 8042bdc:	2310      	movs	r3, #16
 8042bde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8042be2:	e012      	b.n	8042c0a <UART_SetConfig+0x30a>
 8042be4:	cfff69f3 	.word	0xcfff69f3
 8042be8:	40008000 	.word	0x40008000
 8042bec:	40013800 	.word	0x40013800
 8042bf0:	40021000 	.word	0x40021000
 8042bf4:	40004400 	.word	0x40004400
 8042bf8:	40004800 	.word	0x40004800
 8042bfc:	40004c00 	.word	0x40004c00
 8042c00:	40005000 	.word	0x40005000
 8042c04:	2310      	movs	r3, #16
 8042c06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8042c0a:	697b      	ldr	r3, [r7, #20]
 8042c0c:	681b      	ldr	r3, [r3, #0]
 8042c0e:	4aae      	ldr	r2, [pc, #696]	; (8042ec8 <UART_SetConfig+0x5c8>)
 8042c10:	4293      	cmp	r3, r2
 8042c12:	f040 8097 	bne.w	8042d44 <UART_SetConfig+0x444>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8042c16:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8042c1a:	2b08      	cmp	r3, #8
 8042c1c:	d823      	bhi.n	8042c66 <UART_SetConfig+0x366>
 8042c1e:	a201      	add	r2, pc, #4	; (adr r2, 8042c24 <UART_SetConfig+0x324>)
 8042c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8042c24:	08042c49 	.word	0x08042c49
 8042c28:	08042c67 	.word	0x08042c67
 8042c2c:	08042c51 	.word	0x08042c51
 8042c30:	08042c67 	.word	0x08042c67
 8042c34:	08042c57 	.word	0x08042c57
 8042c38:	08042c67 	.word	0x08042c67
 8042c3c:	08042c67 	.word	0x08042c67
 8042c40:	08042c67 	.word	0x08042c67
 8042c44:	08042c5f 	.word	0x08042c5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8042c48:	f7ff f8d8 	bl	8041dfc <HAL_RCC_GetPCLK1Freq>
 8042c4c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8042c4e:	e010      	b.n	8042c72 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8042c50:	4b9e      	ldr	r3, [pc, #632]	; (8042ecc <UART_SetConfig+0x5cc>)
 8042c52:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8042c54:	e00d      	b.n	8042c72 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8042c56:	f7ff f863 	bl	8041d20 <HAL_RCC_GetSysClockFreq>
 8042c5a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8042c5c:	e009      	b.n	8042c72 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8042c5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8042c62:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8042c64:	e005      	b.n	8042c72 <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 8042c66:	2300      	movs	r3, #0
 8042c68:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8042c6a:	2301      	movs	r3, #1
 8042c6c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8042c70:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8042c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8042c74:	2b00      	cmp	r3, #0
 8042c76:	f000 8130 	beq.w	8042eda <UART_SetConfig+0x5da>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8042c7a:	697b      	ldr	r3, [r7, #20]
 8042c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8042c7e:	4a94      	ldr	r2, [pc, #592]	; (8042ed0 <UART_SetConfig+0x5d0>)
 8042c80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8042c84:	461a      	mov	r2, r3
 8042c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8042c88:	fbb3 f3f2 	udiv	r3, r3, r2
 8042c8c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8042c8e:	697b      	ldr	r3, [r7, #20]
 8042c90:	685a      	ldr	r2, [r3, #4]
 8042c92:	4613      	mov	r3, r2
 8042c94:	005b      	lsls	r3, r3, #1
 8042c96:	4413      	add	r3, r2
 8042c98:	69ba      	ldr	r2, [r7, #24]
 8042c9a:	429a      	cmp	r2, r3
 8042c9c:	d305      	bcc.n	8042caa <UART_SetConfig+0x3aa>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8042c9e:	697b      	ldr	r3, [r7, #20]
 8042ca0:	685b      	ldr	r3, [r3, #4]
 8042ca2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8042ca4:	69ba      	ldr	r2, [r7, #24]
 8042ca6:	429a      	cmp	r2, r3
 8042ca8:	d903      	bls.n	8042cb2 <UART_SetConfig+0x3b2>
      {
        ret = HAL_ERROR;
 8042caa:	2301      	movs	r3, #1
 8042cac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8042cb0:	e113      	b.n	8042eda <UART_SetConfig+0x5da>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8042cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8042cb4:	2200      	movs	r2, #0
 8042cb6:	60bb      	str	r3, [r7, #8]
 8042cb8:	60fa      	str	r2, [r7, #12]
 8042cba:	697b      	ldr	r3, [r7, #20]
 8042cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8042cbe:	4a84      	ldr	r2, [pc, #528]	; (8042ed0 <UART_SetConfig+0x5d0>)
 8042cc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8042cc4:	b29b      	uxth	r3, r3
 8042cc6:	2200      	movs	r2, #0
 8042cc8:	603b      	str	r3, [r7, #0]
 8042cca:	607a      	str	r2, [r7, #4]
 8042ccc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8042cd0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8042cd4:	f7fd faa8 	bl	8040228 <__aeabi_uldivmod>
 8042cd8:	4602      	mov	r2, r0
 8042cda:	460b      	mov	r3, r1
 8042cdc:	4610      	mov	r0, r2
 8042cde:	4619      	mov	r1, r3
 8042ce0:	f04f 0200 	mov.w	r2, #0
 8042ce4:	f04f 0300 	mov.w	r3, #0
 8042ce8:	020b      	lsls	r3, r1, #8
 8042cea:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8042cee:	0202      	lsls	r2, r0, #8
 8042cf0:	6979      	ldr	r1, [r7, #20]
 8042cf2:	6849      	ldr	r1, [r1, #4]
 8042cf4:	0849      	lsrs	r1, r1, #1
 8042cf6:	2000      	movs	r0, #0
 8042cf8:	460c      	mov	r4, r1
 8042cfa:	4605      	mov	r5, r0
 8042cfc:	eb12 0804 	adds.w	r8, r2, r4
 8042d00:	eb43 0905 	adc.w	r9, r3, r5
 8042d04:	697b      	ldr	r3, [r7, #20]
 8042d06:	685b      	ldr	r3, [r3, #4]
 8042d08:	2200      	movs	r2, #0
 8042d0a:	469a      	mov	sl, r3
 8042d0c:	4693      	mov	fp, r2
 8042d0e:	4652      	mov	r2, sl
 8042d10:	465b      	mov	r3, fp
 8042d12:	4640      	mov	r0, r8
 8042d14:	4649      	mov	r1, r9
 8042d16:	f7fd fa87 	bl	8040228 <__aeabi_uldivmod>
 8042d1a:	4602      	mov	r2, r0
 8042d1c:	460b      	mov	r3, r1
 8042d1e:	4613      	mov	r3, r2
 8042d20:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8042d22:	6a3b      	ldr	r3, [r7, #32]
 8042d24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8042d28:	d308      	bcc.n	8042d3c <UART_SetConfig+0x43c>
 8042d2a:	6a3b      	ldr	r3, [r7, #32]
 8042d2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8042d30:	d204      	bcs.n	8042d3c <UART_SetConfig+0x43c>
        {
          huart->Instance->BRR = usartdiv;
 8042d32:	697b      	ldr	r3, [r7, #20]
 8042d34:	681b      	ldr	r3, [r3, #0]
 8042d36:	6a3a      	ldr	r2, [r7, #32]
 8042d38:	60da      	str	r2, [r3, #12]
 8042d3a:	e0ce      	b.n	8042eda <UART_SetConfig+0x5da>
        }
        else
        {
          ret = HAL_ERROR;
 8042d3c:	2301      	movs	r3, #1
 8042d3e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8042d42:	e0ca      	b.n	8042eda <UART_SetConfig+0x5da>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8042d44:	697b      	ldr	r3, [r7, #20]
 8042d46:	69db      	ldr	r3, [r3, #28]
 8042d48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8042d4c:	d167      	bne.n	8042e1e <UART_SetConfig+0x51e>
  {
    switch (clocksource)
 8042d4e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8042d52:	2b08      	cmp	r3, #8
 8042d54:	d827      	bhi.n	8042da6 <UART_SetConfig+0x4a6>
 8042d56:	a201      	add	r2, pc, #4	; (adr r2, 8042d5c <UART_SetConfig+0x45c>)
 8042d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8042d5c:	08042d81 	.word	0x08042d81
 8042d60:	08042d89 	.word	0x08042d89
 8042d64:	08042d91 	.word	0x08042d91
 8042d68:	08042da7 	.word	0x08042da7
 8042d6c:	08042d97 	.word	0x08042d97
 8042d70:	08042da7 	.word	0x08042da7
 8042d74:	08042da7 	.word	0x08042da7
 8042d78:	08042da7 	.word	0x08042da7
 8042d7c:	08042d9f 	.word	0x08042d9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8042d80:	f7ff f83c 	bl	8041dfc <HAL_RCC_GetPCLK1Freq>
 8042d84:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8042d86:	e014      	b.n	8042db2 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8042d88:	f7ff f84e 	bl	8041e28 <HAL_RCC_GetPCLK2Freq>
 8042d8c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8042d8e:	e010      	b.n	8042db2 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8042d90:	4b4e      	ldr	r3, [pc, #312]	; (8042ecc <UART_SetConfig+0x5cc>)
 8042d92:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8042d94:	e00d      	b.n	8042db2 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8042d96:	f7fe ffc3 	bl	8041d20 <HAL_RCC_GetSysClockFreq>
 8042d9a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8042d9c:	e009      	b.n	8042db2 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8042d9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8042da2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8042da4:	e005      	b.n	8042db2 <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 8042da6:	2300      	movs	r3, #0
 8042da8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8042daa:	2301      	movs	r3, #1
 8042dac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8042db0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8042db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8042db4:	2b00      	cmp	r3, #0
 8042db6:	f000 8090 	beq.w	8042eda <UART_SetConfig+0x5da>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8042dba:	697b      	ldr	r3, [r7, #20]
 8042dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8042dbe:	4a44      	ldr	r2, [pc, #272]	; (8042ed0 <UART_SetConfig+0x5d0>)
 8042dc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8042dc4:	461a      	mov	r2, r3
 8042dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8042dc8:	fbb3 f3f2 	udiv	r3, r3, r2
 8042dcc:	005a      	lsls	r2, r3, #1
 8042dce:	697b      	ldr	r3, [r7, #20]
 8042dd0:	685b      	ldr	r3, [r3, #4]
 8042dd2:	085b      	lsrs	r3, r3, #1
 8042dd4:	441a      	add	r2, r3
 8042dd6:	697b      	ldr	r3, [r7, #20]
 8042dd8:	685b      	ldr	r3, [r3, #4]
 8042dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8042dde:	b29b      	uxth	r3, r3
 8042de0:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8042de2:	6a3b      	ldr	r3, [r7, #32]
 8042de4:	2b0f      	cmp	r3, #15
 8042de6:	d916      	bls.n	8042e16 <UART_SetConfig+0x516>
 8042de8:	6a3b      	ldr	r3, [r7, #32]
 8042dea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8042dee:	d212      	bcs.n	8042e16 <UART_SetConfig+0x516>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8042df0:	6a3b      	ldr	r3, [r7, #32]
 8042df2:	b29b      	uxth	r3, r3
 8042df4:	f023 030f 	bic.w	r3, r3, #15
 8042df8:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8042dfa:	6a3b      	ldr	r3, [r7, #32]
 8042dfc:	085b      	lsrs	r3, r3, #1
 8042dfe:	b29b      	uxth	r3, r3
 8042e00:	f003 0307 	and.w	r3, r3, #7
 8042e04:	b29a      	uxth	r2, r3
 8042e06:	8bfb      	ldrh	r3, [r7, #30]
 8042e08:	4313      	orrs	r3, r2
 8042e0a:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8042e0c:	697b      	ldr	r3, [r7, #20]
 8042e0e:	681b      	ldr	r3, [r3, #0]
 8042e10:	8bfa      	ldrh	r2, [r7, #30]
 8042e12:	60da      	str	r2, [r3, #12]
 8042e14:	e061      	b.n	8042eda <UART_SetConfig+0x5da>
      }
      else
      {
        ret = HAL_ERROR;
 8042e16:	2301      	movs	r3, #1
 8042e18:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8042e1c:	e05d      	b.n	8042eda <UART_SetConfig+0x5da>
      }
    }
  }
  else
  {
    switch (clocksource)
 8042e1e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8042e22:	2b08      	cmp	r3, #8
 8042e24:	d827      	bhi.n	8042e76 <UART_SetConfig+0x576>
 8042e26:	a201      	add	r2, pc, #4	; (adr r2, 8042e2c <UART_SetConfig+0x52c>)
 8042e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8042e2c:	08042e51 	.word	0x08042e51
 8042e30:	08042e59 	.word	0x08042e59
 8042e34:	08042e61 	.word	0x08042e61
 8042e38:	08042e77 	.word	0x08042e77
 8042e3c:	08042e67 	.word	0x08042e67
 8042e40:	08042e77 	.word	0x08042e77
 8042e44:	08042e77 	.word	0x08042e77
 8042e48:	08042e77 	.word	0x08042e77
 8042e4c:	08042e6f 	.word	0x08042e6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8042e50:	f7fe ffd4 	bl	8041dfc <HAL_RCC_GetPCLK1Freq>
 8042e54:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8042e56:	e014      	b.n	8042e82 <UART_SetConfig+0x582>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8042e58:	f7fe ffe6 	bl	8041e28 <HAL_RCC_GetPCLK2Freq>
 8042e5c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8042e5e:	e010      	b.n	8042e82 <UART_SetConfig+0x582>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8042e60:	4b1a      	ldr	r3, [pc, #104]	; (8042ecc <UART_SetConfig+0x5cc>)
 8042e62:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8042e64:	e00d      	b.n	8042e82 <UART_SetConfig+0x582>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8042e66:	f7fe ff5b 	bl	8041d20 <HAL_RCC_GetSysClockFreq>
 8042e6a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8042e6c:	e009      	b.n	8042e82 <UART_SetConfig+0x582>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8042e6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8042e72:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8042e74:	e005      	b.n	8042e82 <UART_SetConfig+0x582>
      default:
        pclk = 0U;
 8042e76:	2300      	movs	r3, #0
 8042e78:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8042e7a:	2301      	movs	r3, #1
 8042e7c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8042e80:	bf00      	nop
    }

    if (pclk != 0U)
 8042e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8042e84:	2b00      	cmp	r3, #0
 8042e86:	d028      	beq.n	8042eda <UART_SetConfig+0x5da>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8042e88:	697b      	ldr	r3, [r7, #20]
 8042e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8042e8c:	4a10      	ldr	r2, [pc, #64]	; (8042ed0 <UART_SetConfig+0x5d0>)
 8042e8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8042e92:	461a      	mov	r2, r3
 8042e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8042e96:	fbb3 f2f2 	udiv	r2, r3, r2
 8042e9a:	697b      	ldr	r3, [r7, #20]
 8042e9c:	685b      	ldr	r3, [r3, #4]
 8042e9e:	085b      	lsrs	r3, r3, #1
 8042ea0:	441a      	add	r2, r3
 8042ea2:	697b      	ldr	r3, [r7, #20]
 8042ea4:	685b      	ldr	r3, [r3, #4]
 8042ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8042eaa:	b29b      	uxth	r3, r3
 8042eac:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8042eae:	6a3b      	ldr	r3, [r7, #32]
 8042eb0:	2b0f      	cmp	r3, #15
 8042eb2:	d90f      	bls.n	8042ed4 <UART_SetConfig+0x5d4>
 8042eb4:	6a3b      	ldr	r3, [r7, #32]
 8042eb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8042eba:	d20b      	bcs.n	8042ed4 <UART_SetConfig+0x5d4>
      {
        huart->Instance->BRR = usartdiv;
 8042ebc:	697b      	ldr	r3, [r7, #20]
 8042ebe:	681b      	ldr	r3, [r3, #0]
 8042ec0:	6a3a      	ldr	r2, [r7, #32]
 8042ec2:	60da      	str	r2, [r3, #12]
 8042ec4:	e009      	b.n	8042eda <UART_SetConfig+0x5da>
 8042ec6:	bf00      	nop
 8042ec8:	40008000 	.word	0x40008000
 8042ecc:	00f42400 	.word	0x00f42400
 8042ed0:	080436f0 	.word	0x080436f0
      }
      else
      {
        ret = HAL_ERROR;
 8042ed4:	2301      	movs	r3, #1
 8042ed6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8042eda:	697b      	ldr	r3, [r7, #20]
 8042edc:	2201      	movs	r2, #1
 8042ede:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8042ee2:	697b      	ldr	r3, [r7, #20]
 8042ee4:	2201      	movs	r2, #1
 8042ee6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8042eea:	697b      	ldr	r3, [r7, #20]
 8042eec:	2200      	movs	r2, #0
 8042eee:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8042ef0:	697b      	ldr	r3, [r7, #20]
 8042ef2:	2200      	movs	r2, #0
 8042ef4:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8042ef6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8042efa:	4618      	mov	r0, r3
 8042efc:	3730      	adds	r7, #48	; 0x30
 8042efe:	46bd      	mov	sp, r7
 8042f00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08042f04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8042f04:	b480      	push	{r7}
 8042f06:	b083      	sub	sp, #12
 8042f08:	af00      	add	r7, sp, #0
 8042f0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8042f0c:	687b      	ldr	r3, [r7, #4]
 8042f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8042f10:	f003 0301 	and.w	r3, r3, #1
 8042f14:	2b00      	cmp	r3, #0
 8042f16:	d00a      	beq.n	8042f2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8042f18:	687b      	ldr	r3, [r7, #4]
 8042f1a:	681b      	ldr	r3, [r3, #0]
 8042f1c:	685b      	ldr	r3, [r3, #4]
 8042f1e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8042f22:	687b      	ldr	r3, [r7, #4]
 8042f24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8042f26:	687b      	ldr	r3, [r7, #4]
 8042f28:	681b      	ldr	r3, [r3, #0]
 8042f2a:	430a      	orrs	r2, r1
 8042f2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8042f2e:	687b      	ldr	r3, [r7, #4]
 8042f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8042f32:	f003 0302 	and.w	r3, r3, #2
 8042f36:	2b00      	cmp	r3, #0
 8042f38:	d00a      	beq.n	8042f50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8042f3a:	687b      	ldr	r3, [r7, #4]
 8042f3c:	681b      	ldr	r3, [r3, #0]
 8042f3e:	685b      	ldr	r3, [r3, #4]
 8042f40:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8042f44:	687b      	ldr	r3, [r7, #4]
 8042f46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8042f48:	687b      	ldr	r3, [r7, #4]
 8042f4a:	681b      	ldr	r3, [r3, #0]
 8042f4c:	430a      	orrs	r2, r1
 8042f4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8042f50:	687b      	ldr	r3, [r7, #4]
 8042f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8042f54:	f003 0304 	and.w	r3, r3, #4
 8042f58:	2b00      	cmp	r3, #0
 8042f5a:	d00a      	beq.n	8042f72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8042f5c:	687b      	ldr	r3, [r7, #4]
 8042f5e:	681b      	ldr	r3, [r3, #0]
 8042f60:	685b      	ldr	r3, [r3, #4]
 8042f62:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8042f66:	687b      	ldr	r3, [r7, #4]
 8042f68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8042f6a:	687b      	ldr	r3, [r7, #4]
 8042f6c:	681b      	ldr	r3, [r3, #0]
 8042f6e:	430a      	orrs	r2, r1
 8042f70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8042f72:	687b      	ldr	r3, [r7, #4]
 8042f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8042f76:	f003 0308 	and.w	r3, r3, #8
 8042f7a:	2b00      	cmp	r3, #0
 8042f7c:	d00a      	beq.n	8042f94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8042f7e:	687b      	ldr	r3, [r7, #4]
 8042f80:	681b      	ldr	r3, [r3, #0]
 8042f82:	685b      	ldr	r3, [r3, #4]
 8042f84:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8042f88:	687b      	ldr	r3, [r7, #4]
 8042f8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8042f8c:	687b      	ldr	r3, [r7, #4]
 8042f8e:	681b      	ldr	r3, [r3, #0]
 8042f90:	430a      	orrs	r2, r1
 8042f92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8042f94:	687b      	ldr	r3, [r7, #4]
 8042f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8042f98:	f003 0310 	and.w	r3, r3, #16
 8042f9c:	2b00      	cmp	r3, #0
 8042f9e:	d00a      	beq.n	8042fb6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8042fa0:	687b      	ldr	r3, [r7, #4]
 8042fa2:	681b      	ldr	r3, [r3, #0]
 8042fa4:	689b      	ldr	r3, [r3, #8]
 8042fa6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8042faa:	687b      	ldr	r3, [r7, #4]
 8042fac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8042fae:	687b      	ldr	r3, [r7, #4]
 8042fb0:	681b      	ldr	r3, [r3, #0]
 8042fb2:	430a      	orrs	r2, r1
 8042fb4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8042fb6:	687b      	ldr	r3, [r7, #4]
 8042fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8042fba:	f003 0320 	and.w	r3, r3, #32
 8042fbe:	2b00      	cmp	r3, #0
 8042fc0:	d00a      	beq.n	8042fd8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8042fc2:	687b      	ldr	r3, [r7, #4]
 8042fc4:	681b      	ldr	r3, [r3, #0]
 8042fc6:	689b      	ldr	r3, [r3, #8]
 8042fc8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8042fcc:	687b      	ldr	r3, [r7, #4]
 8042fce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8042fd0:	687b      	ldr	r3, [r7, #4]
 8042fd2:	681b      	ldr	r3, [r3, #0]
 8042fd4:	430a      	orrs	r2, r1
 8042fd6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8042fd8:	687b      	ldr	r3, [r7, #4]
 8042fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8042fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8042fe0:	2b00      	cmp	r3, #0
 8042fe2:	d01a      	beq.n	804301a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8042fe4:	687b      	ldr	r3, [r7, #4]
 8042fe6:	681b      	ldr	r3, [r3, #0]
 8042fe8:	685b      	ldr	r3, [r3, #4]
 8042fea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8042fee:	687b      	ldr	r3, [r7, #4]
 8042ff0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8042ff2:	687b      	ldr	r3, [r7, #4]
 8042ff4:	681b      	ldr	r3, [r3, #0]
 8042ff6:	430a      	orrs	r2, r1
 8042ff8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8042ffa:	687b      	ldr	r3, [r7, #4]
 8042ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8042ffe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8043002:	d10a      	bne.n	804301a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8043004:	687b      	ldr	r3, [r7, #4]
 8043006:	681b      	ldr	r3, [r3, #0]
 8043008:	685b      	ldr	r3, [r3, #4]
 804300a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 804300e:	687b      	ldr	r3, [r7, #4]
 8043010:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8043012:	687b      	ldr	r3, [r7, #4]
 8043014:	681b      	ldr	r3, [r3, #0]
 8043016:	430a      	orrs	r2, r1
 8043018:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 804301a:	687b      	ldr	r3, [r7, #4]
 804301c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804301e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8043022:	2b00      	cmp	r3, #0
 8043024:	d00a      	beq.n	804303c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8043026:	687b      	ldr	r3, [r7, #4]
 8043028:	681b      	ldr	r3, [r3, #0]
 804302a:	685b      	ldr	r3, [r3, #4]
 804302c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8043030:	687b      	ldr	r3, [r7, #4]
 8043032:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8043034:	687b      	ldr	r3, [r7, #4]
 8043036:	681b      	ldr	r3, [r3, #0]
 8043038:	430a      	orrs	r2, r1
 804303a:	605a      	str	r2, [r3, #4]
  }
}
 804303c:	bf00      	nop
 804303e:	370c      	adds	r7, #12
 8043040:	46bd      	mov	sp, r7
 8043042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043046:	4770      	bx	lr

08043048 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8043048:	b580      	push	{r7, lr}
 804304a:	b086      	sub	sp, #24
 804304c:	af02      	add	r7, sp, #8
 804304e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8043050:	687b      	ldr	r3, [r7, #4]
 8043052:	2200      	movs	r2, #0
 8043054:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8043058:	f7fd fe66 	bl	8040d28 <HAL_GetTick>
 804305c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 804305e:	687b      	ldr	r3, [r7, #4]
 8043060:	681b      	ldr	r3, [r3, #0]
 8043062:	681b      	ldr	r3, [r3, #0]
 8043064:	f003 0308 	and.w	r3, r3, #8
 8043068:	2b08      	cmp	r3, #8
 804306a:	d10e      	bne.n	804308a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 804306c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8043070:	9300      	str	r3, [sp, #0]
 8043072:	68fb      	ldr	r3, [r7, #12]
 8043074:	2200      	movs	r2, #0
 8043076:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 804307a:	6878      	ldr	r0, [r7, #4]
 804307c:	f000 f82c 	bl	80430d8 <UART_WaitOnFlagUntilTimeout>
 8043080:	4603      	mov	r3, r0
 8043082:	2b00      	cmp	r3, #0
 8043084:	d001      	beq.n	804308a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8043086:	2303      	movs	r3, #3
 8043088:	e022      	b.n	80430d0 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 804308a:	687b      	ldr	r3, [r7, #4]
 804308c:	681b      	ldr	r3, [r3, #0]
 804308e:	681b      	ldr	r3, [r3, #0]
 8043090:	f003 0304 	and.w	r3, r3, #4
 8043094:	2b04      	cmp	r3, #4
 8043096:	d10e      	bne.n	80430b6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8043098:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 804309c:	9300      	str	r3, [sp, #0]
 804309e:	68fb      	ldr	r3, [r7, #12]
 80430a0:	2200      	movs	r2, #0
 80430a2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80430a6:	6878      	ldr	r0, [r7, #4]
 80430a8:	f000 f816 	bl	80430d8 <UART_WaitOnFlagUntilTimeout>
 80430ac:	4603      	mov	r3, r0
 80430ae:	2b00      	cmp	r3, #0
 80430b0:	d001      	beq.n	80430b6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80430b2:	2303      	movs	r3, #3
 80430b4:	e00c      	b.n	80430d0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80430b6:	687b      	ldr	r3, [r7, #4]
 80430b8:	2220      	movs	r2, #32
 80430ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80430be:	687b      	ldr	r3, [r7, #4]
 80430c0:	2220      	movs	r2, #32
 80430c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 80430c6:	687b      	ldr	r3, [r7, #4]
 80430c8:	2200      	movs	r2, #0
 80430ca:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80430ce:	2300      	movs	r3, #0
}
 80430d0:	4618      	mov	r0, r3
 80430d2:	3710      	adds	r7, #16
 80430d4:	46bd      	mov	sp, r7
 80430d6:	bd80      	pop	{r7, pc}

080430d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80430d8:	b580      	push	{r7, lr}
 80430da:	b084      	sub	sp, #16
 80430dc:	af00      	add	r7, sp, #0
 80430de:	60f8      	str	r0, [r7, #12]
 80430e0:	60b9      	str	r1, [r7, #8]
 80430e2:	603b      	str	r3, [r7, #0]
 80430e4:	4613      	mov	r3, r2
 80430e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80430e8:	e062      	b.n	80431b0 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80430ea:	69bb      	ldr	r3, [r7, #24]
 80430ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80430f0:	d05e      	beq.n	80431b0 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80430f2:	f7fd fe19 	bl	8040d28 <HAL_GetTick>
 80430f6:	4602      	mov	r2, r0
 80430f8:	683b      	ldr	r3, [r7, #0]
 80430fa:	1ad3      	subs	r3, r2, r3
 80430fc:	69ba      	ldr	r2, [r7, #24]
 80430fe:	429a      	cmp	r2, r3
 8043100:	d302      	bcc.n	8043108 <UART_WaitOnFlagUntilTimeout+0x30>
 8043102:	69bb      	ldr	r3, [r7, #24]
 8043104:	2b00      	cmp	r3, #0
 8043106:	d11d      	bne.n	8043144 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8043108:	68fb      	ldr	r3, [r7, #12]
 804310a:	681b      	ldr	r3, [r3, #0]
 804310c:	681a      	ldr	r2, [r3, #0]
 804310e:	68fb      	ldr	r3, [r7, #12]
 8043110:	681b      	ldr	r3, [r3, #0]
 8043112:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8043116:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8043118:	68fb      	ldr	r3, [r7, #12]
 804311a:	681b      	ldr	r3, [r3, #0]
 804311c:	689a      	ldr	r2, [r3, #8]
 804311e:	68fb      	ldr	r3, [r7, #12]
 8043120:	681b      	ldr	r3, [r3, #0]
 8043122:	f022 0201 	bic.w	r2, r2, #1
 8043126:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8043128:	68fb      	ldr	r3, [r7, #12]
 804312a:	2220      	movs	r2, #32
 804312c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8043130:	68fb      	ldr	r3, [r7, #12]
 8043132:	2220      	movs	r2, #32
 8043134:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8043138:	68fb      	ldr	r3, [r7, #12]
 804313a:	2200      	movs	r2, #0
 804313c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8043140:	2303      	movs	r3, #3
 8043142:	e045      	b.n	80431d0 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8043144:	68fb      	ldr	r3, [r7, #12]
 8043146:	681b      	ldr	r3, [r3, #0]
 8043148:	681b      	ldr	r3, [r3, #0]
 804314a:	f003 0304 	and.w	r3, r3, #4
 804314e:	2b00      	cmp	r3, #0
 8043150:	d02e      	beq.n	80431b0 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8043152:	68fb      	ldr	r3, [r7, #12]
 8043154:	681b      	ldr	r3, [r3, #0]
 8043156:	69db      	ldr	r3, [r3, #28]
 8043158:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 804315c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8043160:	d126      	bne.n	80431b0 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8043162:	68fb      	ldr	r3, [r7, #12]
 8043164:	681b      	ldr	r3, [r3, #0]
 8043166:	f44f 6200 	mov.w	r2, #2048	; 0x800
 804316a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 804316c:	68fb      	ldr	r3, [r7, #12]
 804316e:	681b      	ldr	r3, [r3, #0]
 8043170:	681a      	ldr	r2, [r3, #0]
 8043172:	68fb      	ldr	r3, [r7, #12]
 8043174:	681b      	ldr	r3, [r3, #0]
 8043176:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 804317a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 804317c:	68fb      	ldr	r3, [r7, #12]
 804317e:	681b      	ldr	r3, [r3, #0]
 8043180:	689a      	ldr	r2, [r3, #8]
 8043182:	68fb      	ldr	r3, [r7, #12]
 8043184:	681b      	ldr	r3, [r3, #0]
 8043186:	f022 0201 	bic.w	r2, r2, #1
 804318a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 804318c:	68fb      	ldr	r3, [r7, #12]
 804318e:	2220      	movs	r2, #32
 8043190:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8043194:	68fb      	ldr	r3, [r7, #12]
 8043196:	2220      	movs	r2, #32
 8043198:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 804319c:	68fb      	ldr	r3, [r7, #12]
 804319e:	2220      	movs	r2, #32
 80431a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80431a4:	68fb      	ldr	r3, [r7, #12]
 80431a6:	2200      	movs	r2, #0
 80431a8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 80431ac:	2303      	movs	r3, #3
 80431ae:	e00f      	b.n	80431d0 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80431b0:	68fb      	ldr	r3, [r7, #12]
 80431b2:	681b      	ldr	r3, [r3, #0]
 80431b4:	69da      	ldr	r2, [r3, #28]
 80431b6:	68bb      	ldr	r3, [r7, #8]
 80431b8:	4013      	ands	r3, r2
 80431ba:	68ba      	ldr	r2, [r7, #8]
 80431bc:	429a      	cmp	r2, r3
 80431be:	bf0c      	ite	eq
 80431c0:	2301      	moveq	r3, #1
 80431c2:	2300      	movne	r3, #0
 80431c4:	b2db      	uxtb	r3, r3
 80431c6:	461a      	mov	r2, r3
 80431c8:	79fb      	ldrb	r3, [r7, #7]
 80431ca:	429a      	cmp	r2, r3
 80431cc:	d08d      	beq.n	80430ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80431ce:	2300      	movs	r3, #0
}
 80431d0:	4618      	mov	r0, r3
 80431d2:	3710      	adds	r7, #16
 80431d4:	46bd      	mov	sp, r7
 80431d6:	bd80      	pop	{r7, pc}

080431d8 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80431d8:	b480      	push	{r7}
 80431da:	b083      	sub	sp, #12
 80431dc:	af00      	add	r7, sp, #0
 80431de:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80431e0:	687b      	ldr	r3, [r7, #4]
 80431e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80431e6:	2b21      	cmp	r3, #33	; 0x21
 80431e8:	d12a      	bne.n	8043240 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 80431ea:	687b      	ldr	r3, [r7, #4]
 80431ec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80431f0:	b29b      	uxth	r3, r3
 80431f2:	2b00      	cmp	r3, #0
 80431f4:	d110      	bne.n	8043218 <UART_TxISR_8BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80431f6:	687b      	ldr	r3, [r7, #4]
 80431f8:	681b      	ldr	r3, [r3, #0]
 80431fa:	681a      	ldr	r2, [r3, #0]
 80431fc:	687b      	ldr	r3, [r7, #4]
 80431fe:	681b      	ldr	r3, [r3, #0]
 8043200:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8043204:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8043206:	687b      	ldr	r3, [r7, #4]
 8043208:	681b      	ldr	r3, [r3, #0]
 804320a:	681a      	ldr	r2, [r3, #0]
 804320c:	687b      	ldr	r3, [r7, #4]
 804320e:	681b      	ldr	r3, [r3, #0]
 8043210:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8043214:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8043216:	e013      	b.n	8043240 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8043218:	687b      	ldr	r3, [r7, #4]
 804321a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 804321c:	781a      	ldrb	r2, [r3, #0]
 804321e:	687b      	ldr	r3, [r7, #4]
 8043220:	681b      	ldr	r3, [r3, #0]
 8043222:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8043224:	687b      	ldr	r3, [r7, #4]
 8043226:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8043228:	1c5a      	adds	r2, r3, #1
 804322a:	687b      	ldr	r3, [r7, #4]
 804322c:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 804322e:	687b      	ldr	r3, [r7, #4]
 8043230:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8043234:	b29b      	uxth	r3, r3
 8043236:	3b01      	subs	r3, #1
 8043238:	b29a      	uxth	r2, r3
 804323a:	687b      	ldr	r3, [r7, #4]
 804323c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8043240:	bf00      	nop
 8043242:	370c      	adds	r7, #12
 8043244:	46bd      	mov	sp, r7
 8043246:	f85d 7b04 	ldr.w	r7, [sp], #4
 804324a:	4770      	bx	lr

0804324c <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 804324c:	b480      	push	{r7}
 804324e:	b085      	sub	sp, #20
 8043250:	af00      	add	r7, sp, #0
 8043252:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8043254:	687b      	ldr	r3, [r7, #4]
 8043256:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 804325a:	2b21      	cmp	r3, #33	; 0x21
 804325c:	d12f      	bne.n	80432be <UART_TxISR_16BIT+0x72>
  {
    if (huart->TxXferCount == 0U)
 804325e:	687b      	ldr	r3, [r7, #4]
 8043260:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8043264:	b29b      	uxth	r3, r3
 8043266:	2b00      	cmp	r3, #0
 8043268:	d110      	bne.n	804328c <UART_TxISR_16BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 804326a:	687b      	ldr	r3, [r7, #4]
 804326c:	681b      	ldr	r3, [r3, #0]
 804326e:	681a      	ldr	r2, [r3, #0]
 8043270:	687b      	ldr	r3, [r7, #4]
 8043272:	681b      	ldr	r3, [r3, #0]
 8043274:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8043278:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 804327a:	687b      	ldr	r3, [r7, #4]
 804327c:	681b      	ldr	r3, [r3, #0]
 804327e:	681a      	ldr	r2, [r3, #0]
 8043280:	687b      	ldr	r3, [r7, #4]
 8043282:	681b      	ldr	r3, [r3, #0]
 8043284:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8043288:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 804328a:	e018      	b.n	80432be <UART_TxISR_16BIT+0x72>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 804328c:	687b      	ldr	r3, [r7, #4]
 804328e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8043290:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8043292:	68fb      	ldr	r3, [r7, #12]
 8043294:	881b      	ldrh	r3, [r3, #0]
 8043296:	461a      	mov	r2, r3
 8043298:	687b      	ldr	r3, [r7, #4]
 804329a:	681b      	ldr	r3, [r3, #0]
 804329c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80432a0:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80432a2:	687b      	ldr	r3, [r7, #4]
 80432a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80432a6:	1c9a      	adds	r2, r3, #2
 80432a8:	687b      	ldr	r3, [r7, #4]
 80432aa:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80432ac:	687b      	ldr	r3, [r7, #4]
 80432ae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80432b2:	b29b      	uxth	r3, r3
 80432b4:	3b01      	subs	r3, #1
 80432b6:	b29a      	uxth	r2, r3
 80432b8:	687b      	ldr	r3, [r7, #4]
 80432ba:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 80432be:	bf00      	nop
 80432c0:	3714      	adds	r7, #20
 80432c2:	46bd      	mov	sp, r7
 80432c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80432c8:	4770      	bx	lr

080432ca <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80432ca:	b480      	push	{r7}
 80432cc:	b085      	sub	sp, #20
 80432ce:	af00      	add	r7, sp, #0
 80432d0:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80432d2:	687b      	ldr	r3, [r7, #4]
 80432d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80432d8:	2b21      	cmp	r3, #33	; 0x21
 80432da:	d13d      	bne.n	8043358 <UART_TxISR_8BIT_FIFOEN+0x8e>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80432dc:	687b      	ldr	r3, [r7, #4]
 80432de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80432e2:	81fb      	strh	r3, [r7, #14]
 80432e4:	e035      	b.n	8043352 <UART_TxISR_8BIT_FIFOEN+0x88>
    {
      if (huart->TxXferCount == 0U)
 80432e6:	687b      	ldr	r3, [r7, #4]
 80432e8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80432ec:	b29b      	uxth	r3, r3
 80432ee:	2b00      	cmp	r3, #0
 80432f0:	d111      	bne.n	8043316 <UART_TxISR_8BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80432f2:	687b      	ldr	r3, [r7, #4]
 80432f4:	681b      	ldr	r3, [r3, #0]
 80432f6:	689a      	ldr	r2, [r3, #8]
 80432f8:	687b      	ldr	r3, [r7, #4]
 80432fa:	681b      	ldr	r3, [r3, #0]
 80432fc:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8043300:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8043302:	687b      	ldr	r3, [r7, #4]
 8043304:	681b      	ldr	r3, [r3, #0]
 8043306:	681a      	ldr	r2, [r3, #0]
 8043308:	687b      	ldr	r3, [r7, #4]
 804330a:	681b      	ldr	r3, [r3, #0]
 804330c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8043310:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 8043312:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 8043314:	e020      	b.n	8043358 <UART_TxISR_8BIT_FIFOEN+0x8e>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8043316:	687b      	ldr	r3, [r7, #4]
 8043318:	681b      	ldr	r3, [r3, #0]
 804331a:	69db      	ldr	r3, [r3, #28]
 804331c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8043320:	2b00      	cmp	r3, #0
 8043322:	d013      	beq.n	804334c <UART_TxISR_8BIT_FIFOEN+0x82>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8043324:	687b      	ldr	r3, [r7, #4]
 8043326:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8043328:	781a      	ldrb	r2, [r3, #0]
 804332a:	687b      	ldr	r3, [r7, #4]
 804332c:	681b      	ldr	r3, [r3, #0]
 804332e:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8043330:	687b      	ldr	r3, [r7, #4]
 8043332:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8043334:	1c5a      	adds	r2, r3, #1
 8043336:	687b      	ldr	r3, [r7, #4]
 8043338:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 804333a:	687b      	ldr	r3, [r7, #4]
 804333c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8043340:	b29b      	uxth	r3, r3
 8043342:	3b01      	subs	r3, #1
 8043344:	b29a      	uxth	r2, r3
 8043346:	687b      	ldr	r3, [r7, #4]
 8043348:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 804334c:	89fb      	ldrh	r3, [r7, #14]
 804334e:	3b01      	subs	r3, #1
 8043350:	81fb      	strh	r3, [r7, #14]
 8043352:	89fb      	ldrh	r3, [r7, #14]
 8043354:	2b00      	cmp	r3, #0
 8043356:	d1c6      	bne.n	80432e6 <UART_TxISR_8BIT_FIFOEN+0x1c>
}
 8043358:	bf00      	nop
 804335a:	3714      	adds	r7, #20
 804335c:	46bd      	mov	sp, r7
 804335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043362:	4770      	bx	lr

08043364 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8043364:	b480      	push	{r7}
 8043366:	b085      	sub	sp, #20
 8043368:	af00      	add	r7, sp, #0
 804336a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 804336c:	687b      	ldr	r3, [r7, #4]
 804336e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8043372:	2b21      	cmp	r3, #33	; 0x21
 8043374:	d142      	bne.n	80433fc <UART_TxISR_16BIT_FIFOEN+0x98>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8043376:	687b      	ldr	r3, [r7, #4]
 8043378:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 804337c:	81fb      	strh	r3, [r7, #14]
 804337e:	e03a      	b.n	80433f6 <UART_TxISR_16BIT_FIFOEN+0x92>
    {
      if (huart->TxXferCount == 0U)
 8043380:	687b      	ldr	r3, [r7, #4]
 8043382:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8043386:	b29b      	uxth	r3, r3
 8043388:	2b00      	cmp	r3, #0
 804338a:	d111      	bne.n	80433b0 <UART_TxISR_16BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 804338c:	687b      	ldr	r3, [r7, #4]
 804338e:	681b      	ldr	r3, [r3, #0]
 8043390:	689a      	ldr	r2, [r3, #8]
 8043392:	687b      	ldr	r3, [r7, #4]
 8043394:	681b      	ldr	r3, [r3, #0]
 8043396:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 804339a:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 804339c:	687b      	ldr	r3, [r7, #4]
 804339e:	681b      	ldr	r3, [r3, #0]
 80433a0:	681a      	ldr	r2, [r3, #0]
 80433a2:	687b      	ldr	r3, [r7, #4]
 80433a4:	681b      	ldr	r3, [r3, #0]
 80433a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80433aa:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 80433ac:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 80433ae:	e025      	b.n	80433fc <UART_TxISR_16BIT_FIFOEN+0x98>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80433b0:	687b      	ldr	r3, [r7, #4]
 80433b2:	681b      	ldr	r3, [r3, #0]
 80433b4:	69db      	ldr	r3, [r3, #28]
 80433b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80433ba:	2b00      	cmp	r3, #0
 80433bc:	d018      	beq.n	80433f0 <UART_TxISR_16BIT_FIFOEN+0x8c>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 80433be:	687b      	ldr	r3, [r7, #4]
 80433c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80433c2:	60bb      	str	r3, [r7, #8]
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80433c4:	68bb      	ldr	r3, [r7, #8]
 80433c6:	881b      	ldrh	r3, [r3, #0]
 80433c8:	461a      	mov	r2, r3
 80433ca:	687b      	ldr	r3, [r7, #4]
 80433cc:	681b      	ldr	r3, [r3, #0]
 80433ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80433d2:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80433d4:	687b      	ldr	r3, [r7, #4]
 80433d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80433d8:	1c9a      	adds	r2, r3, #2
 80433da:	687b      	ldr	r3, [r7, #4]
 80433dc:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 80433de:	687b      	ldr	r3, [r7, #4]
 80433e0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80433e4:	b29b      	uxth	r3, r3
 80433e6:	3b01      	subs	r3, #1
 80433e8:	b29a      	uxth	r2, r3
 80433ea:	687b      	ldr	r3, [r7, #4]
 80433ec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80433f0:	89fb      	ldrh	r3, [r7, #14]
 80433f2:	3b01      	subs	r3, #1
 80433f4:	81fb      	strh	r3, [r7, #14]
 80433f6:	89fb      	ldrh	r3, [r7, #14]
 80433f8:	2b00      	cmp	r3, #0
 80433fa:	d1c1      	bne.n	8043380 <UART_TxISR_16BIT_FIFOEN+0x1c>
}
 80433fc:	bf00      	nop
 80433fe:	3714      	adds	r7, #20
 8043400:	46bd      	mov	sp, r7
 8043402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043406:	4770      	bx	lr

08043408 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8043408:	b480      	push	{r7}
 804340a:	b085      	sub	sp, #20
 804340c:	af00      	add	r7, sp, #0
 804340e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8043410:	687b      	ldr	r3, [r7, #4]
 8043412:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8043416:	2b01      	cmp	r3, #1
 8043418:	d101      	bne.n	804341e <HAL_UARTEx_DisableFifoMode+0x16>
 804341a:	2302      	movs	r3, #2
 804341c:	e027      	b.n	804346e <HAL_UARTEx_DisableFifoMode+0x66>
 804341e:	687b      	ldr	r3, [r7, #4]
 8043420:	2201      	movs	r2, #1
 8043422:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8043426:	687b      	ldr	r3, [r7, #4]
 8043428:	2224      	movs	r2, #36	; 0x24
 804342a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 804342e:	687b      	ldr	r3, [r7, #4]
 8043430:	681b      	ldr	r3, [r3, #0]
 8043432:	681b      	ldr	r3, [r3, #0]
 8043434:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8043436:	687b      	ldr	r3, [r7, #4]
 8043438:	681b      	ldr	r3, [r3, #0]
 804343a:	681a      	ldr	r2, [r3, #0]
 804343c:	687b      	ldr	r3, [r7, #4]
 804343e:	681b      	ldr	r3, [r3, #0]
 8043440:	f022 0201 	bic.w	r2, r2, #1
 8043444:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8043446:	68fb      	ldr	r3, [r7, #12]
 8043448:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 804344c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 804344e:	687b      	ldr	r3, [r7, #4]
 8043450:	2200      	movs	r2, #0
 8043452:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8043454:	687b      	ldr	r3, [r7, #4]
 8043456:	681b      	ldr	r3, [r3, #0]
 8043458:	68fa      	ldr	r2, [r7, #12]
 804345a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 804345c:	687b      	ldr	r3, [r7, #4]
 804345e:	2220      	movs	r2, #32
 8043460:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8043464:	687b      	ldr	r3, [r7, #4]
 8043466:	2200      	movs	r2, #0
 8043468:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 804346c:	2300      	movs	r3, #0
}
 804346e:	4618      	mov	r0, r3
 8043470:	3714      	adds	r7, #20
 8043472:	46bd      	mov	sp, r7
 8043474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043478:	4770      	bx	lr

0804347a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 804347a:	b580      	push	{r7, lr}
 804347c:	b084      	sub	sp, #16
 804347e:	af00      	add	r7, sp, #0
 8043480:	6078      	str	r0, [r7, #4]
 8043482:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8043484:	687b      	ldr	r3, [r7, #4]
 8043486:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 804348a:	2b01      	cmp	r3, #1
 804348c:	d101      	bne.n	8043492 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 804348e:	2302      	movs	r3, #2
 8043490:	e02d      	b.n	80434ee <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8043492:	687b      	ldr	r3, [r7, #4]
 8043494:	2201      	movs	r2, #1
 8043496:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 804349a:	687b      	ldr	r3, [r7, #4]
 804349c:	2224      	movs	r2, #36	; 0x24
 804349e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80434a2:	687b      	ldr	r3, [r7, #4]
 80434a4:	681b      	ldr	r3, [r3, #0]
 80434a6:	681b      	ldr	r3, [r3, #0]
 80434a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80434aa:	687b      	ldr	r3, [r7, #4]
 80434ac:	681b      	ldr	r3, [r3, #0]
 80434ae:	681a      	ldr	r2, [r3, #0]
 80434b0:	687b      	ldr	r3, [r7, #4]
 80434b2:	681b      	ldr	r3, [r3, #0]
 80434b4:	f022 0201 	bic.w	r2, r2, #1
 80434b8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80434ba:	687b      	ldr	r3, [r7, #4]
 80434bc:	681b      	ldr	r3, [r3, #0]
 80434be:	689b      	ldr	r3, [r3, #8]
 80434c0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80434c4:	687b      	ldr	r3, [r7, #4]
 80434c6:	681b      	ldr	r3, [r3, #0]
 80434c8:	683a      	ldr	r2, [r7, #0]
 80434ca:	430a      	orrs	r2, r1
 80434cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80434ce:	6878      	ldr	r0, [r7, #4]
 80434d0:	f000 f850 	bl	8043574 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80434d4:	687b      	ldr	r3, [r7, #4]
 80434d6:	681b      	ldr	r3, [r3, #0]
 80434d8:	68fa      	ldr	r2, [r7, #12]
 80434da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80434dc:	687b      	ldr	r3, [r7, #4]
 80434de:	2220      	movs	r2, #32
 80434e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80434e4:	687b      	ldr	r3, [r7, #4]
 80434e6:	2200      	movs	r2, #0
 80434e8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80434ec:	2300      	movs	r3, #0
}
 80434ee:	4618      	mov	r0, r3
 80434f0:	3710      	adds	r7, #16
 80434f2:	46bd      	mov	sp, r7
 80434f4:	bd80      	pop	{r7, pc}

080434f6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80434f6:	b580      	push	{r7, lr}
 80434f8:	b084      	sub	sp, #16
 80434fa:	af00      	add	r7, sp, #0
 80434fc:	6078      	str	r0, [r7, #4]
 80434fe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8043500:	687b      	ldr	r3, [r7, #4]
 8043502:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8043506:	2b01      	cmp	r3, #1
 8043508:	d101      	bne.n	804350e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 804350a:	2302      	movs	r3, #2
 804350c:	e02d      	b.n	804356a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 804350e:	687b      	ldr	r3, [r7, #4]
 8043510:	2201      	movs	r2, #1
 8043512:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8043516:	687b      	ldr	r3, [r7, #4]
 8043518:	2224      	movs	r2, #36	; 0x24
 804351a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 804351e:	687b      	ldr	r3, [r7, #4]
 8043520:	681b      	ldr	r3, [r3, #0]
 8043522:	681b      	ldr	r3, [r3, #0]
 8043524:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8043526:	687b      	ldr	r3, [r7, #4]
 8043528:	681b      	ldr	r3, [r3, #0]
 804352a:	681a      	ldr	r2, [r3, #0]
 804352c:	687b      	ldr	r3, [r7, #4]
 804352e:	681b      	ldr	r3, [r3, #0]
 8043530:	f022 0201 	bic.w	r2, r2, #1
 8043534:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8043536:	687b      	ldr	r3, [r7, #4]
 8043538:	681b      	ldr	r3, [r3, #0]
 804353a:	689b      	ldr	r3, [r3, #8]
 804353c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8043540:	687b      	ldr	r3, [r7, #4]
 8043542:	681b      	ldr	r3, [r3, #0]
 8043544:	683a      	ldr	r2, [r7, #0]
 8043546:	430a      	orrs	r2, r1
 8043548:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 804354a:	6878      	ldr	r0, [r7, #4]
 804354c:	f000 f812 	bl	8043574 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8043550:	687b      	ldr	r3, [r7, #4]
 8043552:	681b      	ldr	r3, [r3, #0]
 8043554:	68fa      	ldr	r2, [r7, #12]
 8043556:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8043558:	687b      	ldr	r3, [r7, #4]
 804355a:	2220      	movs	r2, #32
 804355c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8043560:	687b      	ldr	r3, [r7, #4]
 8043562:	2200      	movs	r2, #0
 8043564:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8043568:	2300      	movs	r3, #0
}
 804356a:	4618      	mov	r0, r3
 804356c:	3710      	adds	r7, #16
 804356e:	46bd      	mov	sp, r7
 8043570:	bd80      	pop	{r7, pc}
	...

08043574 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8043574:	b480      	push	{r7}
 8043576:	b089      	sub	sp, #36	; 0x24
 8043578:	af00      	add	r7, sp, #0
 804357a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 804357c:	4a2d      	ldr	r2, [pc, #180]	; (8043634 <UARTEx_SetNbDataToProcess+0xc0>)
 804357e:	f107 0314 	add.w	r3, r7, #20
 8043582:	e892 0003 	ldmia.w	r2, {r0, r1}
 8043586:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 804358a:	4a2b      	ldr	r2, [pc, #172]	; (8043638 <UARTEx_SetNbDataToProcess+0xc4>)
 804358c:	f107 030c 	add.w	r3, r7, #12
 8043590:	e892 0003 	ldmia.w	r2, {r0, r1}
 8043594:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8043598:	687b      	ldr	r3, [r7, #4]
 804359a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 804359c:	2b00      	cmp	r3, #0
 804359e:	d108      	bne.n	80435b2 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 80435a0:	687b      	ldr	r3, [r7, #4]
 80435a2:	2201      	movs	r2, #1
 80435a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80435a8:	687b      	ldr	r3, [r7, #4]
 80435aa:	2201      	movs	r2, #1
 80435ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80435b0:	e039      	b.n	8043626 <UARTEx_SetNbDataToProcess+0xb2>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80435b2:	2308      	movs	r3, #8
 80435b4:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80435b6:	2308      	movs	r3, #8
 80435b8:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80435ba:	687b      	ldr	r3, [r7, #4]
 80435bc:	681b      	ldr	r3, [r3, #0]
 80435be:	689b      	ldr	r3, [r3, #8]
 80435c0:	0e5b      	lsrs	r3, r3, #25
 80435c2:	b2db      	uxtb	r3, r3
 80435c4:	f003 0307 	and.w	r3, r3, #7
 80435c8:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80435ca:	687b      	ldr	r3, [r7, #4]
 80435cc:	681b      	ldr	r3, [r3, #0]
 80435ce:	689b      	ldr	r3, [r3, #8]
 80435d0:	0f5b      	lsrs	r3, r3, #29
 80435d2:	b2db      	uxtb	r3, r3
 80435d4:	f003 0307 	and.w	r3, r3, #7
 80435d8:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80435da:	7fbb      	ldrb	r3, [r7, #30]
 80435dc:	7f3a      	ldrb	r2, [r7, #28]
 80435de:	3220      	adds	r2, #32
 80435e0:	443a      	add	r2, r7
 80435e2:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80435e6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80435ea:	7f3a      	ldrb	r2, [r7, #28]
 80435ec:	3220      	adds	r2, #32
 80435ee:	443a      	add	r2, r7
 80435f0:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80435f4:	fb93 f3f2 	sdiv	r3, r3, r2
 80435f8:	b29a      	uxth	r2, r3
 80435fa:	687b      	ldr	r3, [r7, #4]
 80435fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8043600:	7ffb      	ldrb	r3, [r7, #31]
 8043602:	7f7a      	ldrb	r2, [r7, #29]
 8043604:	3220      	adds	r2, #32
 8043606:	443a      	add	r2, r7
 8043608:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 804360c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8043610:	7f7a      	ldrb	r2, [r7, #29]
 8043612:	3220      	adds	r2, #32
 8043614:	443a      	add	r2, r7
 8043616:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 804361a:	fb93 f3f2 	sdiv	r3, r3, r2
 804361e:	b29a      	uxth	r2, r3
 8043620:	687b      	ldr	r3, [r7, #4]
 8043622:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8043626:	bf00      	nop
 8043628:	3724      	adds	r7, #36	; 0x24
 804362a:	46bd      	mov	sp, r7
 804362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043630:	4770      	bx	lr
 8043632:	bf00      	nop
 8043634:	080436c8 	.word	0x080436c8
 8043638:	080436d0 	.word	0x080436d0

0804363c <__libc_init_array>:
 804363c:	b570      	push	{r4, r5, r6, lr}
 804363e:	4d0d      	ldr	r5, [pc, #52]	; (8043674 <__libc_init_array+0x38>)
 8043640:	4c0d      	ldr	r4, [pc, #52]	; (8043678 <__libc_init_array+0x3c>)
 8043642:	1b64      	subs	r4, r4, r5
 8043644:	10a4      	asrs	r4, r4, #2
 8043646:	2600      	movs	r6, #0
 8043648:	42a6      	cmp	r6, r4
 804364a:	d109      	bne.n	8043660 <__libc_init_array+0x24>
 804364c:	4d0b      	ldr	r5, [pc, #44]	; (804367c <__libc_init_array+0x40>)
 804364e:	4c0c      	ldr	r4, [pc, #48]	; (8043680 <__libc_init_array+0x44>)
 8043650:	f000 f820 	bl	8043694 <_init>
 8043654:	1b64      	subs	r4, r4, r5
 8043656:	10a4      	asrs	r4, r4, #2
 8043658:	2600      	movs	r6, #0
 804365a:	42a6      	cmp	r6, r4
 804365c:	d105      	bne.n	804366a <__libc_init_array+0x2e>
 804365e:	bd70      	pop	{r4, r5, r6, pc}
 8043660:	f855 3b04 	ldr.w	r3, [r5], #4
 8043664:	4798      	blx	r3
 8043666:	3601      	adds	r6, #1
 8043668:	e7ee      	b.n	8043648 <__libc_init_array+0xc>
 804366a:	f855 3b04 	ldr.w	r3, [r5], #4
 804366e:	4798      	blx	r3
 8043670:	3601      	adds	r6, #1
 8043672:	e7f2      	b.n	804365a <__libc_init_array+0x1e>
 8043674:	08043710 	.word	0x08043710
 8043678:	08043710 	.word	0x08043710
 804367c:	08043710 	.word	0x08043710
 8043680:	08043714 	.word	0x08043714

08043684 <memset>:
 8043684:	4402      	add	r2, r0
 8043686:	4603      	mov	r3, r0
 8043688:	4293      	cmp	r3, r2
 804368a:	d100      	bne.n	804368e <memset+0xa>
 804368c:	4770      	bx	lr
 804368e:	f803 1b01 	strb.w	r1, [r3], #1
 8043692:	e7f9      	b.n	8043688 <memset+0x4>

08043694 <_init>:
 8043694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8043696:	bf00      	nop
 8043698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 804369a:	bc08      	pop	{r3}
 804369c:	469e      	mov	lr, r3
 804369e:	4770      	bx	lr

080436a0 <_fini>:
 80436a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80436a2:	bf00      	nop
 80436a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80436a6:	bc08      	pop	{r3}
 80436a8:	469e      	mov	lr, r3
 80436aa:	4770      	bx	lr
