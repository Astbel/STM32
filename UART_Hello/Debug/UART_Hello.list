
UART_Hello.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08040000  08040000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047f4  080401d8  080401d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  080449cc  080449cc  000149cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08044ae4  08044ae4  0002002c  2**0
                  CONTENTS
  4 .ARM          00000008  08044ae4  08044ae4  00014ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08044aec  08044aec  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08044aec  08044aec  00014aec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08044af0  08044af0  00014af0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08044af4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  2000002c  08044b20  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000158  08044b20  00020158  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011f97  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002af8  00000000  00000000  00031ff3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011a8  00000000  00000000  00034af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001070  00000000  00000000  00035c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000273df  00000000  00000000  00036d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000132e9  00000000  00000000  0005e0e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fbe4f  00000000  00000000  000713d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016d21f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a30  00000000  00000000  0016d270  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080401d8 <__do_global_dtors_aux>:
 80401d8:	b510      	push	{r4, lr}
 80401da:	4c05      	ldr	r4, [pc, #20]	; (80401f0 <__do_global_dtors_aux+0x18>)
 80401dc:	7823      	ldrb	r3, [r4, #0]
 80401de:	b933      	cbnz	r3, 80401ee <__do_global_dtors_aux+0x16>
 80401e0:	4b04      	ldr	r3, [pc, #16]	; (80401f4 <__do_global_dtors_aux+0x1c>)
 80401e2:	b113      	cbz	r3, 80401ea <__do_global_dtors_aux+0x12>
 80401e4:	4804      	ldr	r0, [pc, #16]	; (80401f8 <__do_global_dtors_aux+0x20>)
 80401e6:	f3af 8000 	nop.w
 80401ea:	2301      	movs	r3, #1
 80401ec:	7023      	strb	r3, [r4, #0]
 80401ee:	bd10      	pop	{r4, pc}
 80401f0:	2000002c 	.word	0x2000002c
 80401f4:	00000000 	.word	0x00000000
 80401f8:	080449b4 	.word	0x080449b4

080401fc <frame_dummy>:
 80401fc:	b508      	push	{r3, lr}
 80401fe:	4b03      	ldr	r3, [pc, #12]	; (804020c <frame_dummy+0x10>)
 8040200:	b11b      	cbz	r3, 804020a <frame_dummy+0xe>
 8040202:	4903      	ldr	r1, [pc, #12]	; (8040210 <frame_dummy+0x14>)
 8040204:	4803      	ldr	r0, [pc, #12]	; (8040214 <frame_dummy+0x18>)
 8040206:	f3af 8000 	nop.w
 804020a:	bd08      	pop	{r3, pc}
 804020c:	00000000 	.word	0x00000000
 8040210:	20000030 	.word	0x20000030
 8040214:	080449b4 	.word	0x080449b4

08040218 <strlen>:
 8040218:	4603      	mov	r3, r0
 804021a:	f813 2b01 	ldrb.w	r2, [r3], #1
 804021e:	2a00      	cmp	r2, #0
 8040220:	d1fb      	bne.n	804021a <strlen+0x2>
 8040222:	1a18      	subs	r0, r3, r0
 8040224:	3801      	subs	r0, #1
 8040226:	4770      	bx	lr

08040228 <__aeabi_uldivmod>:
 8040228:	b953      	cbnz	r3, 8040240 <__aeabi_uldivmod+0x18>
 804022a:	b94a      	cbnz	r2, 8040240 <__aeabi_uldivmod+0x18>
 804022c:	2900      	cmp	r1, #0
 804022e:	bf08      	it	eq
 8040230:	2800      	cmpeq	r0, #0
 8040232:	bf1c      	itt	ne
 8040234:	f04f 31ff 	movne.w	r1, #4294967295
 8040238:	f04f 30ff 	movne.w	r0, #4294967295
 804023c:	f000 b974 	b.w	8040528 <__aeabi_idiv0>
 8040240:	f1ad 0c08 	sub.w	ip, sp, #8
 8040244:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8040248:	f000 f806 	bl	8040258 <__udivmoddi4>
 804024c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8040250:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8040254:	b004      	add	sp, #16
 8040256:	4770      	bx	lr

08040258 <__udivmoddi4>:
 8040258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 804025c:	9d08      	ldr	r5, [sp, #32]
 804025e:	4604      	mov	r4, r0
 8040260:	468e      	mov	lr, r1
 8040262:	2b00      	cmp	r3, #0
 8040264:	d14d      	bne.n	8040302 <__udivmoddi4+0xaa>
 8040266:	428a      	cmp	r2, r1
 8040268:	4694      	mov	ip, r2
 804026a:	d969      	bls.n	8040340 <__udivmoddi4+0xe8>
 804026c:	fab2 f282 	clz	r2, r2
 8040270:	b152      	cbz	r2, 8040288 <__udivmoddi4+0x30>
 8040272:	fa01 f302 	lsl.w	r3, r1, r2
 8040276:	f1c2 0120 	rsb	r1, r2, #32
 804027a:	fa20 f101 	lsr.w	r1, r0, r1
 804027e:	fa0c fc02 	lsl.w	ip, ip, r2
 8040282:	ea41 0e03 	orr.w	lr, r1, r3
 8040286:	4094      	lsls	r4, r2
 8040288:	ea4f 481c 	mov.w	r8, ip, lsr #16
 804028c:	0c21      	lsrs	r1, r4, #16
 804028e:	fbbe f6f8 	udiv	r6, lr, r8
 8040292:	fa1f f78c 	uxth.w	r7, ip
 8040296:	fb08 e316 	mls	r3, r8, r6, lr
 804029a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 804029e:	fb06 f107 	mul.w	r1, r6, r7
 80402a2:	4299      	cmp	r1, r3
 80402a4:	d90a      	bls.n	80402bc <__udivmoddi4+0x64>
 80402a6:	eb1c 0303 	adds.w	r3, ip, r3
 80402aa:	f106 30ff 	add.w	r0, r6, #4294967295
 80402ae:	f080 811f 	bcs.w	80404f0 <__udivmoddi4+0x298>
 80402b2:	4299      	cmp	r1, r3
 80402b4:	f240 811c 	bls.w	80404f0 <__udivmoddi4+0x298>
 80402b8:	3e02      	subs	r6, #2
 80402ba:	4463      	add	r3, ip
 80402bc:	1a5b      	subs	r3, r3, r1
 80402be:	b2a4      	uxth	r4, r4
 80402c0:	fbb3 f0f8 	udiv	r0, r3, r8
 80402c4:	fb08 3310 	mls	r3, r8, r0, r3
 80402c8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80402cc:	fb00 f707 	mul.w	r7, r0, r7
 80402d0:	42a7      	cmp	r7, r4
 80402d2:	d90a      	bls.n	80402ea <__udivmoddi4+0x92>
 80402d4:	eb1c 0404 	adds.w	r4, ip, r4
 80402d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80402dc:	f080 810a 	bcs.w	80404f4 <__udivmoddi4+0x29c>
 80402e0:	42a7      	cmp	r7, r4
 80402e2:	f240 8107 	bls.w	80404f4 <__udivmoddi4+0x29c>
 80402e6:	4464      	add	r4, ip
 80402e8:	3802      	subs	r0, #2
 80402ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80402ee:	1be4      	subs	r4, r4, r7
 80402f0:	2600      	movs	r6, #0
 80402f2:	b11d      	cbz	r5, 80402fc <__udivmoddi4+0xa4>
 80402f4:	40d4      	lsrs	r4, r2
 80402f6:	2300      	movs	r3, #0
 80402f8:	e9c5 4300 	strd	r4, r3, [r5]
 80402fc:	4631      	mov	r1, r6
 80402fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8040302:	428b      	cmp	r3, r1
 8040304:	d909      	bls.n	804031a <__udivmoddi4+0xc2>
 8040306:	2d00      	cmp	r5, #0
 8040308:	f000 80ef 	beq.w	80404ea <__udivmoddi4+0x292>
 804030c:	2600      	movs	r6, #0
 804030e:	e9c5 0100 	strd	r0, r1, [r5]
 8040312:	4630      	mov	r0, r6
 8040314:	4631      	mov	r1, r6
 8040316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 804031a:	fab3 f683 	clz	r6, r3
 804031e:	2e00      	cmp	r6, #0
 8040320:	d14a      	bne.n	80403b8 <__udivmoddi4+0x160>
 8040322:	428b      	cmp	r3, r1
 8040324:	d302      	bcc.n	804032c <__udivmoddi4+0xd4>
 8040326:	4282      	cmp	r2, r0
 8040328:	f200 80f9 	bhi.w	804051e <__udivmoddi4+0x2c6>
 804032c:	1a84      	subs	r4, r0, r2
 804032e:	eb61 0303 	sbc.w	r3, r1, r3
 8040332:	2001      	movs	r0, #1
 8040334:	469e      	mov	lr, r3
 8040336:	2d00      	cmp	r5, #0
 8040338:	d0e0      	beq.n	80402fc <__udivmoddi4+0xa4>
 804033a:	e9c5 4e00 	strd	r4, lr, [r5]
 804033e:	e7dd      	b.n	80402fc <__udivmoddi4+0xa4>
 8040340:	b902      	cbnz	r2, 8040344 <__udivmoddi4+0xec>
 8040342:	deff      	udf	#255	; 0xff
 8040344:	fab2 f282 	clz	r2, r2
 8040348:	2a00      	cmp	r2, #0
 804034a:	f040 8092 	bne.w	8040472 <__udivmoddi4+0x21a>
 804034e:	eba1 010c 	sub.w	r1, r1, ip
 8040352:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8040356:	fa1f fe8c 	uxth.w	lr, ip
 804035a:	2601      	movs	r6, #1
 804035c:	0c20      	lsrs	r0, r4, #16
 804035e:	fbb1 f3f7 	udiv	r3, r1, r7
 8040362:	fb07 1113 	mls	r1, r7, r3, r1
 8040366:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 804036a:	fb0e f003 	mul.w	r0, lr, r3
 804036e:	4288      	cmp	r0, r1
 8040370:	d908      	bls.n	8040384 <__udivmoddi4+0x12c>
 8040372:	eb1c 0101 	adds.w	r1, ip, r1
 8040376:	f103 38ff 	add.w	r8, r3, #4294967295
 804037a:	d202      	bcs.n	8040382 <__udivmoddi4+0x12a>
 804037c:	4288      	cmp	r0, r1
 804037e:	f200 80cb 	bhi.w	8040518 <__udivmoddi4+0x2c0>
 8040382:	4643      	mov	r3, r8
 8040384:	1a09      	subs	r1, r1, r0
 8040386:	b2a4      	uxth	r4, r4
 8040388:	fbb1 f0f7 	udiv	r0, r1, r7
 804038c:	fb07 1110 	mls	r1, r7, r0, r1
 8040390:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8040394:	fb0e fe00 	mul.w	lr, lr, r0
 8040398:	45a6      	cmp	lr, r4
 804039a:	d908      	bls.n	80403ae <__udivmoddi4+0x156>
 804039c:	eb1c 0404 	adds.w	r4, ip, r4
 80403a0:	f100 31ff 	add.w	r1, r0, #4294967295
 80403a4:	d202      	bcs.n	80403ac <__udivmoddi4+0x154>
 80403a6:	45a6      	cmp	lr, r4
 80403a8:	f200 80bb 	bhi.w	8040522 <__udivmoddi4+0x2ca>
 80403ac:	4608      	mov	r0, r1
 80403ae:	eba4 040e 	sub.w	r4, r4, lr
 80403b2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80403b6:	e79c      	b.n	80402f2 <__udivmoddi4+0x9a>
 80403b8:	f1c6 0720 	rsb	r7, r6, #32
 80403bc:	40b3      	lsls	r3, r6
 80403be:	fa22 fc07 	lsr.w	ip, r2, r7
 80403c2:	ea4c 0c03 	orr.w	ip, ip, r3
 80403c6:	fa20 f407 	lsr.w	r4, r0, r7
 80403ca:	fa01 f306 	lsl.w	r3, r1, r6
 80403ce:	431c      	orrs	r4, r3
 80403d0:	40f9      	lsrs	r1, r7
 80403d2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80403d6:	fa00 f306 	lsl.w	r3, r0, r6
 80403da:	fbb1 f8f9 	udiv	r8, r1, r9
 80403de:	0c20      	lsrs	r0, r4, #16
 80403e0:	fa1f fe8c 	uxth.w	lr, ip
 80403e4:	fb09 1118 	mls	r1, r9, r8, r1
 80403e8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80403ec:	fb08 f00e 	mul.w	r0, r8, lr
 80403f0:	4288      	cmp	r0, r1
 80403f2:	fa02 f206 	lsl.w	r2, r2, r6
 80403f6:	d90b      	bls.n	8040410 <__udivmoddi4+0x1b8>
 80403f8:	eb1c 0101 	adds.w	r1, ip, r1
 80403fc:	f108 3aff 	add.w	sl, r8, #4294967295
 8040400:	f080 8088 	bcs.w	8040514 <__udivmoddi4+0x2bc>
 8040404:	4288      	cmp	r0, r1
 8040406:	f240 8085 	bls.w	8040514 <__udivmoddi4+0x2bc>
 804040a:	f1a8 0802 	sub.w	r8, r8, #2
 804040e:	4461      	add	r1, ip
 8040410:	1a09      	subs	r1, r1, r0
 8040412:	b2a4      	uxth	r4, r4
 8040414:	fbb1 f0f9 	udiv	r0, r1, r9
 8040418:	fb09 1110 	mls	r1, r9, r0, r1
 804041c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8040420:	fb00 fe0e 	mul.w	lr, r0, lr
 8040424:	458e      	cmp	lr, r1
 8040426:	d908      	bls.n	804043a <__udivmoddi4+0x1e2>
 8040428:	eb1c 0101 	adds.w	r1, ip, r1
 804042c:	f100 34ff 	add.w	r4, r0, #4294967295
 8040430:	d26c      	bcs.n	804050c <__udivmoddi4+0x2b4>
 8040432:	458e      	cmp	lr, r1
 8040434:	d96a      	bls.n	804050c <__udivmoddi4+0x2b4>
 8040436:	3802      	subs	r0, #2
 8040438:	4461      	add	r1, ip
 804043a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 804043e:	fba0 9402 	umull	r9, r4, r0, r2
 8040442:	eba1 010e 	sub.w	r1, r1, lr
 8040446:	42a1      	cmp	r1, r4
 8040448:	46c8      	mov	r8, r9
 804044a:	46a6      	mov	lr, r4
 804044c:	d356      	bcc.n	80404fc <__udivmoddi4+0x2a4>
 804044e:	d053      	beq.n	80404f8 <__udivmoddi4+0x2a0>
 8040450:	b15d      	cbz	r5, 804046a <__udivmoddi4+0x212>
 8040452:	ebb3 0208 	subs.w	r2, r3, r8
 8040456:	eb61 010e 	sbc.w	r1, r1, lr
 804045a:	fa01 f707 	lsl.w	r7, r1, r7
 804045e:	fa22 f306 	lsr.w	r3, r2, r6
 8040462:	40f1      	lsrs	r1, r6
 8040464:	431f      	orrs	r7, r3
 8040466:	e9c5 7100 	strd	r7, r1, [r5]
 804046a:	2600      	movs	r6, #0
 804046c:	4631      	mov	r1, r6
 804046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8040472:	f1c2 0320 	rsb	r3, r2, #32
 8040476:	40d8      	lsrs	r0, r3
 8040478:	fa0c fc02 	lsl.w	ip, ip, r2
 804047c:	fa21 f303 	lsr.w	r3, r1, r3
 8040480:	4091      	lsls	r1, r2
 8040482:	4301      	orrs	r1, r0
 8040484:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8040488:	fa1f fe8c 	uxth.w	lr, ip
 804048c:	fbb3 f0f7 	udiv	r0, r3, r7
 8040490:	fb07 3610 	mls	r6, r7, r0, r3
 8040494:	0c0b      	lsrs	r3, r1, #16
 8040496:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 804049a:	fb00 f60e 	mul.w	r6, r0, lr
 804049e:	429e      	cmp	r6, r3
 80404a0:	fa04 f402 	lsl.w	r4, r4, r2
 80404a4:	d908      	bls.n	80404b8 <__udivmoddi4+0x260>
 80404a6:	eb1c 0303 	adds.w	r3, ip, r3
 80404aa:	f100 38ff 	add.w	r8, r0, #4294967295
 80404ae:	d22f      	bcs.n	8040510 <__udivmoddi4+0x2b8>
 80404b0:	429e      	cmp	r6, r3
 80404b2:	d92d      	bls.n	8040510 <__udivmoddi4+0x2b8>
 80404b4:	3802      	subs	r0, #2
 80404b6:	4463      	add	r3, ip
 80404b8:	1b9b      	subs	r3, r3, r6
 80404ba:	b289      	uxth	r1, r1
 80404bc:	fbb3 f6f7 	udiv	r6, r3, r7
 80404c0:	fb07 3316 	mls	r3, r7, r6, r3
 80404c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80404c8:	fb06 f30e 	mul.w	r3, r6, lr
 80404cc:	428b      	cmp	r3, r1
 80404ce:	d908      	bls.n	80404e2 <__udivmoddi4+0x28a>
 80404d0:	eb1c 0101 	adds.w	r1, ip, r1
 80404d4:	f106 38ff 	add.w	r8, r6, #4294967295
 80404d8:	d216      	bcs.n	8040508 <__udivmoddi4+0x2b0>
 80404da:	428b      	cmp	r3, r1
 80404dc:	d914      	bls.n	8040508 <__udivmoddi4+0x2b0>
 80404de:	3e02      	subs	r6, #2
 80404e0:	4461      	add	r1, ip
 80404e2:	1ac9      	subs	r1, r1, r3
 80404e4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80404e8:	e738      	b.n	804035c <__udivmoddi4+0x104>
 80404ea:	462e      	mov	r6, r5
 80404ec:	4628      	mov	r0, r5
 80404ee:	e705      	b.n	80402fc <__udivmoddi4+0xa4>
 80404f0:	4606      	mov	r6, r0
 80404f2:	e6e3      	b.n	80402bc <__udivmoddi4+0x64>
 80404f4:	4618      	mov	r0, r3
 80404f6:	e6f8      	b.n	80402ea <__udivmoddi4+0x92>
 80404f8:	454b      	cmp	r3, r9
 80404fa:	d2a9      	bcs.n	8040450 <__udivmoddi4+0x1f8>
 80404fc:	ebb9 0802 	subs.w	r8, r9, r2
 8040500:	eb64 0e0c 	sbc.w	lr, r4, ip
 8040504:	3801      	subs	r0, #1
 8040506:	e7a3      	b.n	8040450 <__udivmoddi4+0x1f8>
 8040508:	4646      	mov	r6, r8
 804050a:	e7ea      	b.n	80404e2 <__udivmoddi4+0x28a>
 804050c:	4620      	mov	r0, r4
 804050e:	e794      	b.n	804043a <__udivmoddi4+0x1e2>
 8040510:	4640      	mov	r0, r8
 8040512:	e7d1      	b.n	80404b8 <__udivmoddi4+0x260>
 8040514:	46d0      	mov	r8, sl
 8040516:	e77b      	b.n	8040410 <__udivmoddi4+0x1b8>
 8040518:	3b02      	subs	r3, #2
 804051a:	4461      	add	r1, ip
 804051c:	e732      	b.n	8040384 <__udivmoddi4+0x12c>
 804051e:	4630      	mov	r0, r6
 8040520:	e709      	b.n	8040336 <__udivmoddi4+0xde>
 8040522:	4464      	add	r4, ip
 8040524:	3802      	subs	r0, #2
 8040526:	e742      	b.n	80403ae <__udivmoddi4+0x156>

08040528 <__aeabi_idiv0>:
 8040528:	4770      	bx	lr
 804052a:	bf00      	nop

0804052c <Flash_Data>:
  * @brief  Templete of Flashing Data
  * @param  Addr: Address of the FLASH Memory
  * @retval The page of a given address
  */
void Flash_Data(uint32_t Start_Addr,uint32_t End_Addr,Uint32 write_data)
{
 804052c:	b5b0      	push	{r4, r5, r7, lr}
 804052e:	b084      	sub	sp, #16
 8040530:	af00      	add	r7, sp, #0
 8040532:	60f8      	str	r0, [r7, #12]
 8040534:	60b9      	str	r1, [r7, #8]
 8040536:	607a      	str	r2, [r7, #4]
    fail_cnt =0;
 8040538:	4b47      	ldr	r3, [pc, #284]	; (8040658 <Flash_Data+0x12c>)
 804053a:	2200      	movs	r2, #0
 804053c:	801a      	strh	r2, [r3, #0]
    uart_send_msg("Start write data to flash memory\r\n");
 804053e:	4847      	ldr	r0, [pc, #284]	; (804065c <Flash_Data+0x130>)
 8040540:	f000 fb9e 	bl	8040c80 <uart_send_msg>
    /* Unlock the Flash to enable the flash control register access *************/
    HAL_FLASH_Unlock();
 8040544:	f000 fe48 	bl	80411d8 <HAL_FLASH_Unlock>

     /* Clear OPTVERR bit set on virgin samples */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8040548:	4b45      	ldr	r3, [pc, #276]	; (8040660 <Flash_Data+0x134>)
 804054a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 804054e:	611a      	str	r2, [r3, #16]

     /* Get the 1st page to erase */
  FirstPage = GetPage(Start_Addr);
 8040550:	68f8      	ldr	r0, [r7, #12]
 8040552:	f000 f8a1 	bl	8040698 <GetPage>
 8040556:	4603      	mov	r3, r0
 8040558:	4a42      	ldr	r2, [pc, #264]	; (8040664 <Flash_Data+0x138>)
 804055a:	6013      	str	r3, [r2, #0]

  /* Get the number of pages to erase from 1st page */
  NbOfPages = GetPage(End_Addr) - FirstPage + 1;
 804055c:	68b8      	ldr	r0, [r7, #8]
 804055e:	f000 f89b 	bl	8040698 <GetPage>
 8040562:	4602      	mov	r2, r0
 8040564:	4b3f      	ldr	r3, [pc, #252]	; (8040664 <Flash_Data+0x138>)
 8040566:	681b      	ldr	r3, [r3, #0]
 8040568:	1ad3      	subs	r3, r2, r3
 804056a:	3301      	adds	r3, #1
 804056c:	4a3e      	ldr	r2, [pc, #248]	; (8040668 <Flash_Data+0x13c>)
 804056e:	6013      	str	r3, [r2, #0]

  /* Get the bank */
  BankNumber = GetBank(Start_Addr);
 8040570:	68f8      	ldr	r0, [r7, #12]
 8040572:	f000 f8d1 	bl	8040718 <GetBank>
 8040576:	4603      	mov	r3, r0
 8040578:	4a3c      	ldr	r2, [pc, #240]	; (804066c <Flash_Data+0x140>)
 804057a:	6013      	str	r3, [r2, #0]

  /* Fill EraseInit structure*/
  EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 804057c:	4b3c      	ldr	r3, [pc, #240]	; (8040670 <Flash_Data+0x144>)
 804057e:	2200      	movs	r2, #0
 8040580:	601a      	str	r2, [r3, #0]
  EraseInitStruct.Banks       = BankNumber;
 8040582:	4b3a      	ldr	r3, [pc, #232]	; (804066c <Flash_Data+0x140>)
 8040584:	681b      	ldr	r3, [r3, #0]
 8040586:	4a3a      	ldr	r2, [pc, #232]	; (8040670 <Flash_Data+0x144>)
 8040588:	6053      	str	r3, [r2, #4]
  EraseInitStruct.Page        = FirstPage;
 804058a:	4b36      	ldr	r3, [pc, #216]	; (8040664 <Flash_Data+0x138>)
 804058c:	681b      	ldr	r3, [r3, #0]
 804058e:	4a38      	ldr	r2, [pc, #224]	; (8040670 <Flash_Data+0x144>)
 8040590:	6093      	str	r3, [r2, #8]
  EraseInitStruct.NbPages     = NbOfPages;
 8040592:	4b35      	ldr	r3, [pc, #212]	; (8040668 <Flash_Data+0x13c>)
 8040594:	681b      	ldr	r3, [r3, #0]
 8040596:	4a36      	ldr	r2, [pc, #216]	; (8040670 <Flash_Data+0x144>)
 8040598:	60d3      	str	r3, [r2, #12]
  /* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
     you have to make sure that these data are rewritten before they are accessed during code
     execution. If this cannot be done safely, it is recommended to flush the caches by setting the
     DCRST and ICRST bits in the FLASH_CR register. */
    if (HAL_FLASHEx_Erase(&EraseInitStruct, &PageError) != HAL_OK)
 804059a:	4936      	ldr	r1, [pc, #216]	; (8040674 <Flash_Data+0x148>)
 804059c:	4834      	ldr	r0, [pc, #208]	; (8040670 <Flash_Data+0x144>)
 804059e:	f000 ff07 	bl	80413b0 <HAL_FLASHEx_Erase>
 80405a2:	4603      	mov	r3, r0
 80405a4:	2b00      	cmp	r3, #0
 80405a6:	d003      	beq.n	80405b0 <Flash_Data+0x84>
    */
    /* Infinite loop */
        while (1)
        {
            /* Make LED2 blink (100ms on, 2s off) to indicate error in Erase operation */
            uart_send_msg("Erasing Flash memory\r\n");
 80405a8:	4833      	ldr	r0, [pc, #204]	; (8040678 <Flash_Data+0x14c>)
 80405aa:	f000 fb69 	bl	8040c80 <uart_send_msg>
 80405ae:	e7fb      	b.n	80405a8 <Flash_Data+0x7c>
        }
    }
  /* Program the user Flash area word by word
    (area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/
    Address = Start_Addr;
 80405b0:	4a32      	ldr	r2, [pc, #200]	; (804067c <Flash_Data+0x150>)
 80405b2:	68fb      	ldr	r3, [r7, #12]
 80405b4:	6013      	str	r3, [r2, #0]

    while (Address < End_Addr)
 80405b6:	e017      	b.n	80405e8 <Flash_Data+0xbc>
    {
        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, write_data) == HAL_OK)
 80405b8:	4b30      	ldr	r3, [pc, #192]	; (804067c <Flash_Data+0x150>)
 80405ba:	6819      	ldr	r1, [r3, #0]
 80405bc:	687b      	ldr	r3, [r7, #4]
 80405be:	2200      	movs	r2, #0
 80405c0:	461c      	mov	r4, r3
 80405c2:	4615      	mov	r5, r2
 80405c4:	4622      	mov	r2, r4
 80405c6:	462b      	mov	r3, r5
 80405c8:	2000      	movs	r0, #0
 80405ca:	f000 fdaf 	bl	804112c <HAL_FLASH_Program>
 80405ce:	4603      	mov	r3, r0
 80405d0:	2b00      	cmp	r3, #0
 80405d2:	d105      	bne.n	80405e0 <Flash_Data+0xb4>
        {
            Address = Address + 8;  /* increment to next double word*/
 80405d4:	4b29      	ldr	r3, [pc, #164]	; (804067c <Flash_Data+0x150>)
 80405d6:	681b      	ldr	r3, [r3, #0]
 80405d8:	3308      	adds	r3, #8
 80405da:	4a28      	ldr	r2, [pc, #160]	; (804067c <Flash_Data+0x150>)
 80405dc:	6013      	str	r3, [r2, #0]
 80405de:	e003      	b.n	80405e8 <Flash_Data+0xbc>
            /* Error occurred while writing data in Flash memory.
            User can add here some code to deal with this error */
            while (1)
            {
                /* Make LED2 blink (100ms on, 2s off) to indicate error in Write operation */
                uart_send_msg("fail writing data\r\n");
 80405e0:	4827      	ldr	r0, [pc, #156]	; (8040680 <Flash_Data+0x154>)
 80405e2:	f000 fb4d 	bl	8040c80 <uart_send_msg>
 80405e6:	e7fb      	b.n	80405e0 <Flash_Data+0xb4>
    while (Address < End_Addr)
 80405e8:	4b24      	ldr	r3, [pc, #144]	; (804067c <Flash_Data+0x150>)
 80405ea:	681b      	ldr	r3, [r3, #0]
 80405ec:	68ba      	ldr	r2, [r7, #8]
 80405ee:	429a      	cmp	r2, r3
 80405f0:	d8e2      	bhi.n	80405b8 <Flash_Data+0x8c>
          
        }
    }
     /* Lock the Flash to disable the flash control register access (recommended
     to protect the FLASH memory against possible unwanted operation) *********/
    HAL_FLASH_Lock();
 80405f2:	f000 fe13 	bl	804121c <HAL_FLASH_Lock>
    Flash_done_Flag =1;
 80405f6:	4b23      	ldr	r3, [pc, #140]	; (8040684 <Flash_Data+0x158>)
 80405f8:	2201      	movs	r2, #1
 80405fa:	701a      	strb	r2, [r3, #0]
    uart_send_msg("End with Write memory !!!\r\n");
 80405fc:	4822      	ldr	r0, [pc, #136]	; (8040688 <Flash_Data+0x15c>)
 80405fe:	f000 fb3f 	bl	8040c80 <uart_send_msg>
  /* Check if the programmed data is OK
      MemoryProgramStatus = 0: data programmed correctly
      MemoryProgramStatus != 0: number of words not programmed correctly ******/
    Address = Start_Addr;
 8040602:	4a1e      	ldr	r2, [pc, #120]	; (804067c <Flash_Data+0x150>)
 8040604:	68fb      	ldr	r3, [r7, #12]
 8040606:	6013      	str	r3, [r2, #0]
     MemoryProgramStatus = 0x0;
 8040608:	4b20      	ldr	r3, [pc, #128]	; (804068c <Flash_Data+0x160>)
 804060a:	2200      	movs	r2, #0
 804060c:	601a      	str	r2, [r3, #0]

    while (Address < End_Addr)
 804060e:	e013      	b.n	8040638 <Flash_Data+0x10c>
    {
        data32 = *(__IO uint32_t *)Address;//讀FLASH中的資料，直接給出地址就行了。跟從記憶體中讀資料一樣
 8040610:	4b1a      	ldr	r3, [pc, #104]	; (804067c <Flash_Data+0x150>)
 8040612:	681b      	ldr	r3, [r3, #0]
 8040614:	681b      	ldr	r3, [r3, #0]
 8040616:	4a1e      	ldr	r2, [pc, #120]	; (8040690 <Flash_Data+0x164>)
 8040618:	6013      	str	r3, [r2, #0]

        if (data32 != write_data)
 804061a:	4b1d      	ldr	r3, [pc, #116]	; (8040690 <Flash_Data+0x164>)
 804061c:	681b      	ldr	r3, [r3, #0]
 804061e:	687a      	ldr	r2, [r7, #4]
 8040620:	429a      	cmp	r2, r3
 8040622:	d004      	beq.n	804062e <Flash_Data+0x102>
        {
            MemoryProgramStatus++;
 8040624:	4b19      	ldr	r3, [pc, #100]	; (804068c <Flash_Data+0x160>)
 8040626:	681b      	ldr	r3, [r3, #0]
 8040628:	3301      	adds	r3, #1
 804062a:	4a18      	ldr	r2, [pc, #96]	; (804068c <Flash_Data+0x160>)
 804062c:	6013      	str	r3, [r2, #0]
        }
        Address = Address + 4;
 804062e:	4b13      	ldr	r3, [pc, #76]	; (804067c <Flash_Data+0x150>)
 8040630:	681b      	ldr	r3, [r3, #0]
 8040632:	3304      	adds	r3, #4
 8040634:	4a11      	ldr	r2, [pc, #68]	; (804067c <Flash_Data+0x150>)
 8040636:	6013      	str	r3, [r2, #0]
    while (Address < End_Addr)
 8040638:	4b10      	ldr	r3, [pc, #64]	; (804067c <Flash_Data+0x150>)
 804063a:	681b      	ldr	r3, [r3, #0]
 804063c:	68ba      	ldr	r2, [r7, #8]
 804063e:	429a      	cmp	r2, r3
 8040640:	d8e6      	bhi.n	8040610 <Flash_Data+0xe4>
    }

     /*Check if there is an issue to program data*/
    if (MemoryProgramStatus == 0)
 8040642:	4b12      	ldr	r3, [pc, #72]	; (804068c <Flash_Data+0x160>)
 8040644:	681b      	ldr	r3, [r3, #0]
 8040646:	2b00      	cmp	r3, #0
 8040648:	d102      	bne.n	8040650 <Flash_Data+0x124>
    {
        /* No error detected. Switch on LED2*/
        uart_send_msg("Done with Flash memory !!!\r\n");
 804064a:	4812      	ldr	r0, [pc, #72]	; (8040694 <Flash_Data+0x168>)
 804064c:	f000 fb18 	bl	8040c80 <uart_send_msg>
//          //  uart_send_msg("Error with flash memory\r\n");
//            uart_send_msg(MemoryProgramStatus);
//           fail_cnt++;
//       }
//   }
}
 8040650:	bf00      	nop
 8040652:	3710      	adds	r7, #16
 8040654:	46bd      	mov	sp, r7
 8040656:	bdb0      	pop	{r4, r5, r7, pc}
 8040658:	20000064 	.word	0x20000064
 804065c:	080449cc 	.word	0x080449cc
 8040660:	40022000 	.word	0x40022000
 8040664:	20000048 	.word	0x20000048
 8040668:	2000004c 	.word	0x2000004c
 804066c:	20000050 	.word	0x20000050
 8040670:	20000068 	.word	0x20000068
 8040674:	20000058 	.word	0x20000058
 8040678:	080449f0 	.word	0x080449f0
 804067c:	20000054 	.word	0x20000054
 8040680:	08044a08 	.word	0x08044a08
 8040684:	20000066 	.word	0x20000066
 8040688:	08044a1c 	.word	0x08044a1c
 804068c:	2000005c 	.word	0x2000005c
 8040690:	20000060 	.word	0x20000060
 8040694:	08044a38 	.word	0x08044a38

08040698 <GetPage>:
  * @brief  Gets the page of a given address
  * @param  Addr: Address of the FLASH Memory
  * @retval The page of a given address
  */
static uint32_t GetPage(uint32_t Addr)
{
 8040698:	b480      	push	{r7}
 804069a:	b085      	sub	sp, #20
 804069c:	af00      	add	r7, sp, #0
 804069e:	6078      	str	r0, [r7, #4]
  uint32_t page = 0;
 80406a0:	2300      	movs	r3, #0
 80406a2:	60fb      	str	r3, [r7, #12]

  if (Addr < (FLASH_BASE + FLASH_BANK_SIZE))
 80406a4:	4b19      	ldr	r3, [pc, #100]	; (804070c <GetPage+0x74>)
 80406a6:	881b      	ldrh	r3, [r3, #0]
 80406a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80406ac:	4293      	cmp	r3, r2
 80406ae:	d008      	beq.n	80406c2 <GetPage+0x2a>
 80406b0:	4b16      	ldr	r3, [pc, #88]	; (804070c <GetPage+0x74>)
 80406b2:	681b      	ldr	r3, [r3, #0]
 80406b4:	029b      	lsls	r3, r3, #10
 80406b6:	085a      	lsrs	r2, r3, #1
 80406b8:	4b15      	ldr	r3, [pc, #84]	; (8040710 <GetPage+0x78>)
 80406ba:	4013      	ands	r3, r2
 80406bc:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80406c0:	e000      	b.n	80406c4 <GetPage+0x2c>
 80406c2:	4b14      	ldr	r3, [pc, #80]	; (8040714 <GetPage+0x7c>)
 80406c4:	687a      	ldr	r2, [r7, #4]
 80406c6:	4293      	cmp	r3, r2
 80406c8:	d905      	bls.n	80406d6 <GetPage+0x3e>
  {
    /* Bank 1 */
    page = (Addr - FLASH_BASE) / FLASH_PAGE_SIZE;
 80406ca:	687b      	ldr	r3, [r7, #4]
 80406cc:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 80406d0:	0adb      	lsrs	r3, r3, #11
 80406d2:	60fb      	str	r3, [r7, #12]
 80406d4:	e013      	b.n	80406fe <GetPage+0x66>
  }
  else
  {
    /* Bank 2 */
    page = (Addr - (FLASH_BASE + FLASH_BANK_SIZE)) / FLASH_PAGE_SIZE;
 80406d6:	4b0d      	ldr	r3, [pc, #52]	; (804070c <GetPage+0x74>)
 80406d8:	881b      	ldrh	r3, [r3, #0]
 80406da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80406de:	4293      	cmp	r3, r2
 80406e0:	d008      	beq.n	80406f4 <GetPage+0x5c>
 80406e2:	4b0a      	ldr	r3, [pc, #40]	; (804070c <GetPage+0x74>)
 80406e4:	681b      	ldr	r3, [r3, #0]
 80406e6:	029b      	lsls	r3, r3, #10
 80406e8:	085a      	lsrs	r2, r3, #1
 80406ea:	4b09      	ldr	r3, [pc, #36]	; (8040710 <GetPage+0x78>)
 80406ec:	4013      	ands	r3, r2
 80406ee:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80406f2:	e000      	b.n	80406f6 <GetPage+0x5e>
 80406f4:	4b07      	ldr	r3, [pc, #28]	; (8040714 <GetPage+0x7c>)
 80406f6:	687a      	ldr	r2, [r7, #4]
 80406f8:	1ad3      	subs	r3, r2, r3
 80406fa:	0adb      	lsrs	r3, r3, #11
 80406fc:	60fb      	str	r3, [r7, #12]
  }

  return page;
 80406fe:	68fb      	ldr	r3, [r7, #12]
}
 8040700:	4618      	mov	r0, r3
 8040702:	3714      	adds	r7, #20
 8040704:	46bd      	mov	sp, r7
 8040706:	f85d 7b04 	ldr.w	r7, [sp], #4
 804070a:	4770      	bx	lr
 804070c:	1fff75e0 	.word	0x1fff75e0
 8040710:	01fffe00 	.word	0x01fffe00
 8040714:	08040000 	.word	0x08040000

08040718 <GetBank>:
  * @brief  Gets the bank of a given address
  * @param  Addr: Address of the FLASH Memory
  * @retval The bank of a given address
  */
 static uint32_t GetBank(uint32_t Addr)
{
 8040718:	b480      	push	{r7}
 804071a:	b083      	sub	sp, #12
 804071c:	af00      	add	r7, sp, #0
 804071e:	6078      	str	r0, [r7, #4]
  return FLASH_BANK_1;
 8040720:	2301      	movs	r3, #1
}
 8040722:	4618      	mov	r0, r3
 8040724:	370c      	adds	r7, #12
 8040726:	46bd      	mov	sp, r7
 8040728:	f85d 7b04 	ldr.w	r7, [sp], #4
 804072c:	4770      	bx	lr
	...

08040730 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8040730:	b580      	push	{r7, lr}
 8040732:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8040734:	f000 fb13 	bl	8040d5e <HAL_Init>

  /* USER CODE BEGIN Init */
  Flash_done_Flag =0;
 8040738:	4b0f      	ldr	r3, [pc, #60]	; (8040778 <main+0x48>)
 804073a:	2200      	movs	r2, #0
 804073c:	701a      	strb	r2, [r3, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 804073e:	f000 f82d 	bl	804079c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8040742:	f000 f90d 	bl	8040960 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8040746:	f000 f8b7 	bl	80408b8 <MX_USART1_UART_Init>
  MX_TIM16_Init();
 804074a:	f000 f88f 	bl	804086c <MX_TIM16_Init>

  Flash_Data(FLASH_USER_START_ADDR,FLASH_USER_END_ADDR,Initial_DATA);
 804074e:	4a0b      	ldr	r2, [pc, #44]	; (804077c <main+0x4c>)
 8040750:	490b      	ldr	r1, [pc, #44]	; (8040780 <main+0x50>)
 8040752:	480c      	ldr	r0, [pc, #48]	; (8040784 <main+0x54>)
 8040754:	f7ff feea 	bl	804052c <Flash_Data>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim16);
 8040758:	480b      	ldr	r0, [pc, #44]	; (8040788 <main+0x58>)
 804075a:	f002 f9f1 	bl	8042b40 <HAL_TIM_Base_Start_IT>
  uart_send_msg("Hello from user app\r\n");
 804075e:	480b      	ldr	r0, [pc, #44]	; (804078c <main+0x5c>)
 8040760:	f000 fa8e 	bl	8040c80 <uart_send_msg>
  /* USER CODE END 2 */

  /* Infinite loop */
   uart_send_msg("End of initalize system\r\n");
 8040764:	480a      	ldr	r0, [pc, #40]	; (8040790 <main+0x60>)
 8040766:	f000 fa8b 	bl	8040c80 <uart_send_msg>

    HAL_UART_Receive_IT(&huart1,aRxMessage,4);
 804076a:	2204      	movs	r2, #4
 804076c:	4909      	ldr	r1, [pc, #36]	; (8040794 <main+0x64>)
 804076e:	480a      	ldr	r0, [pc, #40]	; (8040798 <main+0x68>)
 8040770:	f002 fdc8 	bl	8043304 <HAL_UART_Receive_IT>
  while (1)
 8040774:	e7fe      	b.n	8040774 <main+0x44>
 8040776:	bf00      	nop
 8040778:	20000066 	.word	0x20000066
 804077c:	08456237 	.word	0x08456237
 8040780:	08002fff 	.word	0x08002fff
 8040784:	08002000 	.word	0x08002000
 8040788:	20000078 	.word	0x20000078
 804078c:	08044a58 	.word	0x08044a58
 8040790:	08044a70 	.word	0x08044a70
 8040794:	20000150 	.word	0x20000150
 8040798:	200000c4 	.word	0x200000c4

0804079c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 804079c:	b580      	push	{r7, lr}
 804079e:	b0a8      	sub	sp, #160	; 0xa0
 80407a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80407a2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80407a6:	2238      	movs	r2, #56	; 0x38
 80407a8:	2100      	movs	r1, #0
 80407aa:	4618      	mov	r0, r3
 80407ac:	f004 f8fa 	bl	80449a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80407b0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80407b4:	2200      	movs	r2, #0
 80407b6:	601a      	str	r2, [r3, #0]
 80407b8:	605a      	str	r2, [r3, #4]
 80407ba:	609a      	str	r2, [r3, #8]
 80407bc:	60da      	str	r2, [r3, #12]
 80407be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80407c0:	463b      	mov	r3, r7
 80407c2:	2254      	movs	r2, #84	; 0x54
 80407c4:	2100      	movs	r1, #0
 80407c6:	4618      	mov	r0, r3
 80407c8:	f004 f8ec 	bl	80449a4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80407cc:	2000      	movs	r0, #0
 80407ce:	f001 f929 	bl	8041a24 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80407d2:	2302      	movs	r3, #2
 80407d4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80407d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80407da:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80407dc:	2340      	movs	r3, #64	; 0x40
 80407de:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80407e0:	2302      	movs	r3, #2
 80407e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80407e6:	2302      	movs	r3, #2
 80407e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80407ec:	2301      	movs	r3, #1
 80407ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 20;
 80407f2:	2314      	movs	r3, #20
 80407f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80407f8:	2302      	movs	r3, #2
 80407fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80407fe:	2302      	movs	r3, #2
 8040800:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8040804:	2302      	movs	r3, #2
 8040806:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 804080a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 804080e:	4618      	mov	r0, r3
 8040810:	f001 f9bc 	bl	8041b8c <HAL_RCC_OscConfig>
 8040814:	4603      	mov	r3, r0
 8040816:	2b00      	cmp	r3, #0
 8040818:	d001      	beq.n	804081e <SystemClock_Config+0x82>
  {
    Error_Handler();
 804081a:	f000 f939 	bl	8040a90 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 804081e:	230f      	movs	r3, #15
 8040820:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8040822:	2303      	movs	r3, #3
 8040824:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8040826:	2300      	movs	r3, #0
 8040828:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 804082a:	2300      	movs	r3, #0
 804082c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 804082e:	2300      	movs	r3, #0
 8040830:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8040832:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8040836:	2104      	movs	r1, #4
 8040838:	4618      	mov	r0, r3
 804083a:	f001 fcbf 	bl	80421bc <HAL_RCC_ClockConfig>
 804083e:	4603      	mov	r3, r0
 8040840:	2b00      	cmp	r3, #0
 8040842:	d001      	beq.n	8040848 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8040844:	f000 f924 	bl	8040a90 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8040848:	2301      	movs	r3, #1
 804084a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 804084c:	2300      	movs	r3, #0
 804084e:	607b      	str	r3, [r7, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8040850:	463b      	mov	r3, r7
 8040852:	4618      	mov	r0, r3
 8040854:	f001 fece 	bl	80425f4 <HAL_RCCEx_PeriphCLKConfig>
 8040858:	4603      	mov	r3, r0
 804085a:	2b00      	cmp	r3, #0
 804085c:	d001      	beq.n	8040862 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 804085e:	f000 f917 	bl	8040a90 <Error_Handler>
  }
}
 8040862:	bf00      	nop
 8040864:	37a0      	adds	r7, #160	; 0xa0
 8040866:	46bd      	mov	sp, r7
 8040868:	bd80      	pop	{r7, pc}
	...

0804086c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 804086c:	b580      	push	{r7, lr}
 804086e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8040870:	4b0f      	ldr	r3, [pc, #60]	; (80408b0 <MX_TIM16_Init+0x44>)
 8040872:	4a10      	ldr	r2, [pc, #64]	; (80408b4 <MX_TIM16_Init+0x48>)
 8040874:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 160;
 8040876:	4b0e      	ldr	r3, [pc, #56]	; (80408b0 <MX_TIM16_Init+0x44>)
 8040878:	22a0      	movs	r2, #160	; 0xa0
 804087a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 804087c:	4b0c      	ldr	r3, [pc, #48]	; (80408b0 <MX_TIM16_Init+0x44>)
 804087e:	2200      	movs	r2, #0
 8040880:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8040882:	4b0b      	ldr	r3, [pc, #44]	; (80408b0 <MX_TIM16_Init+0x44>)
 8040884:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8040888:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 804088a:	4b09      	ldr	r3, [pc, #36]	; (80408b0 <MX_TIM16_Init+0x44>)
 804088c:	2200      	movs	r2, #0
 804088e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8040890:	4b07      	ldr	r3, [pc, #28]	; (80408b0 <MX_TIM16_Init+0x44>)
 8040892:	2200      	movs	r2, #0
 8040894:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8040896:	4b06      	ldr	r3, [pc, #24]	; (80408b0 <MX_TIM16_Init+0x44>)
 8040898:	2200      	movs	r2, #0
 804089a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 804089c:	4804      	ldr	r0, [pc, #16]	; (80408b0 <MX_TIM16_Init+0x44>)
 804089e:	f002 f8f7 	bl	8042a90 <HAL_TIM_Base_Init>
 80408a2:	4603      	mov	r3, r0
 80408a4:	2b00      	cmp	r3, #0
 80408a6:	d001      	beq.n	80408ac <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80408a8:	f000 f8f2 	bl	8040a90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80408ac:	bf00      	nop
 80408ae:	bd80      	pop	{r7, pc}
 80408b0:	20000078 	.word	0x20000078
 80408b4:	40014400 	.word	0x40014400

080408b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80408b8:	b580      	push	{r7, lr}
 80408ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80408bc:	4b26      	ldr	r3, [pc, #152]	; (8040958 <MX_USART1_UART_Init+0xa0>)
 80408be:	4a27      	ldr	r2, [pc, #156]	; (804095c <MX_USART1_UART_Init+0xa4>)
 80408c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80408c2:	4b25      	ldr	r3, [pc, #148]	; (8040958 <MX_USART1_UART_Init+0xa0>)
 80408c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80408c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80408ca:	4b23      	ldr	r3, [pc, #140]	; (8040958 <MX_USART1_UART_Init+0xa0>)
 80408cc:	2200      	movs	r2, #0
 80408ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80408d0:	4b21      	ldr	r3, [pc, #132]	; (8040958 <MX_USART1_UART_Init+0xa0>)
 80408d2:	2200      	movs	r2, #0
 80408d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80408d6:	4b20      	ldr	r3, [pc, #128]	; (8040958 <MX_USART1_UART_Init+0xa0>)
 80408d8:	2200      	movs	r2, #0
 80408da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80408dc:	4b1e      	ldr	r3, [pc, #120]	; (8040958 <MX_USART1_UART_Init+0xa0>)
 80408de:	220c      	movs	r2, #12
 80408e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80408e2:	4b1d      	ldr	r3, [pc, #116]	; (8040958 <MX_USART1_UART_Init+0xa0>)
 80408e4:	2200      	movs	r2, #0
 80408e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80408e8:	4b1b      	ldr	r3, [pc, #108]	; (8040958 <MX_USART1_UART_Init+0xa0>)
 80408ea:	2200      	movs	r2, #0
 80408ec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80408ee:	4b1a      	ldr	r3, [pc, #104]	; (8040958 <MX_USART1_UART_Init+0xa0>)
 80408f0:	2200      	movs	r2, #0
 80408f2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80408f4:	4b18      	ldr	r3, [pc, #96]	; (8040958 <MX_USART1_UART_Init+0xa0>)
 80408f6:	2200      	movs	r2, #0
 80408f8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80408fa:	4b17      	ldr	r3, [pc, #92]	; (8040958 <MX_USART1_UART_Init+0xa0>)
 80408fc:	2200      	movs	r2, #0
 80408fe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8040900:	4815      	ldr	r0, [pc, #84]	; (8040958 <MX_USART1_UART_Init+0xa0>)
 8040902:	f002 fc2b 	bl	804315c <HAL_UART_Init>
 8040906:	4603      	mov	r3, r0
 8040908:	2b00      	cmp	r3, #0
 804090a:	d001      	beq.n	8040910 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 804090c:	f000 f8c0 	bl	8040a90 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8040910:	2100      	movs	r1, #0
 8040912:	4811      	ldr	r0, [pc, #68]	; (8040958 <MX_USART1_UART_Init+0xa0>)
 8040914:	f003 ff41 	bl	804479a <HAL_UARTEx_SetTxFifoThreshold>
 8040918:	4603      	mov	r3, r0
 804091a:	2b00      	cmp	r3, #0
 804091c:	d001      	beq.n	8040922 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 804091e:	f000 f8b7 	bl	8040a90 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8040922:	2100      	movs	r1, #0
 8040924:	480c      	ldr	r0, [pc, #48]	; (8040958 <MX_USART1_UART_Init+0xa0>)
 8040926:	f003 ff76 	bl	8044816 <HAL_UARTEx_SetRxFifoThreshold>
 804092a:	4603      	mov	r3, r0
 804092c:	2b00      	cmp	r3, #0
 804092e:	d001      	beq.n	8040934 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8040930:	f000 f8ae 	bl	8040a90 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8040934:	4808      	ldr	r0, [pc, #32]	; (8040958 <MX_USART1_UART_Init+0xa0>)
 8040936:	f003 fef7 	bl	8044728 <HAL_UARTEx_DisableFifoMode>
 804093a:	4603      	mov	r3, r0
 804093c:	2b00      	cmp	r3, #0
 804093e:	d001      	beq.n	8040944 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8040940:	f000 f8a6 	bl	8040a90 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);  // enable receive intterupts
 8040944:	4b04      	ldr	r3, [pc, #16]	; (8040958 <MX_USART1_UART_Init+0xa0>)
 8040946:	681b      	ldr	r3, [r3, #0]
 8040948:	681a      	ldr	r2, [r3, #0]
 804094a:	4b03      	ldr	r3, [pc, #12]	; (8040958 <MX_USART1_UART_Init+0xa0>)
 804094c:	681b      	ldr	r3, [r3, #0]
 804094e:	f042 0220 	orr.w	r2, r2, #32
 8040952:	601a      	str	r2, [r3, #0]
  // __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);  // enable idle line detection
  /* USER CODE END USART1_Init 2 */

}
 8040954:	bf00      	nop
 8040956:	bd80      	pop	{r7, pc}
 8040958:	200000c4 	.word	0x200000c4
 804095c:	40013800 	.word	0x40013800

08040960 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8040960:	b580      	push	{r7, lr}
 8040962:	b08a      	sub	sp, #40	; 0x28
 8040964:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8040966:	f107 0314 	add.w	r3, r7, #20
 804096a:	2200      	movs	r2, #0
 804096c:	601a      	str	r2, [r3, #0]
 804096e:	605a      	str	r2, [r3, #4]
 8040970:	609a      	str	r2, [r3, #8]
 8040972:	60da      	str	r2, [r3, #12]
 8040974:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8040976:	4b37      	ldr	r3, [pc, #220]	; (8040a54 <MX_GPIO_Init+0xf4>)
 8040978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 804097a:	4a36      	ldr	r2, [pc, #216]	; (8040a54 <MX_GPIO_Init+0xf4>)
 804097c:	f043 0304 	orr.w	r3, r3, #4
 8040980:	64d3      	str	r3, [r2, #76]	; 0x4c
 8040982:	4b34      	ldr	r3, [pc, #208]	; (8040a54 <MX_GPIO_Init+0xf4>)
 8040984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040986:	f003 0304 	and.w	r3, r3, #4
 804098a:	613b      	str	r3, [r7, #16]
 804098c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 804098e:	4b31      	ldr	r3, [pc, #196]	; (8040a54 <MX_GPIO_Init+0xf4>)
 8040990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040992:	4a30      	ldr	r2, [pc, #192]	; (8040a54 <MX_GPIO_Init+0xf4>)
 8040994:	f043 0320 	orr.w	r3, r3, #32
 8040998:	64d3      	str	r3, [r2, #76]	; 0x4c
 804099a:	4b2e      	ldr	r3, [pc, #184]	; (8040a54 <MX_GPIO_Init+0xf4>)
 804099c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 804099e:	f003 0320 	and.w	r3, r3, #32
 80409a2:	60fb      	str	r3, [r7, #12]
 80409a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80409a6:	4b2b      	ldr	r3, [pc, #172]	; (8040a54 <MX_GPIO_Init+0xf4>)
 80409a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80409aa:	4a2a      	ldr	r2, [pc, #168]	; (8040a54 <MX_GPIO_Init+0xf4>)
 80409ac:	f043 0301 	orr.w	r3, r3, #1
 80409b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80409b2:	4b28      	ldr	r3, [pc, #160]	; (8040a54 <MX_GPIO_Init+0xf4>)
 80409b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80409b6:	f003 0301 	and.w	r3, r3, #1
 80409ba:	60bb      	str	r3, [r7, #8]
 80409bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80409be:	4b25      	ldr	r3, [pc, #148]	; (8040a54 <MX_GPIO_Init+0xf4>)
 80409c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80409c2:	4a24      	ldr	r2, [pc, #144]	; (8040a54 <MX_GPIO_Init+0xf4>)
 80409c4:	f043 0302 	orr.w	r3, r3, #2
 80409c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80409ca:	4b22      	ldr	r3, [pc, #136]	; (8040a54 <MX_GPIO_Init+0xf4>)
 80409cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80409ce:	f003 0302 	and.w	r3, r3, #2
 80409d2:	607b      	str	r3, [r7, #4]
 80409d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80409d6:	2200      	movs	r2, #0
 80409d8:	2120      	movs	r1, #32
 80409da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80409de:	f000 ffcb 	bl	8041978 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80409e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80409e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80409e8:	4b1b      	ldr	r3, [pc, #108]	; (8040a58 <MX_GPIO_Init+0xf8>)
 80409ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80409ec:	2300      	movs	r3, #0
 80409ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80409f0:	f107 0314 	add.w	r3, r7, #20
 80409f4:	4619      	mov	r1, r3
 80409f6:	4819      	ldr	r0, [pc, #100]	; (8040a5c <MX_GPIO_Init+0xfc>)
 80409f8:	f000 fe3c 	bl	8041674 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPUART1_TX_Pin LPUART1_RX_Pin */
  GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80409fc:	230c      	movs	r3, #12
 80409fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8040a00:	2302      	movs	r3, #2
 8040a02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040a04:	2300      	movs	r3, #0
 8040a06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8040a08:	2300      	movs	r3, #0
 8040a0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8040a0c:	230c      	movs	r3, #12
 8040a0e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8040a10:	f107 0314 	add.w	r3, r7, #20
 8040a14:	4619      	mov	r1, r3
 8040a16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8040a1a:	f000 fe2b 	bl	8041674 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8040a1e:	2320      	movs	r3, #32
 8040a20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8040a22:	2301      	movs	r3, #1
 8040a24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040a26:	2300      	movs	r3, #0
 8040a28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8040a2a:	2300      	movs	r3, #0
 8040a2c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8040a2e:	f107 0314 	add.w	r3, r7, #20
 8040a32:	4619      	mov	r1, r3
 8040a34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8040a38:	f000 fe1c 	bl	8041674 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8040a3c:	2200      	movs	r2, #0
 8040a3e:	2100      	movs	r1, #0
 8040a40:	2028      	movs	r0, #40	; 0x28
 8040a42:	f000 fad8 	bl	8040ff6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8040a46:	2028      	movs	r0, #40	; 0x28
 8040a48:	f000 faef 	bl	804102a <HAL_NVIC_EnableIRQ>

}
 8040a4c:	bf00      	nop
 8040a4e:	3728      	adds	r7, #40	; 0x28
 8040a50:	46bd      	mov	sp, r7
 8040a52:	bd80      	pop	{r7, pc}
 8040a54:	40021000 	.word	0x40021000
 8040a58:	10110000 	.word	0x10110000
 8040a5c:	48000800 	.word	0x48000800

08040a60 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8040a60:	b580      	push	{r7, lr}
 8040a62:	b082      	sub	sp, #8
 8040a64:	af00      	add	r7, sp, #0
 8040a66:	6078      	str	r0, [r7, #4]
  if (Flash_done_Flag==0)
 8040a68:	4b07      	ldr	r3, [pc, #28]	; (8040a88 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8040a6a:	781b      	ldrb	r3, [r3, #0]
 8040a6c:	2b00      	cmp	r3, #0
 8040a6e:	d107      	bne.n	8040a80 <HAL_TIM_PeriodElapsedCallback+0x20>
  {
   	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8040a70:	2120      	movs	r1, #32
 8040a72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8040a76:	f000 ff97 	bl	80419a8 <HAL_GPIO_TogglePin>
	  uart_send_msg(".");
 8040a7a:	4804      	ldr	r0, [pc, #16]	; (8040a8c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8040a7c:	f000 f900 	bl	8040c80 <uart_send_msg>
  }
}
 8040a80:	bf00      	nop
 8040a82:	3708      	adds	r7, #8
 8040a84:	46bd      	mov	sp, r7
 8040a86:	bd80      	pop	{r7, pc}
 8040a88:	20000066 	.word	0x20000066
 8040a8c:	08044a8c 	.word	0x08044a8c

08040a90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8040a90:	b480      	push	{r7}
 8040a92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8040a94:	b672      	cpsid	i
}
 8040a96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8040a98:	e7fe      	b.n	8040a98 <Error_Handler+0x8>
	...

08040a9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8040a9c:	b580      	push	{r7, lr}
 8040a9e:	b082      	sub	sp, #8
 8040aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8040aa2:	4b0f      	ldr	r3, [pc, #60]	; (8040ae0 <HAL_MspInit+0x44>)
 8040aa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8040aa6:	4a0e      	ldr	r2, [pc, #56]	; (8040ae0 <HAL_MspInit+0x44>)
 8040aa8:	f043 0301 	orr.w	r3, r3, #1
 8040aac:	6613      	str	r3, [r2, #96]	; 0x60
 8040aae:	4b0c      	ldr	r3, [pc, #48]	; (8040ae0 <HAL_MspInit+0x44>)
 8040ab0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8040ab2:	f003 0301 	and.w	r3, r3, #1
 8040ab6:	607b      	str	r3, [r7, #4]
 8040ab8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8040aba:	4b09      	ldr	r3, [pc, #36]	; (8040ae0 <HAL_MspInit+0x44>)
 8040abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8040abe:	4a08      	ldr	r2, [pc, #32]	; (8040ae0 <HAL_MspInit+0x44>)
 8040ac0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8040ac4:	6593      	str	r3, [r2, #88]	; 0x58
 8040ac6:	4b06      	ldr	r3, [pc, #24]	; (8040ae0 <HAL_MspInit+0x44>)
 8040ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8040aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8040ace:	603b      	str	r3, [r7, #0]
 8040ad0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8040ad2:	f001 f84b 	bl	8041b6c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8040ad6:	bf00      	nop
 8040ad8:	3708      	adds	r7, #8
 8040ada:	46bd      	mov	sp, r7
 8040adc:	bd80      	pop	{r7, pc}
 8040ade:	bf00      	nop
 8040ae0:	40021000 	.word	0x40021000

08040ae4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8040ae4:	b580      	push	{r7, lr}
 8040ae6:	b084      	sub	sp, #16
 8040ae8:	af00      	add	r7, sp, #0
 8040aea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8040aec:	687b      	ldr	r3, [r7, #4]
 8040aee:	681b      	ldr	r3, [r3, #0]
 8040af0:	4a0d      	ldr	r2, [pc, #52]	; (8040b28 <HAL_TIM_Base_MspInit+0x44>)
 8040af2:	4293      	cmp	r3, r2
 8040af4:	d113      	bne.n	8040b1e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8040af6:	4b0d      	ldr	r3, [pc, #52]	; (8040b2c <HAL_TIM_Base_MspInit+0x48>)
 8040af8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8040afa:	4a0c      	ldr	r2, [pc, #48]	; (8040b2c <HAL_TIM_Base_MspInit+0x48>)
 8040afc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8040b00:	6613      	str	r3, [r2, #96]	; 0x60
 8040b02:	4b0a      	ldr	r3, [pc, #40]	; (8040b2c <HAL_TIM_Base_MspInit+0x48>)
 8040b04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8040b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8040b0a:	60fb      	str	r3, [r7, #12]
 8040b0c:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8040b0e:	2200      	movs	r2, #0
 8040b10:	2100      	movs	r1, #0
 8040b12:	2019      	movs	r0, #25
 8040b14:	f000 fa6f 	bl	8040ff6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8040b18:	2019      	movs	r0, #25
 8040b1a:	f000 fa86 	bl	804102a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8040b1e:	bf00      	nop
 8040b20:	3710      	adds	r7, #16
 8040b22:	46bd      	mov	sp, r7
 8040b24:	bd80      	pop	{r7, pc}
 8040b26:	bf00      	nop
 8040b28:	40014400 	.word	0x40014400
 8040b2c:	40021000 	.word	0x40021000

08040b30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8040b30:	b580      	push	{r7, lr}
 8040b32:	b08a      	sub	sp, #40	; 0x28
 8040b34:	af00      	add	r7, sp, #0
 8040b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8040b38:	f107 0314 	add.w	r3, r7, #20
 8040b3c:	2200      	movs	r2, #0
 8040b3e:	601a      	str	r2, [r3, #0]
 8040b40:	605a      	str	r2, [r3, #4]
 8040b42:	609a      	str	r2, [r3, #8]
 8040b44:	60da      	str	r2, [r3, #12]
 8040b46:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8040b48:	687b      	ldr	r3, [r7, #4]
 8040b4a:	681b      	ldr	r3, [r3, #0]
 8040b4c:	4a1b      	ldr	r2, [pc, #108]	; (8040bbc <HAL_UART_MspInit+0x8c>)
 8040b4e:	4293      	cmp	r3, r2
 8040b50:	d12f      	bne.n	8040bb2 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8040b52:	4b1b      	ldr	r3, [pc, #108]	; (8040bc0 <HAL_UART_MspInit+0x90>)
 8040b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8040b56:	4a1a      	ldr	r2, [pc, #104]	; (8040bc0 <HAL_UART_MspInit+0x90>)
 8040b58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8040b5c:	6613      	str	r3, [r2, #96]	; 0x60
 8040b5e:	4b18      	ldr	r3, [pc, #96]	; (8040bc0 <HAL_UART_MspInit+0x90>)
 8040b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8040b62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8040b66:	613b      	str	r3, [r7, #16]
 8040b68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8040b6a:	4b15      	ldr	r3, [pc, #84]	; (8040bc0 <HAL_UART_MspInit+0x90>)
 8040b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040b6e:	4a14      	ldr	r2, [pc, #80]	; (8040bc0 <HAL_UART_MspInit+0x90>)
 8040b70:	f043 0304 	orr.w	r3, r3, #4
 8040b74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8040b76:	4b12      	ldr	r3, [pc, #72]	; (8040bc0 <HAL_UART_MspInit+0x90>)
 8040b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040b7a:	f003 0304 	and.w	r3, r3, #4
 8040b7e:	60fb      	str	r3, [r7, #12]
 8040b80:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8040b82:	2330      	movs	r3, #48	; 0x30
 8040b84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8040b86:	2302      	movs	r3, #2
 8040b88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040b8a:	2300      	movs	r3, #0
 8040b8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8040b8e:	2300      	movs	r3, #0
 8040b90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8040b92:	2307      	movs	r3, #7
 8040b94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8040b96:	f107 0314 	add.w	r3, r7, #20
 8040b9a:	4619      	mov	r1, r3
 8040b9c:	4809      	ldr	r0, [pc, #36]	; (8040bc4 <HAL_UART_MspInit+0x94>)
 8040b9e:	f000 fd69 	bl	8041674 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8040ba2:	2200      	movs	r2, #0
 8040ba4:	2100      	movs	r1, #0
 8040ba6:	2025      	movs	r0, #37	; 0x25
 8040ba8:	f000 fa25 	bl	8040ff6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8040bac:	2025      	movs	r0, #37	; 0x25
 8040bae:	f000 fa3c 	bl	804102a <HAL_NVIC_EnableIRQ>
    // 使能接收中断
//    __HAL_UART_ENABLE_IT(HAL_UART_IRQHandler, UART_IT_RXNE);
  /* USER CODE END USART1_MspInit 1 */
  }

}
 8040bb2:	bf00      	nop
 8040bb4:	3728      	adds	r7, #40	; 0x28
 8040bb6:	46bd      	mov	sp, r7
 8040bb8:	bd80      	pop	{r7, pc}
 8040bba:	bf00      	nop
 8040bbc:	40013800 	.word	0x40013800
 8040bc0:	40021000 	.word	0x40021000
 8040bc4:	48000800 	.word	0x48000800

08040bc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8040bc8:	b480      	push	{r7}
 8040bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8040bcc:	e7fe      	b.n	8040bcc <NMI_Handler+0x4>

08040bce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8040bce:	b480      	push	{r7}
 8040bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8040bd2:	e7fe      	b.n	8040bd2 <HardFault_Handler+0x4>

08040bd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8040bd4:	b480      	push	{r7}
 8040bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8040bd8:	e7fe      	b.n	8040bd8 <MemManage_Handler+0x4>

08040bda <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8040bda:	b480      	push	{r7}
 8040bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8040bde:	e7fe      	b.n	8040bde <BusFault_Handler+0x4>

08040be0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8040be0:	b480      	push	{r7}
 8040be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8040be4:	e7fe      	b.n	8040be4 <UsageFault_Handler+0x4>

08040be6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8040be6:	b480      	push	{r7}
 8040be8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8040bea:	bf00      	nop
 8040bec:	46bd      	mov	sp, r7
 8040bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040bf2:	4770      	bx	lr

08040bf4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8040bf4:	b480      	push	{r7}
 8040bf6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8040bf8:	bf00      	nop
 8040bfa:	46bd      	mov	sp, r7
 8040bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040c00:	4770      	bx	lr

08040c02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8040c02:	b480      	push	{r7}
 8040c04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8040c06:	bf00      	nop
 8040c08:	46bd      	mov	sp, r7
 8040c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040c0e:	4770      	bx	lr

08040c10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8040c10:	b580      	push	{r7, lr}
 8040c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8040c14:	f000 f8f6 	bl	8040e04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8040c18:	bf00      	nop
 8040c1a:	bd80      	pop	{r7, pc}

08040c1c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8040c1c:	b580      	push	{r7, lr}
 8040c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8040c20:	4802      	ldr	r0, [pc, #8]	; (8040c2c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8040c22:	f002 f805 	bl	8042c30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8040c26:	bf00      	nop
 8040c28:	bd80      	pop	{r7, pc}
 8040c2a:	bf00      	nop
 8040c2c:	20000078 	.word	0x20000078

08040c30 <USART1_IRQHandler>:

//UART ISR Handler 
 void USART1_IRQHandler(void) {
 8040c30:	b580      	push	{r7, lr}
 8040c32:	af00      	add	r7, sp, #0
  //  else
  //  {
  //   uart_send_msg("UART GG\r\n");
  //    uart1_handler();
  //  }
 	HAL_UART_IRQHandler(&huart1);
 8040c34:	4802      	ldr	r0, [pc, #8]	; (8040c40 <USART1_IRQHandler+0x10>)
 8040c36:	f002 fc3d 	bl	80434b4 <HAL_UART_IRQHandler>
 }
 8040c3a:	bf00      	nop
 8040c3c:	bd80      	pop	{r7, pc}
 8040c3e:	bf00      	nop
 8040c40:	200000c4 	.word	0x200000c4

08040c44 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8040c44:	b580      	push	{r7, lr}
 8040c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8040c48:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8040c4c:	f000 fec6 	bl	80419dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8040c50:	bf00      	nop
 8040c52:	bd80      	pop	{r7, pc}

08040c54 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8040c54:	b480      	push	{r7}
 8040c56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8040c58:	4b07      	ldr	r3, [pc, #28]	; (8040c78 <SystemInit+0x24>)
 8040c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8040c5e:	4a06      	ldr	r2, [pc, #24]	; (8040c78 <SystemInit+0x24>)
 8040c60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8040c64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8040c68:	4b03      	ldr	r3, [pc, #12]	; (8040c78 <SystemInit+0x24>)
 8040c6a:	4a04      	ldr	r2, [pc, #16]	; (8040c7c <SystemInit+0x28>)
 8040c6c:	609a      	str	r2, [r3, #8]
#endif
}
 8040c6e:	bf00      	nop
 8040c70:	46bd      	mov	sp, r7
 8040c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040c76:	4770      	bx	lr
 8040c78:	e000ed00 	.word	0xe000ed00
 8040c7c:	08040000 	.word	0x08040000

08040c80 <uart_send_msg>:
  * @brief	Sends a message through UART
  * @param	user_data
  * @retval	status
  */
HAL_StatusTypeDef uart_send_msg(char *user_data)
{
 8040c80:	b580      	push	{r7, lr}
 8040c82:	b084      	sub	sp, #16
 8040c84:	af00      	add	r7, sp, #0
 8040c86:	6078      	str	r0, [r7, #4]
	// do nothing
	return HAL_OK;
#else
	HAL_StatusTypeDef Status;
	Status = HAL_UART_Transmit_IT(&huart1, (uint8_t*)user_data,
			strlen(user_data));
 8040c88:	6878      	ldr	r0, [r7, #4]
 8040c8a:	f7ff fac5 	bl	8040218 <strlen>
 8040c8e:	4603      	mov	r3, r0
	Status = HAL_UART_Transmit_IT(&huart1, (uint8_t*)user_data,
 8040c90:	b29b      	uxth	r3, r3
 8040c92:	461a      	mov	r2, r3
 8040c94:	6879      	ldr	r1, [r7, #4]
 8040c96:	4805      	ldr	r0, [pc, #20]	; (8040cac <uart_send_msg+0x2c>)
 8040c98:	f002 fab0 	bl	80431fc <HAL_UART_Transmit_IT>
 8040c9c:	4603      	mov	r3, r0
 8040c9e:	73fb      	strb	r3, [r7, #15]

	return Status;
 8040ca0:	7bfb      	ldrb	r3, [r7, #15]
#endif
}
 8040ca2:	4618      	mov	r0, r3
 8040ca4:	3710      	adds	r7, #16
 8040ca6:	46bd      	mov	sp, r7
 8040ca8:	bd80      	pop	{r7, pc}
 8040caa:	bf00      	nop
 8040cac:	200000c4 	.word	0x200000c4

08040cb0 <HAL_UART_RxCpltCallback>:
  * @note   This example shows a simple way to report end of IT Rx transfer, and
  *         you can add your own implementation.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8040cb0:	b580      	push	{r7, lr}
 8040cb2:	b082      	sub	sp, #8
 8040cb4:	af00      	add	r7, sp, #0
 8040cb6:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1,aRxMessage,1);
 8040cb8:	2201      	movs	r2, #1
 8040cba:	490f      	ldr	r1, [pc, #60]	; (8040cf8 <HAL_UART_RxCpltCallback+0x48>)
 8040cbc:	480f      	ldr	r0, [pc, #60]	; (8040cfc <HAL_UART_RxCpltCallback+0x4c>)
 8040cbe:	f002 fb21 	bl	8043304 <HAL_UART_Receive_IT>
	if(aRxMessage[0]=='1')
 8040cc2:	4b0d      	ldr	r3, [pc, #52]	; (8040cf8 <HAL_UART_RxCpltCallback+0x48>)
 8040cc4:	781b      	ldrb	r3, [r3, #0]
 8040cc6:	2b31      	cmp	r3, #49	; 0x31
 8040cc8:	d103      	bne.n	8040cd2 <HAL_UART_RxCpltCallback+0x22>
	{
      uart_send_msg("OK");		
 8040cca:	480d      	ldr	r0, [pc, #52]	; (8040d00 <HAL_UART_RxCpltCallback+0x50>)
 8040ccc:	f7ff ffd8 	bl	8040c80 <uart_send_msg>
 8040cd0:	e00a      	b.n	8040ce8 <HAL_UART_RxCpltCallback+0x38>
	}
	else if(aRxMessage[0]=='2')
 8040cd2:	4b09      	ldr	r3, [pc, #36]	; (8040cf8 <HAL_UART_RxCpltCallback+0x48>)
 8040cd4:	781b      	ldrb	r3, [r3, #0]
 8040cd6:	2b32      	cmp	r3, #50	; 0x32
 8040cd8:	d103      	bne.n	8040ce2 <HAL_UART_RxCpltCallback+0x32>
	{
		 uart_send_msg("FUCK U");	
 8040cda:	480a      	ldr	r0, [pc, #40]	; (8040d04 <HAL_UART_RxCpltCallback+0x54>)
 8040cdc:	f7ff ffd0 	bl	8040c80 <uart_send_msg>
 8040ce0:	e002      	b.n	8040ce8 <HAL_UART_RxCpltCallback+0x38>
	}
  else
  {
     uart_send_msg("SO Bad");	
 8040ce2:	4809      	ldr	r0, [pc, #36]	; (8040d08 <HAL_UART_RxCpltCallback+0x58>)
 8040ce4:	f7ff ffcc 	bl	8040c80 <uart_send_msg>
 8040ce8:	4b03      	ldr	r3, [pc, #12]	; (8040cf8 <HAL_UART_RxCpltCallback+0x48>)
 8040cea:	2200      	movs	r2, #0
 8040cec:	701a      	strb	r2, [r3, #0]
  }
	memset(aRxMessage,0,sizeof(aRxMessage));  //清除字串

}
 8040cee:	bf00      	nop
 8040cf0:	3708      	adds	r7, #8
 8040cf2:	46bd      	mov	sp, r7
 8040cf4:	bd80      	pop	{r7, pc}
 8040cf6:	bf00      	nop
 8040cf8:	20000150 	.word	0x20000150
 8040cfc:	200000c4 	.word	0x200000c4
 8040d00:	08044a90 	.word	0x08044a90
 8040d04:	08044a94 	.word	0x08044a94
 8040d08:	08044a9c 	.word	0x08044a9c

08040d0c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8040d0c:	480d      	ldr	r0, [pc, #52]	; (8040d44 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8040d0e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8040d10:	480d      	ldr	r0, [pc, #52]	; (8040d48 <LoopForever+0x6>)
  ldr r1, =_edata
 8040d12:	490e      	ldr	r1, [pc, #56]	; (8040d4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8040d14:	4a0e      	ldr	r2, [pc, #56]	; (8040d50 <LoopForever+0xe>)
  movs r3, #0
 8040d16:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8040d18:	e002      	b.n	8040d20 <LoopCopyDataInit>

08040d1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8040d1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8040d1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8040d1e:	3304      	adds	r3, #4

08040d20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8040d20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8040d22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8040d24:	d3f9      	bcc.n	8040d1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8040d26:	4a0b      	ldr	r2, [pc, #44]	; (8040d54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8040d28:	4c0b      	ldr	r4, [pc, #44]	; (8040d58 <LoopForever+0x16>)
  movs r3, #0
 8040d2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8040d2c:	e001      	b.n	8040d32 <LoopFillZerobss>

08040d2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8040d2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8040d30:	3204      	adds	r2, #4

08040d32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8040d32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8040d34:	d3fb      	bcc.n	8040d2e <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8040d36:	f7ff ff8d 	bl	8040c54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8040d3a:	f003 fe0f 	bl	804495c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8040d3e:	f7ff fcf7 	bl	8040730 <main>

08040d42 <LoopForever>:

LoopForever:
    b LoopForever
 8040d42:	e7fe      	b.n	8040d42 <LoopForever>
  ldr   r0, =_estack
 8040d44:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8040d48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8040d4c:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8040d50:	08044af4 	.word	0x08044af4
  ldr r2, =_sbss
 8040d54:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8040d58:	20000158 	.word	0x20000158

08040d5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8040d5c:	e7fe      	b.n	8040d5c <ADC1_2_IRQHandler>

08040d5e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8040d5e:	b580      	push	{r7, lr}
 8040d60:	b082      	sub	sp, #8
 8040d62:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8040d64:	2300      	movs	r3, #0
 8040d66:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8040d68:	2003      	movs	r0, #3
 8040d6a:	f000 f939 	bl	8040fe0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8040d6e:	2000      	movs	r0, #0
 8040d70:	f000 f80e 	bl	8040d90 <HAL_InitTick>
 8040d74:	4603      	mov	r3, r0
 8040d76:	2b00      	cmp	r3, #0
 8040d78:	d002      	beq.n	8040d80 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8040d7a:	2301      	movs	r3, #1
 8040d7c:	71fb      	strb	r3, [r7, #7]
 8040d7e:	e001      	b.n	8040d84 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8040d80:	f7ff fe8c 	bl	8040a9c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8040d84:	79fb      	ldrb	r3, [r7, #7]

}
 8040d86:	4618      	mov	r0, r3
 8040d88:	3708      	adds	r7, #8
 8040d8a:	46bd      	mov	sp, r7
 8040d8c:	bd80      	pop	{r7, pc}
	...

08040d90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8040d90:	b580      	push	{r7, lr}
 8040d92:	b084      	sub	sp, #16
 8040d94:	af00      	add	r7, sp, #0
 8040d96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8040d98:	2300      	movs	r3, #0
 8040d9a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8040d9c:	4b16      	ldr	r3, [pc, #88]	; (8040df8 <HAL_InitTick+0x68>)
 8040d9e:	681b      	ldr	r3, [r3, #0]
 8040da0:	2b00      	cmp	r3, #0
 8040da2:	d022      	beq.n	8040dea <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8040da4:	4b15      	ldr	r3, [pc, #84]	; (8040dfc <HAL_InitTick+0x6c>)
 8040da6:	681a      	ldr	r2, [r3, #0]
 8040da8:	4b13      	ldr	r3, [pc, #76]	; (8040df8 <HAL_InitTick+0x68>)
 8040daa:	681b      	ldr	r3, [r3, #0]
 8040dac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8040db0:	fbb1 f3f3 	udiv	r3, r1, r3
 8040db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8040db8:	4618      	mov	r0, r3
 8040dba:	f000 f944 	bl	8041046 <HAL_SYSTICK_Config>
 8040dbe:	4603      	mov	r3, r0
 8040dc0:	2b00      	cmp	r3, #0
 8040dc2:	d10f      	bne.n	8040de4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8040dc4:	687b      	ldr	r3, [r7, #4]
 8040dc6:	2b0f      	cmp	r3, #15
 8040dc8:	d809      	bhi.n	8040dde <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8040dca:	2200      	movs	r2, #0
 8040dcc:	6879      	ldr	r1, [r7, #4]
 8040dce:	f04f 30ff 	mov.w	r0, #4294967295
 8040dd2:	f000 f910 	bl	8040ff6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8040dd6:	4a0a      	ldr	r2, [pc, #40]	; (8040e00 <HAL_InitTick+0x70>)
 8040dd8:	687b      	ldr	r3, [r7, #4]
 8040dda:	6013      	str	r3, [r2, #0]
 8040ddc:	e007      	b.n	8040dee <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8040dde:	2301      	movs	r3, #1
 8040de0:	73fb      	strb	r3, [r7, #15]
 8040de2:	e004      	b.n	8040dee <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8040de4:	2301      	movs	r3, #1
 8040de6:	73fb      	strb	r3, [r7, #15]
 8040de8:	e001      	b.n	8040dee <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8040dea:	2301      	movs	r3, #1
 8040dec:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8040dee:	7bfb      	ldrb	r3, [r7, #15]
}
 8040df0:	4618      	mov	r0, r3
 8040df2:	3710      	adds	r7, #16
 8040df4:	46bd      	mov	sp, r7
 8040df6:	bd80      	pop	{r7, pc}
 8040df8:	20000008 	.word	0x20000008
 8040dfc:	20000000 	.word	0x20000000
 8040e00:	20000004 	.word	0x20000004

08040e04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8040e04:	b480      	push	{r7}
 8040e06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8040e08:	4b05      	ldr	r3, [pc, #20]	; (8040e20 <HAL_IncTick+0x1c>)
 8040e0a:	681a      	ldr	r2, [r3, #0]
 8040e0c:	4b05      	ldr	r3, [pc, #20]	; (8040e24 <HAL_IncTick+0x20>)
 8040e0e:	681b      	ldr	r3, [r3, #0]
 8040e10:	4413      	add	r3, r2
 8040e12:	4a03      	ldr	r2, [pc, #12]	; (8040e20 <HAL_IncTick+0x1c>)
 8040e14:	6013      	str	r3, [r2, #0]
}
 8040e16:	bf00      	nop
 8040e18:	46bd      	mov	sp, r7
 8040e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040e1e:	4770      	bx	lr
 8040e20:	20000154 	.word	0x20000154
 8040e24:	20000008 	.word	0x20000008

08040e28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8040e28:	b480      	push	{r7}
 8040e2a:	af00      	add	r7, sp, #0
  return uwTick;
 8040e2c:	4b03      	ldr	r3, [pc, #12]	; (8040e3c <HAL_GetTick+0x14>)
 8040e2e:	681b      	ldr	r3, [r3, #0]
}
 8040e30:	4618      	mov	r0, r3
 8040e32:	46bd      	mov	sp, r7
 8040e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040e38:	4770      	bx	lr
 8040e3a:	bf00      	nop
 8040e3c:	20000154 	.word	0x20000154

08040e40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8040e40:	b480      	push	{r7}
 8040e42:	b085      	sub	sp, #20
 8040e44:	af00      	add	r7, sp, #0
 8040e46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8040e48:	687b      	ldr	r3, [r7, #4]
 8040e4a:	f003 0307 	and.w	r3, r3, #7
 8040e4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8040e50:	4b0c      	ldr	r3, [pc, #48]	; (8040e84 <__NVIC_SetPriorityGrouping+0x44>)
 8040e52:	68db      	ldr	r3, [r3, #12]
 8040e54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8040e56:	68ba      	ldr	r2, [r7, #8]
 8040e58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8040e5c:	4013      	ands	r3, r2
 8040e5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8040e60:	68fb      	ldr	r3, [r7, #12]
 8040e62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8040e64:	68bb      	ldr	r3, [r7, #8]
 8040e66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8040e68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8040e6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8040e70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8040e72:	4a04      	ldr	r2, [pc, #16]	; (8040e84 <__NVIC_SetPriorityGrouping+0x44>)
 8040e74:	68bb      	ldr	r3, [r7, #8]
 8040e76:	60d3      	str	r3, [r2, #12]
}
 8040e78:	bf00      	nop
 8040e7a:	3714      	adds	r7, #20
 8040e7c:	46bd      	mov	sp, r7
 8040e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040e82:	4770      	bx	lr
 8040e84:	e000ed00 	.word	0xe000ed00

08040e88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8040e88:	b480      	push	{r7}
 8040e8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8040e8c:	4b04      	ldr	r3, [pc, #16]	; (8040ea0 <__NVIC_GetPriorityGrouping+0x18>)
 8040e8e:	68db      	ldr	r3, [r3, #12]
 8040e90:	0a1b      	lsrs	r3, r3, #8
 8040e92:	f003 0307 	and.w	r3, r3, #7
}
 8040e96:	4618      	mov	r0, r3
 8040e98:	46bd      	mov	sp, r7
 8040e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040e9e:	4770      	bx	lr
 8040ea0:	e000ed00 	.word	0xe000ed00

08040ea4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8040ea4:	b480      	push	{r7}
 8040ea6:	b083      	sub	sp, #12
 8040ea8:	af00      	add	r7, sp, #0
 8040eaa:	4603      	mov	r3, r0
 8040eac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8040eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040eb2:	2b00      	cmp	r3, #0
 8040eb4:	db0b      	blt.n	8040ece <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8040eb6:	79fb      	ldrb	r3, [r7, #7]
 8040eb8:	f003 021f 	and.w	r2, r3, #31
 8040ebc:	4907      	ldr	r1, [pc, #28]	; (8040edc <__NVIC_EnableIRQ+0x38>)
 8040ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040ec2:	095b      	lsrs	r3, r3, #5
 8040ec4:	2001      	movs	r0, #1
 8040ec6:	fa00 f202 	lsl.w	r2, r0, r2
 8040eca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8040ece:	bf00      	nop
 8040ed0:	370c      	adds	r7, #12
 8040ed2:	46bd      	mov	sp, r7
 8040ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040ed8:	4770      	bx	lr
 8040eda:	bf00      	nop
 8040edc:	e000e100 	.word	0xe000e100

08040ee0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8040ee0:	b480      	push	{r7}
 8040ee2:	b083      	sub	sp, #12
 8040ee4:	af00      	add	r7, sp, #0
 8040ee6:	4603      	mov	r3, r0
 8040ee8:	6039      	str	r1, [r7, #0]
 8040eea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8040eec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040ef0:	2b00      	cmp	r3, #0
 8040ef2:	db0a      	blt.n	8040f0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8040ef4:	683b      	ldr	r3, [r7, #0]
 8040ef6:	b2da      	uxtb	r2, r3
 8040ef8:	490c      	ldr	r1, [pc, #48]	; (8040f2c <__NVIC_SetPriority+0x4c>)
 8040efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040efe:	0112      	lsls	r2, r2, #4
 8040f00:	b2d2      	uxtb	r2, r2
 8040f02:	440b      	add	r3, r1
 8040f04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8040f08:	e00a      	b.n	8040f20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8040f0a:	683b      	ldr	r3, [r7, #0]
 8040f0c:	b2da      	uxtb	r2, r3
 8040f0e:	4908      	ldr	r1, [pc, #32]	; (8040f30 <__NVIC_SetPriority+0x50>)
 8040f10:	79fb      	ldrb	r3, [r7, #7]
 8040f12:	f003 030f 	and.w	r3, r3, #15
 8040f16:	3b04      	subs	r3, #4
 8040f18:	0112      	lsls	r2, r2, #4
 8040f1a:	b2d2      	uxtb	r2, r2
 8040f1c:	440b      	add	r3, r1
 8040f1e:	761a      	strb	r2, [r3, #24]
}
 8040f20:	bf00      	nop
 8040f22:	370c      	adds	r7, #12
 8040f24:	46bd      	mov	sp, r7
 8040f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040f2a:	4770      	bx	lr
 8040f2c:	e000e100 	.word	0xe000e100
 8040f30:	e000ed00 	.word	0xe000ed00

08040f34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8040f34:	b480      	push	{r7}
 8040f36:	b089      	sub	sp, #36	; 0x24
 8040f38:	af00      	add	r7, sp, #0
 8040f3a:	60f8      	str	r0, [r7, #12]
 8040f3c:	60b9      	str	r1, [r7, #8]
 8040f3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8040f40:	68fb      	ldr	r3, [r7, #12]
 8040f42:	f003 0307 	and.w	r3, r3, #7
 8040f46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8040f48:	69fb      	ldr	r3, [r7, #28]
 8040f4a:	f1c3 0307 	rsb	r3, r3, #7
 8040f4e:	2b04      	cmp	r3, #4
 8040f50:	bf28      	it	cs
 8040f52:	2304      	movcs	r3, #4
 8040f54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8040f56:	69fb      	ldr	r3, [r7, #28]
 8040f58:	3304      	adds	r3, #4
 8040f5a:	2b06      	cmp	r3, #6
 8040f5c:	d902      	bls.n	8040f64 <NVIC_EncodePriority+0x30>
 8040f5e:	69fb      	ldr	r3, [r7, #28]
 8040f60:	3b03      	subs	r3, #3
 8040f62:	e000      	b.n	8040f66 <NVIC_EncodePriority+0x32>
 8040f64:	2300      	movs	r3, #0
 8040f66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8040f68:	f04f 32ff 	mov.w	r2, #4294967295
 8040f6c:	69bb      	ldr	r3, [r7, #24]
 8040f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8040f72:	43da      	mvns	r2, r3
 8040f74:	68bb      	ldr	r3, [r7, #8]
 8040f76:	401a      	ands	r2, r3
 8040f78:	697b      	ldr	r3, [r7, #20]
 8040f7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8040f7c:	f04f 31ff 	mov.w	r1, #4294967295
 8040f80:	697b      	ldr	r3, [r7, #20]
 8040f82:	fa01 f303 	lsl.w	r3, r1, r3
 8040f86:	43d9      	mvns	r1, r3
 8040f88:	687b      	ldr	r3, [r7, #4]
 8040f8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8040f8c:	4313      	orrs	r3, r2
         );
}
 8040f8e:	4618      	mov	r0, r3
 8040f90:	3724      	adds	r7, #36	; 0x24
 8040f92:	46bd      	mov	sp, r7
 8040f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040f98:	4770      	bx	lr
	...

08040f9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8040f9c:	b580      	push	{r7, lr}
 8040f9e:	b082      	sub	sp, #8
 8040fa0:	af00      	add	r7, sp, #0
 8040fa2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8040fa4:	687b      	ldr	r3, [r7, #4]
 8040fa6:	3b01      	subs	r3, #1
 8040fa8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8040fac:	d301      	bcc.n	8040fb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8040fae:	2301      	movs	r3, #1
 8040fb0:	e00f      	b.n	8040fd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8040fb2:	4a0a      	ldr	r2, [pc, #40]	; (8040fdc <SysTick_Config+0x40>)
 8040fb4:	687b      	ldr	r3, [r7, #4]
 8040fb6:	3b01      	subs	r3, #1
 8040fb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8040fba:	210f      	movs	r1, #15
 8040fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8040fc0:	f7ff ff8e 	bl	8040ee0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8040fc4:	4b05      	ldr	r3, [pc, #20]	; (8040fdc <SysTick_Config+0x40>)
 8040fc6:	2200      	movs	r2, #0
 8040fc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8040fca:	4b04      	ldr	r3, [pc, #16]	; (8040fdc <SysTick_Config+0x40>)
 8040fcc:	2207      	movs	r2, #7
 8040fce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8040fd0:	2300      	movs	r3, #0
}
 8040fd2:	4618      	mov	r0, r3
 8040fd4:	3708      	adds	r7, #8
 8040fd6:	46bd      	mov	sp, r7
 8040fd8:	bd80      	pop	{r7, pc}
 8040fda:	bf00      	nop
 8040fdc:	e000e010 	.word	0xe000e010

08040fe0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8040fe0:	b580      	push	{r7, lr}
 8040fe2:	b082      	sub	sp, #8
 8040fe4:	af00      	add	r7, sp, #0
 8040fe6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8040fe8:	6878      	ldr	r0, [r7, #4]
 8040fea:	f7ff ff29 	bl	8040e40 <__NVIC_SetPriorityGrouping>
}
 8040fee:	bf00      	nop
 8040ff0:	3708      	adds	r7, #8
 8040ff2:	46bd      	mov	sp, r7
 8040ff4:	bd80      	pop	{r7, pc}

08040ff6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8040ff6:	b580      	push	{r7, lr}
 8040ff8:	b086      	sub	sp, #24
 8040ffa:	af00      	add	r7, sp, #0
 8040ffc:	4603      	mov	r3, r0
 8040ffe:	60b9      	str	r1, [r7, #8]
 8041000:	607a      	str	r2, [r7, #4]
 8041002:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8041004:	f7ff ff40 	bl	8040e88 <__NVIC_GetPriorityGrouping>
 8041008:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 804100a:	687a      	ldr	r2, [r7, #4]
 804100c:	68b9      	ldr	r1, [r7, #8]
 804100e:	6978      	ldr	r0, [r7, #20]
 8041010:	f7ff ff90 	bl	8040f34 <NVIC_EncodePriority>
 8041014:	4602      	mov	r2, r0
 8041016:	f997 300f 	ldrsb.w	r3, [r7, #15]
 804101a:	4611      	mov	r1, r2
 804101c:	4618      	mov	r0, r3
 804101e:	f7ff ff5f 	bl	8040ee0 <__NVIC_SetPriority>
}
 8041022:	bf00      	nop
 8041024:	3718      	adds	r7, #24
 8041026:	46bd      	mov	sp, r7
 8041028:	bd80      	pop	{r7, pc}

0804102a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 804102a:	b580      	push	{r7, lr}
 804102c:	b082      	sub	sp, #8
 804102e:	af00      	add	r7, sp, #0
 8041030:	4603      	mov	r3, r0
 8041032:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8041034:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8041038:	4618      	mov	r0, r3
 804103a:	f7ff ff33 	bl	8040ea4 <__NVIC_EnableIRQ>
}
 804103e:	bf00      	nop
 8041040:	3708      	adds	r7, #8
 8041042:	46bd      	mov	sp, r7
 8041044:	bd80      	pop	{r7, pc}

08041046 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8041046:	b580      	push	{r7, lr}
 8041048:	b082      	sub	sp, #8
 804104a:	af00      	add	r7, sp, #0
 804104c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 804104e:	6878      	ldr	r0, [r7, #4]
 8041050:	f7ff ffa4 	bl	8040f9c <SysTick_Config>
 8041054:	4603      	mov	r3, r0
}
 8041056:	4618      	mov	r0, r3
 8041058:	3708      	adds	r7, #8
 804105a:	46bd      	mov	sp, r7
 804105c:	bd80      	pop	{r7, pc}

0804105e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 804105e:	b580      	push	{r7, lr}
 8041060:	b084      	sub	sp, #16
 8041062:	af00      	add	r7, sp, #0
 8041064:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8041066:	2300      	movs	r3, #0
 8041068:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 804106a:	687b      	ldr	r3, [r7, #4]
 804106c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8041070:	b2db      	uxtb	r3, r3
 8041072:	2b02      	cmp	r3, #2
 8041074:	d00d      	beq.n	8041092 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8041076:	687b      	ldr	r3, [r7, #4]
 8041078:	2204      	movs	r2, #4
 804107a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 804107c:	687b      	ldr	r3, [r7, #4]
 804107e:	2201      	movs	r2, #1
 8041080:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8041084:	687b      	ldr	r3, [r7, #4]
 8041086:	2200      	movs	r2, #0
 8041088:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 804108c:	2301      	movs	r3, #1
 804108e:	73fb      	strb	r3, [r7, #15]
 8041090:	e047      	b.n	8041122 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8041092:	687b      	ldr	r3, [r7, #4]
 8041094:	681b      	ldr	r3, [r3, #0]
 8041096:	681a      	ldr	r2, [r3, #0]
 8041098:	687b      	ldr	r3, [r7, #4]
 804109a:	681b      	ldr	r3, [r3, #0]
 804109c:	f022 020e 	bic.w	r2, r2, #14
 80410a0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80410a2:	687b      	ldr	r3, [r7, #4]
 80410a4:	681b      	ldr	r3, [r3, #0]
 80410a6:	681a      	ldr	r2, [r3, #0]
 80410a8:	687b      	ldr	r3, [r7, #4]
 80410aa:	681b      	ldr	r3, [r3, #0]
 80410ac:	f022 0201 	bic.w	r2, r2, #1
 80410b0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80410b2:	687b      	ldr	r3, [r7, #4]
 80410b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80410b6:	681a      	ldr	r2, [r3, #0]
 80410b8:	687b      	ldr	r3, [r7, #4]
 80410ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80410bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80410c0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80410c2:	687b      	ldr	r3, [r7, #4]
 80410c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80410c6:	f003 021f 	and.w	r2, r3, #31
 80410ca:	687b      	ldr	r3, [r7, #4]
 80410cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80410ce:	2101      	movs	r1, #1
 80410d0:	fa01 f202 	lsl.w	r2, r1, r2
 80410d4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80410d6:	687b      	ldr	r3, [r7, #4]
 80410d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80410da:	687a      	ldr	r2, [r7, #4]
 80410dc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80410de:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80410e0:	687b      	ldr	r3, [r7, #4]
 80410e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80410e4:	2b00      	cmp	r3, #0
 80410e6:	d00c      	beq.n	8041102 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80410e8:	687b      	ldr	r3, [r7, #4]
 80410ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80410ec:	681a      	ldr	r2, [r3, #0]
 80410ee:	687b      	ldr	r3, [r7, #4]
 80410f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80410f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80410f6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80410f8:	687b      	ldr	r3, [r7, #4]
 80410fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80410fc:	687a      	ldr	r2, [r7, #4]
 80410fe:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8041100:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8041102:	687b      	ldr	r3, [r7, #4]
 8041104:	2201      	movs	r2, #1
 8041106:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 804110a:	687b      	ldr	r3, [r7, #4]
 804110c:	2200      	movs	r2, #0
 804110e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8041112:	687b      	ldr	r3, [r7, #4]
 8041114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8041116:	2b00      	cmp	r3, #0
 8041118:	d003      	beq.n	8041122 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 804111a:	687b      	ldr	r3, [r7, #4]
 804111c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804111e:	6878      	ldr	r0, [r7, #4]
 8041120:	4798      	blx	r3
    }
  }
  return status;
 8041122:	7bfb      	ldrb	r3, [r7, #15]
}
 8041124:	4618      	mov	r0, r3
 8041126:	3710      	adds	r7, #16
 8041128:	46bd      	mov	sp, r7
 804112a:	bd80      	pop	{r7, pc}

0804112c <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 804112c:	b580      	push	{r7, lr}
 804112e:	b086      	sub	sp, #24
 8041130:	af00      	add	r7, sp, #0
 8041132:	60f8      	str	r0, [r7, #12]
 8041134:	60b9      	str	r1, [r7, #8]
 8041136:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 804113a:	2300      	movs	r3, #0
 804113c:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 804113e:	4b24      	ldr	r3, [pc, #144]	; (80411d0 <HAL_FLASH_Program+0xa4>)
 8041140:	781b      	ldrb	r3, [r3, #0]
 8041142:	2b01      	cmp	r3, #1
 8041144:	d101      	bne.n	804114a <HAL_FLASH_Program+0x1e>
 8041146:	2302      	movs	r3, #2
 8041148:	e03e      	b.n	80411c8 <HAL_FLASH_Program+0x9c>
 804114a:	4b21      	ldr	r3, [pc, #132]	; (80411d0 <HAL_FLASH_Program+0xa4>)
 804114c:	2201      	movs	r2, #1
 804114e:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8041150:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8041154:	f000 f87c 	bl	8041250 <FLASH_WaitForLastOperation>
 8041158:	4603      	mov	r3, r0
 804115a:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 804115c:	7dfb      	ldrb	r3, [r7, #23]
 804115e:	2b00      	cmp	r3, #0
 8041160:	d12e      	bne.n	80411c0 <HAL_FLASH_Program+0x94>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8041162:	4b1b      	ldr	r3, [pc, #108]	; (80411d0 <HAL_FLASH_Program+0xa4>)
 8041164:	2200      	movs	r2, #0
 8041166:	605a      	str	r2, [r3, #4]

    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8041168:	68fb      	ldr	r3, [r7, #12]
 804116a:	2b00      	cmp	r3, #0
 804116c:	d107      	bne.n	804117e <HAL_FLASH_Program+0x52>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 804116e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8041172:	68b8      	ldr	r0, [r7, #8]
 8041174:	f000 f8c0 	bl	80412f8 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8041178:	2301      	movs	r3, #1
 804117a:	613b      	str	r3, [r7, #16]
 804117c:	e010      	b.n	80411a0 <HAL_FLASH_Program+0x74>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 804117e:	68fb      	ldr	r3, [r7, #12]
 8041180:	2b01      	cmp	r3, #1
 8041182:	d002      	beq.n	804118a <HAL_FLASH_Program+0x5e>
 8041184:	68fb      	ldr	r3, [r7, #12]
 8041186:	2b02      	cmp	r3, #2
 8041188:	d10a      	bne.n	80411a0 <HAL_FLASH_Program+0x74>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 804118a:	683b      	ldr	r3, [r7, #0]
 804118c:	4619      	mov	r1, r3
 804118e:	68b8      	ldr	r0, [r7, #8]
 8041190:	f000 f8d8 	bl	8041344 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8041194:	68fb      	ldr	r3, [r7, #12]
 8041196:	2b02      	cmp	r3, #2
 8041198:	d102      	bne.n	80411a0 <HAL_FLASH_Program+0x74>
      {
        prog_bit = FLASH_CR_FSTPG;
 804119a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 804119e:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80411a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80411a4:	f000 f854 	bl	8041250 <FLASH_WaitForLastOperation>
 80411a8:	4603      	mov	r3, r0
 80411aa:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 80411ac:	693b      	ldr	r3, [r7, #16]
 80411ae:	2b00      	cmp	r3, #0
 80411b0:	d006      	beq.n	80411c0 <HAL_FLASH_Program+0x94>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 80411b2:	4b08      	ldr	r3, [pc, #32]	; (80411d4 <HAL_FLASH_Program+0xa8>)
 80411b4:	695a      	ldr	r2, [r3, #20]
 80411b6:	693b      	ldr	r3, [r7, #16]
 80411b8:	43db      	mvns	r3, r3
 80411ba:	4906      	ldr	r1, [pc, #24]	; (80411d4 <HAL_FLASH_Program+0xa8>)
 80411bc:	4013      	ands	r3, r2
 80411be:	614b      	str	r3, [r1, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80411c0:	4b03      	ldr	r3, [pc, #12]	; (80411d0 <HAL_FLASH_Program+0xa4>)
 80411c2:	2200      	movs	r2, #0
 80411c4:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 80411c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80411c8:	4618      	mov	r0, r3
 80411ca:	3718      	adds	r7, #24
 80411cc:	46bd      	mov	sp, r7
 80411ce:	bd80      	pop	{r7, pc}
 80411d0:	2000000c 	.word	0x2000000c
 80411d4:	40022000 	.word	0x40022000

080411d8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80411d8:	b480      	push	{r7}
 80411da:	b083      	sub	sp, #12
 80411dc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80411de:	2300      	movs	r3, #0
 80411e0:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80411e2:	4b0b      	ldr	r3, [pc, #44]	; (8041210 <HAL_FLASH_Unlock+0x38>)
 80411e4:	695b      	ldr	r3, [r3, #20]
 80411e6:	2b00      	cmp	r3, #0
 80411e8:	da0b      	bge.n	8041202 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80411ea:	4b09      	ldr	r3, [pc, #36]	; (8041210 <HAL_FLASH_Unlock+0x38>)
 80411ec:	4a09      	ldr	r2, [pc, #36]	; (8041214 <HAL_FLASH_Unlock+0x3c>)
 80411ee:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80411f0:	4b07      	ldr	r3, [pc, #28]	; (8041210 <HAL_FLASH_Unlock+0x38>)
 80411f2:	4a09      	ldr	r2, [pc, #36]	; (8041218 <HAL_FLASH_Unlock+0x40>)
 80411f4:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80411f6:	4b06      	ldr	r3, [pc, #24]	; (8041210 <HAL_FLASH_Unlock+0x38>)
 80411f8:	695b      	ldr	r3, [r3, #20]
 80411fa:	2b00      	cmp	r3, #0
 80411fc:	da01      	bge.n	8041202 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80411fe:	2301      	movs	r3, #1
 8041200:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8041202:	79fb      	ldrb	r3, [r7, #7]
}
 8041204:	4618      	mov	r0, r3
 8041206:	370c      	adds	r7, #12
 8041208:	46bd      	mov	sp, r7
 804120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804120e:	4770      	bx	lr
 8041210:	40022000 	.word	0x40022000
 8041214:	45670123 	.word	0x45670123
 8041218:	cdef89ab 	.word	0xcdef89ab

0804121c <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 804121c:	b480      	push	{r7}
 804121e:	b083      	sub	sp, #12
 8041220:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8041222:	2301      	movs	r3, #1
 8041224:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8041226:	4b09      	ldr	r3, [pc, #36]	; (804124c <HAL_FLASH_Lock+0x30>)
 8041228:	695b      	ldr	r3, [r3, #20]
 804122a:	4a08      	ldr	r2, [pc, #32]	; (804124c <HAL_FLASH_Lock+0x30>)
 804122c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8041230:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8041232:	4b06      	ldr	r3, [pc, #24]	; (804124c <HAL_FLASH_Lock+0x30>)
 8041234:	695b      	ldr	r3, [r3, #20]
 8041236:	2b00      	cmp	r3, #0
 8041238:	da01      	bge.n	804123e <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 804123a:	2300      	movs	r3, #0
 804123c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 804123e:	79fb      	ldrb	r3, [r7, #7]
}
 8041240:	4618      	mov	r0, r3
 8041242:	370c      	adds	r7, #12
 8041244:	46bd      	mov	sp, r7
 8041246:	f85d 7b04 	ldr.w	r7, [sp], #4
 804124a:	4770      	bx	lr
 804124c:	40022000 	.word	0x40022000

08041250 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8041250:	b580      	push	{r7, lr}
 8041252:	b084      	sub	sp, #16
 8041254:	af00      	add	r7, sp, #0
 8041256:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8041258:	f7ff fde6 	bl	8040e28 <HAL_GetTick>
 804125c:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 804125e:	e009      	b.n	8041274 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 8041260:	f7ff fde2 	bl	8040e28 <HAL_GetTick>
 8041264:	4602      	mov	r2, r0
 8041266:	68fb      	ldr	r3, [r7, #12]
 8041268:	1ad3      	subs	r3, r2, r3
 804126a:	687a      	ldr	r2, [r7, #4]
 804126c:	429a      	cmp	r2, r3
 804126e:	d201      	bcs.n	8041274 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8041270:	2303      	movs	r3, #3
 8041272:	e038      	b.n	80412e6 <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8041274:	4b1e      	ldr	r3, [pc, #120]	; (80412f0 <FLASH_WaitForLastOperation+0xa0>)
 8041276:	691b      	ldr	r3, [r3, #16]
 8041278:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 804127c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8041280:	d0ee      	beq.n	8041260 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8041282:	4b1b      	ldr	r3, [pc, #108]	; (80412f0 <FLASH_WaitForLastOperation+0xa0>)
 8041284:	691a      	ldr	r2, [r3, #16]
 8041286:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 804128a:	4013      	ands	r3, r2
 804128c:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 804128e:	68bb      	ldr	r3, [r7, #8]
 8041290:	2b00      	cmp	r3, #0
 8041292:	d01e      	beq.n	80412d2 <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 8041294:	4b17      	ldr	r3, [pc, #92]	; (80412f4 <FLASH_WaitForLastOperation+0xa4>)
 8041296:	685a      	ldr	r2, [r3, #4]
 8041298:	68bb      	ldr	r3, [r7, #8]
 804129a:	4313      	orrs	r3, r2
 804129c:	4a15      	ldr	r2, [pc, #84]	; (80412f4 <FLASH_WaitForLastOperation+0xa4>)
 804129e:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 80412a0:	68bb      	ldr	r3, [r7, #8]
 80412a2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80412a6:	2b00      	cmp	r3, #0
 80412a8:	d007      	beq.n	80412ba <FLASH_WaitForLastOperation+0x6a>
 80412aa:	4b11      	ldr	r3, [pc, #68]	; (80412f0 <FLASH_WaitForLastOperation+0xa0>)
 80412ac:	699a      	ldr	r2, [r3, #24]
 80412ae:	68bb      	ldr	r3, [r7, #8]
 80412b0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80412b4:	490e      	ldr	r1, [pc, #56]	; (80412f0 <FLASH_WaitForLastOperation+0xa0>)
 80412b6:	4313      	orrs	r3, r2
 80412b8:	618b      	str	r3, [r1, #24]
 80412ba:	68bb      	ldr	r3, [r7, #8]
 80412bc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80412c0:	2b00      	cmp	r3, #0
 80412c2:	d004      	beq.n	80412ce <FLASH_WaitForLastOperation+0x7e>
 80412c4:	4a0a      	ldr	r2, [pc, #40]	; (80412f0 <FLASH_WaitForLastOperation+0xa0>)
 80412c6:	68bb      	ldr	r3, [r7, #8]
 80412c8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80412cc:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 80412ce:	2301      	movs	r3, #1
 80412d0:	e009      	b.n	80412e6 <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80412d2:	4b07      	ldr	r3, [pc, #28]	; (80412f0 <FLASH_WaitForLastOperation+0xa0>)
 80412d4:	691b      	ldr	r3, [r3, #16]
 80412d6:	f003 0301 	and.w	r3, r3, #1
 80412da:	2b01      	cmp	r3, #1
 80412dc:	d102      	bne.n	80412e4 <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80412de:	4b04      	ldr	r3, [pc, #16]	; (80412f0 <FLASH_WaitForLastOperation+0xa0>)
 80412e0:	2201      	movs	r2, #1
 80412e2:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 80412e4:	2300      	movs	r3, #0
}
 80412e6:	4618      	mov	r0, r3
 80412e8:	3710      	adds	r7, #16
 80412ea:	46bd      	mov	sp, r7
 80412ec:	bd80      	pop	{r7, pc}
 80412ee:	bf00      	nop
 80412f0:	40022000 	.word	0x40022000
 80412f4:	2000000c 	.word	0x2000000c

080412f8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80412f8:	b480      	push	{r7}
 80412fa:	b085      	sub	sp, #20
 80412fc:	af00      	add	r7, sp, #0
 80412fe:	60f8      	str	r0, [r7, #12]
 8041300:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8041304:	4b0e      	ldr	r3, [pc, #56]	; (8041340 <FLASH_Program_DoubleWord+0x48>)
 8041306:	695b      	ldr	r3, [r3, #20]
 8041308:	4a0d      	ldr	r2, [pc, #52]	; (8041340 <FLASH_Program_DoubleWord+0x48>)
 804130a:	f043 0301 	orr.w	r3, r3, #1
 804130e:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8041310:	68fb      	ldr	r3, [r7, #12]
 8041312:	683a      	ldr	r2, [r7, #0]
 8041314:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8041316:	f3bf 8f6f 	isb	sy
}
 804131a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 804131c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8041320:	f04f 0200 	mov.w	r2, #0
 8041324:	f04f 0300 	mov.w	r3, #0
 8041328:	000a      	movs	r2, r1
 804132a:	2300      	movs	r3, #0
 804132c:	68f9      	ldr	r1, [r7, #12]
 804132e:	3104      	adds	r1, #4
 8041330:	4613      	mov	r3, r2
 8041332:	600b      	str	r3, [r1, #0]
}
 8041334:	bf00      	nop
 8041336:	3714      	adds	r7, #20
 8041338:	46bd      	mov	sp, r7
 804133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804133e:	4770      	bx	lr
 8041340:	40022000 	.word	0x40022000

08041344 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8041344:	b480      	push	{r7}
 8041346:	b089      	sub	sp, #36	; 0x24
 8041348:	af00      	add	r7, sp, #0
 804134a:	6078      	str	r0, [r7, #4]
 804134c:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 804134e:	2340      	movs	r3, #64	; 0x40
 8041350:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 8041352:	687b      	ldr	r3, [r7, #4]
 8041354:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 8041356:	683b      	ldr	r3, [r7, #0]
 8041358:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 804135a:	4b14      	ldr	r3, [pc, #80]	; (80413ac <FLASH_Program_Fast+0x68>)
 804135c:	695b      	ldr	r3, [r3, #20]
 804135e:	4a13      	ldr	r2, [pc, #76]	; (80413ac <FLASH_Program_Fast+0x68>)
 8041360:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8041364:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8041366:	f3ef 8310 	mrs	r3, PRIMASK
 804136a:	60fb      	str	r3, [r7, #12]
  return(result);
 804136c:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 804136e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8041370:	b672      	cpsid	i
}
 8041372:	bf00      	nop
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 8041374:	697b      	ldr	r3, [r7, #20]
 8041376:	681a      	ldr	r2, [r3, #0]
 8041378:	69bb      	ldr	r3, [r7, #24]
 804137a:	601a      	str	r2, [r3, #0]
    dest_addr++;
 804137c:	69bb      	ldr	r3, [r7, #24]
 804137e:	3304      	adds	r3, #4
 8041380:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8041382:	697b      	ldr	r3, [r7, #20]
 8041384:	3304      	adds	r3, #4
 8041386:	617b      	str	r3, [r7, #20]
    row_index--;
 8041388:	7ffb      	ldrb	r3, [r7, #31]
 804138a:	3b01      	subs	r3, #1
 804138c:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 804138e:	7ffb      	ldrb	r3, [r7, #31]
 8041390:	2b00      	cmp	r3, #0
 8041392:	d1ef      	bne.n	8041374 <FLASH_Program_Fast+0x30>
 8041394:	693b      	ldr	r3, [r7, #16]
 8041396:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8041398:	68bb      	ldr	r3, [r7, #8]
 804139a:	f383 8810 	msr	PRIMASK, r3
}
 804139e:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 80413a0:	bf00      	nop
 80413a2:	3724      	adds	r7, #36	; 0x24
 80413a4:	46bd      	mov	sp, r7
 80413a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80413aa:	4770      	bx	lr
 80413ac:	40022000 	.word	0x40022000

080413b0 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80413b0:	b580      	push	{r7, lr}
 80413b2:	b084      	sub	sp, #16
 80413b4:	af00      	add	r7, sp, #0
 80413b6:	6078      	str	r0, [r7, #4]
 80413b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80413ba:	4b4c      	ldr	r3, [pc, #304]	; (80414ec <HAL_FLASHEx_Erase+0x13c>)
 80413bc:	781b      	ldrb	r3, [r3, #0]
 80413be:	2b01      	cmp	r3, #1
 80413c0:	d101      	bne.n	80413c6 <HAL_FLASHEx_Erase+0x16>
 80413c2:	2302      	movs	r3, #2
 80413c4:	e08d      	b.n	80414e2 <HAL_FLASHEx_Erase+0x132>
 80413c6:	4b49      	ldr	r3, [pc, #292]	; (80414ec <HAL_FLASHEx_Erase+0x13c>)
 80413c8:	2201      	movs	r2, #1
 80413ca:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80413cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80413d0:	f7ff ff3e 	bl	8041250 <FLASH_WaitForLastOperation>
 80413d4:	4603      	mov	r3, r0
 80413d6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80413d8:	7bfb      	ldrb	r3, [r7, #15]
 80413da:	2b00      	cmp	r3, #0
 80413dc:	d17d      	bne.n	80414da <HAL_FLASHEx_Erase+0x12a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80413de:	4b43      	ldr	r3, [pc, #268]	; (80414ec <HAL_FLASHEx_Erase+0x13c>)
 80413e0:	2200      	movs	r2, #0
 80413e2:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 80413e4:	4b42      	ldr	r3, [pc, #264]	; (80414f0 <HAL_FLASHEx_Erase+0x140>)
 80413e6:	681b      	ldr	r3, [r3, #0]
 80413e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80413ec:	2b00      	cmp	r3, #0
 80413ee:	d019      	beq.n	8041424 <HAL_FLASHEx_Erase+0x74>
    {
      /* Disable instruction cache  */
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80413f0:	4b3f      	ldr	r3, [pc, #252]	; (80414f0 <HAL_FLASHEx_Erase+0x140>)
 80413f2:	681b      	ldr	r3, [r3, #0]
 80413f4:	4a3e      	ldr	r2, [pc, #248]	; (80414f0 <HAL_FLASHEx_Erase+0x140>)
 80413f6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80413fa:	6013      	str	r3, [r2, #0]

      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80413fc:	4b3c      	ldr	r3, [pc, #240]	; (80414f0 <HAL_FLASHEx_Erase+0x140>)
 80413fe:	681b      	ldr	r3, [r3, #0]
 8041400:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8041404:	2b00      	cmp	r3, #0
 8041406:	d009      	beq.n	804141c <HAL_FLASHEx_Erase+0x6c>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8041408:	4b39      	ldr	r3, [pc, #228]	; (80414f0 <HAL_FLASHEx_Erase+0x140>)
 804140a:	681b      	ldr	r3, [r3, #0]
 804140c:	4a38      	ldr	r2, [pc, #224]	; (80414f0 <HAL_FLASHEx_Erase+0x140>)
 804140e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8041412:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8041414:	4b35      	ldr	r3, [pc, #212]	; (80414ec <HAL_FLASHEx_Erase+0x13c>)
 8041416:	2203      	movs	r2, #3
 8041418:	771a      	strb	r2, [r3, #28]
 804141a:	e016      	b.n	804144a <HAL_FLASHEx_Erase+0x9a>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 804141c:	4b33      	ldr	r3, [pc, #204]	; (80414ec <HAL_FLASHEx_Erase+0x13c>)
 804141e:	2201      	movs	r2, #1
 8041420:	771a      	strb	r2, [r3, #28]
 8041422:	e012      	b.n	804144a <HAL_FLASHEx_Erase+0x9a>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8041424:	4b32      	ldr	r3, [pc, #200]	; (80414f0 <HAL_FLASHEx_Erase+0x140>)
 8041426:	681b      	ldr	r3, [r3, #0]
 8041428:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 804142c:	2b00      	cmp	r3, #0
 804142e:	d009      	beq.n	8041444 <HAL_FLASHEx_Erase+0x94>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8041430:	4b2f      	ldr	r3, [pc, #188]	; (80414f0 <HAL_FLASHEx_Erase+0x140>)
 8041432:	681b      	ldr	r3, [r3, #0]
 8041434:	4a2e      	ldr	r2, [pc, #184]	; (80414f0 <HAL_FLASHEx_Erase+0x140>)
 8041436:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 804143a:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 804143c:	4b2b      	ldr	r3, [pc, #172]	; (80414ec <HAL_FLASHEx_Erase+0x13c>)
 804143e:	2202      	movs	r2, #2
 8041440:	771a      	strb	r2, [r3, #28]
 8041442:	e002      	b.n	804144a <HAL_FLASHEx_Erase+0x9a>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8041444:	4b29      	ldr	r3, [pc, #164]	; (80414ec <HAL_FLASHEx_Erase+0x13c>)
 8041446:	2200      	movs	r2, #0
 8041448:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 804144a:	687b      	ldr	r3, [r7, #4]
 804144c:	681b      	ldr	r3, [r3, #0]
 804144e:	2b01      	cmp	r3, #1
 8041450:	d113      	bne.n	804147a <HAL_FLASHEx_Erase+0xca>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8041452:	687b      	ldr	r3, [r7, #4]
 8041454:	685b      	ldr	r3, [r3, #4]
 8041456:	4618      	mov	r0, r3
 8041458:	f000 f84c 	bl	80414f4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 804145c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8041460:	f7ff fef6 	bl	8041250 <FLASH_WaitForLastOperation>
 8041464:	4603      	mov	r3, r0
 8041466:	73fb      	strb	r3, [r7, #15]

#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8041468:	4b21      	ldr	r3, [pc, #132]	; (80414f0 <HAL_FLASHEx_Erase+0x140>)
 804146a:	695b      	ldr	r3, [r3, #20]
 804146c:	4a20      	ldr	r2, [pc, #128]	; (80414f0 <HAL_FLASHEx_Erase+0x140>)
 804146e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8041472:	f023 0304 	bic.w	r3, r3, #4
 8041476:	6153      	str	r3, [r2, #20]
 8041478:	e02d      	b.n	80414d6 <HAL_FLASHEx_Erase+0x126>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 804147a:	683b      	ldr	r3, [r7, #0]
 804147c:	f04f 32ff 	mov.w	r2, #4294967295
 8041480:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8041482:	687b      	ldr	r3, [r7, #4]
 8041484:	689b      	ldr	r3, [r3, #8]
 8041486:	60bb      	str	r3, [r7, #8]
 8041488:	e01d      	b.n	80414c6 <HAL_FLASHEx_Erase+0x116>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 804148a:	687b      	ldr	r3, [r7, #4]
 804148c:	685b      	ldr	r3, [r3, #4]
 804148e:	4619      	mov	r1, r3
 8041490:	68b8      	ldr	r0, [r7, #8]
 8041492:	f000 f867 	bl	8041564 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8041496:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 804149a:	f7ff fed9 	bl	8041250 <FLASH_WaitForLastOperation>
 804149e:	4603      	mov	r3, r0
 80414a0:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80414a2:	4b13      	ldr	r3, [pc, #76]	; (80414f0 <HAL_FLASHEx_Erase+0x140>)
 80414a4:	695b      	ldr	r3, [r3, #20]
 80414a6:	4a12      	ldr	r2, [pc, #72]	; (80414f0 <HAL_FLASHEx_Erase+0x140>)
 80414a8:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 80414ac:	f023 0302 	bic.w	r3, r3, #2
 80414b0:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 80414b2:	7bfb      	ldrb	r3, [r7, #15]
 80414b4:	2b00      	cmp	r3, #0
 80414b6:	d003      	beq.n	80414c0 <HAL_FLASHEx_Erase+0x110>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 80414b8:	683b      	ldr	r3, [r7, #0]
 80414ba:	68ba      	ldr	r2, [r7, #8]
 80414bc:	601a      	str	r2, [r3, #0]
          break;
 80414be:	e00a      	b.n	80414d6 <HAL_FLASHEx_Erase+0x126>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80414c0:	68bb      	ldr	r3, [r7, #8]
 80414c2:	3301      	adds	r3, #1
 80414c4:	60bb      	str	r3, [r7, #8]
 80414c6:	687b      	ldr	r3, [r7, #4]
 80414c8:	689a      	ldr	r2, [r3, #8]
 80414ca:	687b      	ldr	r3, [r7, #4]
 80414cc:	68db      	ldr	r3, [r3, #12]
 80414ce:	4413      	add	r3, r2
 80414d0:	68ba      	ldr	r2, [r7, #8]
 80414d2:	429a      	cmp	r2, r3
 80414d4:	d3d9      	bcc.n	804148a <HAL_FLASHEx_Erase+0xda>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80414d6:	f000 f889 	bl	80415ec <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80414da:	4b04      	ldr	r3, [pc, #16]	; (80414ec <HAL_FLASHEx_Erase+0x13c>)
 80414dc:	2200      	movs	r2, #0
 80414de:	701a      	strb	r2, [r3, #0]

  return status;
 80414e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80414e2:	4618      	mov	r0, r3
 80414e4:	3710      	adds	r7, #16
 80414e6:	46bd      	mov	sp, r7
 80414e8:	bd80      	pop	{r7, pc}
 80414ea:	bf00      	nop
 80414ec:	2000000c 	.word	0x2000000c
 80414f0:	40022000 	.word	0x40022000

080414f4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80414f4:	b480      	push	{r7}
 80414f6:	b083      	sub	sp, #12
 80414f8:	af00      	add	r7, sp, #0
 80414fa:	6078      	str	r0, [r7, #4]
#if defined (FLASH_OPTR_DBANK)
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) != 0U)
 80414fc:	4b18      	ldr	r3, [pc, #96]	; (8041560 <FLASH_MassErase+0x6c>)
 80414fe:	6a1b      	ldr	r3, [r3, #32]
 8041500:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8041504:	2b00      	cmp	r3, #0
 8041506:	d016      	beq.n	8041536 <FLASH_MassErase+0x42>
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 8041508:	687b      	ldr	r3, [r7, #4]
 804150a:	f003 0301 	and.w	r3, r3, #1
 804150e:	2b00      	cmp	r3, #0
 8041510:	d005      	beq.n	804151e <FLASH_MassErase+0x2a>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8041512:	4b13      	ldr	r3, [pc, #76]	; (8041560 <FLASH_MassErase+0x6c>)
 8041514:	695b      	ldr	r3, [r3, #20]
 8041516:	4a12      	ldr	r2, [pc, #72]	; (8041560 <FLASH_MassErase+0x6c>)
 8041518:	f043 0304 	orr.w	r3, r3, #4
 804151c:	6153      	str	r3, [r2, #20]
    }

#if defined (FLASH_OPTR_DBANK)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if ((Banks & FLASH_BANK_2) != 0U)
 804151e:	687b      	ldr	r3, [r7, #4]
 8041520:	f003 0302 	and.w	r3, r3, #2
 8041524:	2b00      	cmp	r3, #0
 8041526:	d00e      	beq.n	8041546 <FLASH_MassErase+0x52>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 8041528:	4b0d      	ldr	r3, [pc, #52]	; (8041560 <FLASH_MassErase+0x6c>)
 804152a:	695b      	ldr	r3, [r3, #20]
 804152c:	4a0c      	ldr	r2, [pc, #48]	; (8041560 <FLASH_MassErase+0x6c>)
 804152e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8041532:	6153      	str	r3, [r2, #20]
 8041534:	e007      	b.n	8041546 <FLASH_MassErase+0x52>
#endif
  }
#if defined (FLASH_OPTR_DBANK)
  else
  {
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8041536:	4b0a      	ldr	r3, [pc, #40]	; (8041560 <FLASH_MassErase+0x6c>)
 8041538:	695b      	ldr	r3, [r3, #20]
 804153a:	4a09      	ldr	r2, [pc, #36]	; (8041560 <FLASH_MassErase+0x6c>)
 804153c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8041540:	f043 0304 	orr.w	r3, r3, #4
 8041544:	6153      	str	r3, [r2, #20]
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8041546:	4b06      	ldr	r3, [pc, #24]	; (8041560 <FLASH_MassErase+0x6c>)
 8041548:	695b      	ldr	r3, [r3, #20]
 804154a:	4a05      	ldr	r2, [pc, #20]	; (8041560 <FLASH_MassErase+0x6c>)
 804154c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8041550:	6153      	str	r3, [r2, #20]
}
 8041552:	bf00      	nop
 8041554:	370c      	adds	r7, #12
 8041556:	46bd      	mov	sp, r7
 8041558:	f85d 7b04 	ldr.w	r7, [sp], #4
 804155c:	4770      	bx	lr
 804155e:	bf00      	nop
 8041560:	40022000 	.word	0x40022000

08041564 <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8041564:	b480      	push	{r7}
 8041566:	b083      	sub	sp, #12
 8041568:	af00      	add	r7, sp, #0
 804156a:	6078      	str	r0, [r7, #4]
 804156c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

#if defined (FLASH_OPTR_DBANK)
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 804156e:	4b1e      	ldr	r3, [pc, #120]	; (80415e8 <FLASH_PageErase+0x84>)
 8041570:	6a1b      	ldr	r3, [r3, #32]
 8041572:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8041576:	2b00      	cmp	r3, #0
 8041578:	d106      	bne.n	8041588 <FLASH_PageErase+0x24>
  {
    CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 804157a:	4b1b      	ldr	r3, [pc, #108]	; (80415e8 <FLASH_PageErase+0x84>)
 804157c:	695b      	ldr	r3, [r3, #20]
 804157e:	4a1a      	ldr	r2, [pc, #104]	; (80415e8 <FLASH_PageErase+0x84>)
 8041580:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8041584:	6153      	str	r3, [r2, #20]
 8041586:	e011      	b.n	80415ac <FLASH_PageErase+0x48>
  }
  else
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if ((Banks & FLASH_BANK_1) != 0U)
 8041588:	683b      	ldr	r3, [r7, #0]
 804158a:	f003 0301 	and.w	r3, r3, #1
 804158e:	2b00      	cmp	r3, #0
 8041590:	d006      	beq.n	80415a0 <FLASH_PageErase+0x3c>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8041592:	4b15      	ldr	r3, [pc, #84]	; (80415e8 <FLASH_PageErase+0x84>)
 8041594:	695b      	ldr	r3, [r3, #20]
 8041596:	4a14      	ldr	r2, [pc, #80]	; (80415e8 <FLASH_PageErase+0x84>)
 8041598:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 804159c:	6153      	str	r3, [r2, #20]
 804159e:	e005      	b.n	80415ac <FLASH_PageErase+0x48>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 80415a0:	4b11      	ldr	r3, [pc, #68]	; (80415e8 <FLASH_PageErase+0x84>)
 80415a2:	695b      	ldr	r3, [r3, #20]
 80415a4:	4a10      	ldr	r2, [pc, #64]	; (80415e8 <FLASH_PageErase+0x84>)
 80415a6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80415aa:	6153      	str	r3, [r2, #20]
    }
  }
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 80415ac:	4b0e      	ldr	r3, [pc, #56]	; (80415e8 <FLASH_PageErase+0x84>)
 80415ae:	695b      	ldr	r3, [r3, #20]
 80415b0:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 80415b4:	687b      	ldr	r3, [r7, #4]
 80415b6:	00db      	lsls	r3, r3, #3
 80415b8:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 80415bc:	490a      	ldr	r1, [pc, #40]	; (80415e8 <FLASH_PageErase+0x84>)
 80415be:	4313      	orrs	r3, r2
 80415c0:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 80415c2:	4b09      	ldr	r3, [pc, #36]	; (80415e8 <FLASH_PageErase+0x84>)
 80415c4:	695b      	ldr	r3, [r3, #20]
 80415c6:	4a08      	ldr	r2, [pc, #32]	; (80415e8 <FLASH_PageErase+0x84>)
 80415c8:	f043 0302 	orr.w	r3, r3, #2
 80415cc:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80415ce:	4b06      	ldr	r3, [pc, #24]	; (80415e8 <FLASH_PageErase+0x84>)
 80415d0:	695b      	ldr	r3, [r3, #20]
 80415d2:	4a05      	ldr	r2, [pc, #20]	; (80415e8 <FLASH_PageErase+0x84>)
 80415d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80415d8:	6153      	str	r3, [r2, #20]
}
 80415da:	bf00      	nop
 80415dc:	370c      	adds	r7, #12
 80415de:	46bd      	mov	sp, r7
 80415e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80415e4:	4770      	bx	lr
 80415e6:	bf00      	nop
 80415e8:	40022000 	.word	0x40022000

080415ec <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80415ec:	b480      	push	{r7}
 80415ee:	b083      	sub	sp, #12
 80415f0:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 80415f2:	4b1e      	ldr	r3, [pc, #120]	; (804166c <FLASH_FlushCaches+0x80>)
 80415f4:	7f1b      	ldrb	r3, [r3, #28]
 80415f6:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 80415f8:	79fb      	ldrb	r3, [r7, #7]
 80415fa:	2b01      	cmp	r3, #1
 80415fc:	d002      	beq.n	8041604 <FLASH_FlushCaches+0x18>
 80415fe:	79fb      	ldrb	r3, [r7, #7]
 8041600:	2b03      	cmp	r3, #3
 8041602:	d111      	bne.n	8041628 <FLASH_FlushCaches+0x3c>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8041604:	4b1a      	ldr	r3, [pc, #104]	; (8041670 <FLASH_FlushCaches+0x84>)
 8041606:	681b      	ldr	r3, [r3, #0]
 8041608:	4a19      	ldr	r2, [pc, #100]	; (8041670 <FLASH_FlushCaches+0x84>)
 804160a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 804160e:	6013      	str	r3, [r2, #0]
 8041610:	4b17      	ldr	r3, [pc, #92]	; (8041670 <FLASH_FlushCaches+0x84>)
 8041612:	681b      	ldr	r3, [r3, #0]
 8041614:	4a16      	ldr	r2, [pc, #88]	; (8041670 <FLASH_FlushCaches+0x84>)
 8041616:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 804161a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 804161c:	4b14      	ldr	r3, [pc, #80]	; (8041670 <FLASH_FlushCaches+0x84>)
 804161e:	681b      	ldr	r3, [r3, #0]
 8041620:	4a13      	ldr	r2, [pc, #76]	; (8041670 <FLASH_FlushCaches+0x84>)
 8041622:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8041626:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8041628:	79fb      	ldrb	r3, [r7, #7]
 804162a:	2b02      	cmp	r3, #2
 804162c:	d002      	beq.n	8041634 <FLASH_FlushCaches+0x48>
 804162e:	79fb      	ldrb	r3, [r7, #7]
 8041630:	2b03      	cmp	r3, #3
 8041632:	d111      	bne.n	8041658 <FLASH_FlushCaches+0x6c>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8041634:	4b0e      	ldr	r3, [pc, #56]	; (8041670 <FLASH_FlushCaches+0x84>)
 8041636:	681b      	ldr	r3, [r3, #0]
 8041638:	4a0d      	ldr	r2, [pc, #52]	; (8041670 <FLASH_FlushCaches+0x84>)
 804163a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 804163e:	6013      	str	r3, [r2, #0]
 8041640:	4b0b      	ldr	r3, [pc, #44]	; (8041670 <FLASH_FlushCaches+0x84>)
 8041642:	681b      	ldr	r3, [r3, #0]
 8041644:	4a0a      	ldr	r2, [pc, #40]	; (8041670 <FLASH_FlushCaches+0x84>)
 8041646:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 804164a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 804164c:	4b08      	ldr	r3, [pc, #32]	; (8041670 <FLASH_FlushCaches+0x84>)
 804164e:	681b      	ldr	r3, [r3, #0]
 8041650:	4a07      	ldr	r2, [pc, #28]	; (8041670 <FLASH_FlushCaches+0x84>)
 8041652:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8041656:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8041658:	4b04      	ldr	r3, [pc, #16]	; (804166c <FLASH_FlushCaches+0x80>)
 804165a:	2200      	movs	r2, #0
 804165c:	771a      	strb	r2, [r3, #28]
}
 804165e:	bf00      	nop
 8041660:	370c      	adds	r7, #12
 8041662:	46bd      	mov	sp, r7
 8041664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041668:	4770      	bx	lr
 804166a:	bf00      	nop
 804166c:	2000000c 	.word	0x2000000c
 8041670:	40022000 	.word	0x40022000

08041674 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8041674:	b480      	push	{r7}
 8041676:	b087      	sub	sp, #28
 8041678:	af00      	add	r7, sp, #0
 804167a:	6078      	str	r0, [r7, #4]
 804167c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 804167e:	2300      	movs	r3, #0
 8041680:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8041682:	e15a      	b.n	804193a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8041684:	683b      	ldr	r3, [r7, #0]
 8041686:	681a      	ldr	r2, [r3, #0]
 8041688:	2101      	movs	r1, #1
 804168a:	697b      	ldr	r3, [r7, #20]
 804168c:	fa01 f303 	lsl.w	r3, r1, r3
 8041690:	4013      	ands	r3, r2
 8041692:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8041694:	68fb      	ldr	r3, [r7, #12]
 8041696:	2b00      	cmp	r3, #0
 8041698:	f000 814c 	beq.w	8041934 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 804169c:	683b      	ldr	r3, [r7, #0]
 804169e:	685b      	ldr	r3, [r3, #4]
 80416a0:	2b01      	cmp	r3, #1
 80416a2:	d00b      	beq.n	80416bc <HAL_GPIO_Init+0x48>
 80416a4:	683b      	ldr	r3, [r7, #0]
 80416a6:	685b      	ldr	r3, [r3, #4]
 80416a8:	2b02      	cmp	r3, #2
 80416aa:	d007      	beq.n	80416bc <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80416ac:	683b      	ldr	r3, [r7, #0]
 80416ae:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80416b0:	2b11      	cmp	r3, #17
 80416b2:	d003      	beq.n	80416bc <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80416b4:	683b      	ldr	r3, [r7, #0]
 80416b6:	685b      	ldr	r3, [r3, #4]
 80416b8:	2b12      	cmp	r3, #18
 80416ba:	d130      	bne.n	804171e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80416bc:	687b      	ldr	r3, [r7, #4]
 80416be:	689b      	ldr	r3, [r3, #8]
 80416c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80416c2:	697b      	ldr	r3, [r7, #20]
 80416c4:	005b      	lsls	r3, r3, #1
 80416c6:	2203      	movs	r2, #3
 80416c8:	fa02 f303 	lsl.w	r3, r2, r3
 80416cc:	43db      	mvns	r3, r3
 80416ce:	693a      	ldr	r2, [r7, #16]
 80416d0:	4013      	ands	r3, r2
 80416d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80416d4:	683b      	ldr	r3, [r7, #0]
 80416d6:	68da      	ldr	r2, [r3, #12]
 80416d8:	697b      	ldr	r3, [r7, #20]
 80416da:	005b      	lsls	r3, r3, #1
 80416dc:	fa02 f303 	lsl.w	r3, r2, r3
 80416e0:	693a      	ldr	r2, [r7, #16]
 80416e2:	4313      	orrs	r3, r2
 80416e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80416e6:	687b      	ldr	r3, [r7, #4]
 80416e8:	693a      	ldr	r2, [r7, #16]
 80416ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80416ec:	687b      	ldr	r3, [r7, #4]
 80416ee:	685b      	ldr	r3, [r3, #4]
 80416f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80416f2:	2201      	movs	r2, #1
 80416f4:	697b      	ldr	r3, [r7, #20]
 80416f6:	fa02 f303 	lsl.w	r3, r2, r3
 80416fa:	43db      	mvns	r3, r3
 80416fc:	693a      	ldr	r2, [r7, #16]
 80416fe:	4013      	ands	r3, r2
 8041700:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8041702:	683b      	ldr	r3, [r7, #0]
 8041704:	685b      	ldr	r3, [r3, #4]
 8041706:	091b      	lsrs	r3, r3, #4
 8041708:	f003 0201 	and.w	r2, r3, #1
 804170c:	697b      	ldr	r3, [r7, #20]
 804170e:	fa02 f303 	lsl.w	r3, r2, r3
 8041712:	693a      	ldr	r2, [r7, #16]
 8041714:	4313      	orrs	r3, r2
 8041716:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8041718:	687b      	ldr	r3, [r7, #4]
 804171a:	693a      	ldr	r2, [r7, #16]
 804171c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 804171e:	687b      	ldr	r3, [r7, #4]
 8041720:	68db      	ldr	r3, [r3, #12]
 8041722:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8041724:	697b      	ldr	r3, [r7, #20]
 8041726:	005b      	lsls	r3, r3, #1
 8041728:	2203      	movs	r2, #3
 804172a:	fa02 f303 	lsl.w	r3, r2, r3
 804172e:	43db      	mvns	r3, r3
 8041730:	693a      	ldr	r2, [r7, #16]
 8041732:	4013      	ands	r3, r2
 8041734:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8041736:	683b      	ldr	r3, [r7, #0]
 8041738:	689a      	ldr	r2, [r3, #8]
 804173a:	697b      	ldr	r3, [r7, #20]
 804173c:	005b      	lsls	r3, r3, #1
 804173e:	fa02 f303 	lsl.w	r3, r2, r3
 8041742:	693a      	ldr	r2, [r7, #16]
 8041744:	4313      	orrs	r3, r2
 8041746:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8041748:	687b      	ldr	r3, [r7, #4]
 804174a:	693a      	ldr	r2, [r7, #16]
 804174c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 804174e:	683b      	ldr	r3, [r7, #0]
 8041750:	685b      	ldr	r3, [r3, #4]
 8041752:	2b02      	cmp	r3, #2
 8041754:	d003      	beq.n	804175e <HAL_GPIO_Init+0xea>
 8041756:	683b      	ldr	r3, [r7, #0]
 8041758:	685b      	ldr	r3, [r3, #4]
 804175a:	2b12      	cmp	r3, #18
 804175c:	d123      	bne.n	80417a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 804175e:	697b      	ldr	r3, [r7, #20]
 8041760:	08da      	lsrs	r2, r3, #3
 8041762:	687b      	ldr	r3, [r7, #4]
 8041764:	3208      	adds	r2, #8
 8041766:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 804176a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 804176c:	697b      	ldr	r3, [r7, #20]
 804176e:	f003 0307 	and.w	r3, r3, #7
 8041772:	009b      	lsls	r3, r3, #2
 8041774:	220f      	movs	r2, #15
 8041776:	fa02 f303 	lsl.w	r3, r2, r3
 804177a:	43db      	mvns	r3, r3
 804177c:	693a      	ldr	r2, [r7, #16]
 804177e:	4013      	ands	r3, r2
 8041780:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8041782:	683b      	ldr	r3, [r7, #0]
 8041784:	691a      	ldr	r2, [r3, #16]
 8041786:	697b      	ldr	r3, [r7, #20]
 8041788:	f003 0307 	and.w	r3, r3, #7
 804178c:	009b      	lsls	r3, r3, #2
 804178e:	fa02 f303 	lsl.w	r3, r2, r3
 8041792:	693a      	ldr	r2, [r7, #16]
 8041794:	4313      	orrs	r3, r2
 8041796:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8041798:	697b      	ldr	r3, [r7, #20]
 804179a:	08da      	lsrs	r2, r3, #3
 804179c:	687b      	ldr	r3, [r7, #4]
 804179e:	3208      	adds	r2, #8
 80417a0:	6939      	ldr	r1, [r7, #16]
 80417a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80417a6:	687b      	ldr	r3, [r7, #4]
 80417a8:	681b      	ldr	r3, [r3, #0]
 80417aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80417ac:	697b      	ldr	r3, [r7, #20]
 80417ae:	005b      	lsls	r3, r3, #1
 80417b0:	2203      	movs	r2, #3
 80417b2:	fa02 f303 	lsl.w	r3, r2, r3
 80417b6:	43db      	mvns	r3, r3
 80417b8:	693a      	ldr	r2, [r7, #16]
 80417ba:	4013      	ands	r3, r2
 80417bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80417be:	683b      	ldr	r3, [r7, #0]
 80417c0:	685b      	ldr	r3, [r3, #4]
 80417c2:	f003 0203 	and.w	r2, r3, #3
 80417c6:	697b      	ldr	r3, [r7, #20]
 80417c8:	005b      	lsls	r3, r3, #1
 80417ca:	fa02 f303 	lsl.w	r3, r2, r3
 80417ce:	693a      	ldr	r2, [r7, #16]
 80417d0:	4313      	orrs	r3, r2
 80417d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80417d4:	687b      	ldr	r3, [r7, #4]
 80417d6:	693a      	ldr	r2, [r7, #16]
 80417d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80417da:	683b      	ldr	r3, [r7, #0]
 80417dc:	685b      	ldr	r3, [r3, #4]
 80417de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80417e2:	2b00      	cmp	r3, #0
 80417e4:	f000 80a6 	beq.w	8041934 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80417e8:	4b5b      	ldr	r3, [pc, #364]	; (8041958 <HAL_GPIO_Init+0x2e4>)
 80417ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80417ec:	4a5a      	ldr	r2, [pc, #360]	; (8041958 <HAL_GPIO_Init+0x2e4>)
 80417ee:	f043 0301 	orr.w	r3, r3, #1
 80417f2:	6613      	str	r3, [r2, #96]	; 0x60
 80417f4:	4b58      	ldr	r3, [pc, #352]	; (8041958 <HAL_GPIO_Init+0x2e4>)
 80417f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80417f8:	f003 0301 	and.w	r3, r3, #1
 80417fc:	60bb      	str	r3, [r7, #8]
 80417fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8041800:	4a56      	ldr	r2, [pc, #344]	; (804195c <HAL_GPIO_Init+0x2e8>)
 8041802:	697b      	ldr	r3, [r7, #20]
 8041804:	089b      	lsrs	r3, r3, #2
 8041806:	3302      	adds	r3, #2
 8041808:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 804180c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 804180e:	697b      	ldr	r3, [r7, #20]
 8041810:	f003 0303 	and.w	r3, r3, #3
 8041814:	009b      	lsls	r3, r3, #2
 8041816:	220f      	movs	r2, #15
 8041818:	fa02 f303 	lsl.w	r3, r2, r3
 804181c:	43db      	mvns	r3, r3
 804181e:	693a      	ldr	r2, [r7, #16]
 8041820:	4013      	ands	r3, r2
 8041822:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8041824:	687b      	ldr	r3, [r7, #4]
 8041826:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 804182a:	d01f      	beq.n	804186c <HAL_GPIO_Init+0x1f8>
 804182c:	687b      	ldr	r3, [r7, #4]
 804182e:	4a4c      	ldr	r2, [pc, #304]	; (8041960 <HAL_GPIO_Init+0x2ec>)
 8041830:	4293      	cmp	r3, r2
 8041832:	d019      	beq.n	8041868 <HAL_GPIO_Init+0x1f4>
 8041834:	687b      	ldr	r3, [r7, #4]
 8041836:	4a4b      	ldr	r2, [pc, #300]	; (8041964 <HAL_GPIO_Init+0x2f0>)
 8041838:	4293      	cmp	r3, r2
 804183a:	d013      	beq.n	8041864 <HAL_GPIO_Init+0x1f0>
 804183c:	687b      	ldr	r3, [r7, #4]
 804183e:	4a4a      	ldr	r2, [pc, #296]	; (8041968 <HAL_GPIO_Init+0x2f4>)
 8041840:	4293      	cmp	r3, r2
 8041842:	d00d      	beq.n	8041860 <HAL_GPIO_Init+0x1ec>
 8041844:	687b      	ldr	r3, [r7, #4]
 8041846:	4a49      	ldr	r2, [pc, #292]	; (804196c <HAL_GPIO_Init+0x2f8>)
 8041848:	4293      	cmp	r3, r2
 804184a:	d007      	beq.n	804185c <HAL_GPIO_Init+0x1e8>
 804184c:	687b      	ldr	r3, [r7, #4]
 804184e:	4a48      	ldr	r2, [pc, #288]	; (8041970 <HAL_GPIO_Init+0x2fc>)
 8041850:	4293      	cmp	r3, r2
 8041852:	d101      	bne.n	8041858 <HAL_GPIO_Init+0x1e4>
 8041854:	2305      	movs	r3, #5
 8041856:	e00a      	b.n	804186e <HAL_GPIO_Init+0x1fa>
 8041858:	2306      	movs	r3, #6
 804185a:	e008      	b.n	804186e <HAL_GPIO_Init+0x1fa>
 804185c:	2304      	movs	r3, #4
 804185e:	e006      	b.n	804186e <HAL_GPIO_Init+0x1fa>
 8041860:	2303      	movs	r3, #3
 8041862:	e004      	b.n	804186e <HAL_GPIO_Init+0x1fa>
 8041864:	2302      	movs	r3, #2
 8041866:	e002      	b.n	804186e <HAL_GPIO_Init+0x1fa>
 8041868:	2301      	movs	r3, #1
 804186a:	e000      	b.n	804186e <HAL_GPIO_Init+0x1fa>
 804186c:	2300      	movs	r3, #0
 804186e:	697a      	ldr	r2, [r7, #20]
 8041870:	f002 0203 	and.w	r2, r2, #3
 8041874:	0092      	lsls	r2, r2, #2
 8041876:	4093      	lsls	r3, r2
 8041878:	693a      	ldr	r2, [r7, #16]
 804187a:	4313      	orrs	r3, r2
 804187c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 804187e:	4937      	ldr	r1, [pc, #220]	; (804195c <HAL_GPIO_Init+0x2e8>)
 8041880:	697b      	ldr	r3, [r7, #20]
 8041882:	089b      	lsrs	r3, r3, #2
 8041884:	3302      	adds	r3, #2
 8041886:	693a      	ldr	r2, [r7, #16]
 8041888:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 804188c:	4b39      	ldr	r3, [pc, #228]	; (8041974 <HAL_GPIO_Init+0x300>)
 804188e:	681b      	ldr	r3, [r3, #0]
 8041890:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8041892:	68fb      	ldr	r3, [r7, #12]
 8041894:	43db      	mvns	r3, r3
 8041896:	693a      	ldr	r2, [r7, #16]
 8041898:	4013      	ands	r3, r2
 804189a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 804189c:	683b      	ldr	r3, [r7, #0]
 804189e:	685b      	ldr	r3, [r3, #4]
 80418a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80418a4:	2b00      	cmp	r3, #0
 80418a6:	d003      	beq.n	80418b0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80418a8:	693a      	ldr	r2, [r7, #16]
 80418aa:	68fb      	ldr	r3, [r7, #12]
 80418ac:	4313      	orrs	r3, r2
 80418ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80418b0:	4a30      	ldr	r2, [pc, #192]	; (8041974 <HAL_GPIO_Init+0x300>)
 80418b2:	693b      	ldr	r3, [r7, #16]
 80418b4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80418b6:	4b2f      	ldr	r3, [pc, #188]	; (8041974 <HAL_GPIO_Init+0x300>)
 80418b8:	685b      	ldr	r3, [r3, #4]
 80418ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80418bc:	68fb      	ldr	r3, [r7, #12]
 80418be:	43db      	mvns	r3, r3
 80418c0:	693a      	ldr	r2, [r7, #16]
 80418c2:	4013      	ands	r3, r2
 80418c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80418c6:	683b      	ldr	r3, [r7, #0]
 80418c8:	685b      	ldr	r3, [r3, #4]
 80418ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80418ce:	2b00      	cmp	r3, #0
 80418d0:	d003      	beq.n	80418da <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80418d2:	693a      	ldr	r2, [r7, #16]
 80418d4:	68fb      	ldr	r3, [r7, #12]
 80418d6:	4313      	orrs	r3, r2
 80418d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80418da:	4a26      	ldr	r2, [pc, #152]	; (8041974 <HAL_GPIO_Init+0x300>)
 80418dc:	693b      	ldr	r3, [r7, #16]
 80418de:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80418e0:	4b24      	ldr	r3, [pc, #144]	; (8041974 <HAL_GPIO_Init+0x300>)
 80418e2:	689b      	ldr	r3, [r3, #8]
 80418e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80418e6:	68fb      	ldr	r3, [r7, #12]
 80418e8:	43db      	mvns	r3, r3
 80418ea:	693a      	ldr	r2, [r7, #16]
 80418ec:	4013      	ands	r3, r2
 80418ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80418f0:	683b      	ldr	r3, [r7, #0]
 80418f2:	685b      	ldr	r3, [r3, #4]
 80418f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80418f8:	2b00      	cmp	r3, #0
 80418fa:	d003      	beq.n	8041904 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80418fc:	693a      	ldr	r2, [r7, #16]
 80418fe:	68fb      	ldr	r3, [r7, #12]
 8041900:	4313      	orrs	r3, r2
 8041902:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8041904:	4a1b      	ldr	r2, [pc, #108]	; (8041974 <HAL_GPIO_Init+0x300>)
 8041906:	693b      	ldr	r3, [r7, #16]
 8041908:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 804190a:	4b1a      	ldr	r3, [pc, #104]	; (8041974 <HAL_GPIO_Init+0x300>)
 804190c:	68db      	ldr	r3, [r3, #12]
 804190e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8041910:	68fb      	ldr	r3, [r7, #12]
 8041912:	43db      	mvns	r3, r3
 8041914:	693a      	ldr	r2, [r7, #16]
 8041916:	4013      	ands	r3, r2
 8041918:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 804191a:	683b      	ldr	r3, [r7, #0]
 804191c:	685b      	ldr	r3, [r3, #4]
 804191e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8041922:	2b00      	cmp	r3, #0
 8041924:	d003      	beq.n	804192e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8041926:	693a      	ldr	r2, [r7, #16]
 8041928:	68fb      	ldr	r3, [r7, #12]
 804192a:	4313      	orrs	r3, r2
 804192c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 804192e:	4a11      	ldr	r2, [pc, #68]	; (8041974 <HAL_GPIO_Init+0x300>)
 8041930:	693b      	ldr	r3, [r7, #16]
 8041932:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8041934:	697b      	ldr	r3, [r7, #20]
 8041936:	3301      	adds	r3, #1
 8041938:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 804193a:	683b      	ldr	r3, [r7, #0]
 804193c:	681a      	ldr	r2, [r3, #0]
 804193e:	697b      	ldr	r3, [r7, #20]
 8041940:	fa22 f303 	lsr.w	r3, r2, r3
 8041944:	2b00      	cmp	r3, #0
 8041946:	f47f ae9d 	bne.w	8041684 <HAL_GPIO_Init+0x10>
  }
}
 804194a:	bf00      	nop
 804194c:	bf00      	nop
 804194e:	371c      	adds	r7, #28
 8041950:	46bd      	mov	sp, r7
 8041952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041956:	4770      	bx	lr
 8041958:	40021000 	.word	0x40021000
 804195c:	40010000 	.word	0x40010000
 8041960:	48000400 	.word	0x48000400
 8041964:	48000800 	.word	0x48000800
 8041968:	48000c00 	.word	0x48000c00
 804196c:	48001000 	.word	0x48001000
 8041970:	48001400 	.word	0x48001400
 8041974:	40010400 	.word	0x40010400

08041978 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8041978:	b480      	push	{r7}
 804197a:	b083      	sub	sp, #12
 804197c:	af00      	add	r7, sp, #0
 804197e:	6078      	str	r0, [r7, #4]
 8041980:	460b      	mov	r3, r1
 8041982:	807b      	strh	r3, [r7, #2]
 8041984:	4613      	mov	r3, r2
 8041986:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8041988:	787b      	ldrb	r3, [r7, #1]
 804198a:	2b00      	cmp	r3, #0
 804198c:	d003      	beq.n	8041996 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 804198e:	887a      	ldrh	r2, [r7, #2]
 8041990:	687b      	ldr	r3, [r7, #4]
 8041992:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8041994:	e002      	b.n	804199c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8041996:	887a      	ldrh	r2, [r7, #2]
 8041998:	687b      	ldr	r3, [r7, #4]
 804199a:	629a      	str	r2, [r3, #40]	; 0x28
}
 804199c:	bf00      	nop
 804199e:	370c      	adds	r7, #12
 80419a0:	46bd      	mov	sp, r7
 80419a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80419a6:	4770      	bx	lr

080419a8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80419a8:	b480      	push	{r7}
 80419aa:	b085      	sub	sp, #20
 80419ac:	af00      	add	r7, sp, #0
 80419ae:	6078      	str	r0, [r7, #4]
 80419b0:	460b      	mov	r3, r1
 80419b2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80419b4:	687b      	ldr	r3, [r7, #4]
 80419b6:	695b      	ldr	r3, [r3, #20]
 80419b8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80419ba:	887a      	ldrh	r2, [r7, #2]
 80419bc:	68fb      	ldr	r3, [r7, #12]
 80419be:	4013      	ands	r3, r2
 80419c0:	041a      	lsls	r2, r3, #16
 80419c2:	68fb      	ldr	r3, [r7, #12]
 80419c4:	43d9      	mvns	r1, r3
 80419c6:	887b      	ldrh	r3, [r7, #2]
 80419c8:	400b      	ands	r3, r1
 80419ca:	431a      	orrs	r2, r3
 80419cc:	687b      	ldr	r3, [r7, #4]
 80419ce:	619a      	str	r2, [r3, #24]
}
 80419d0:	bf00      	nop
 80419d2:	3714      	adds	r7, #20
 80419d4:	46bd      	mov	sp, r7
 80419d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80419da:	4770      	bx	lr

080419dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80419dc:	b580      	push	{r7, lr}
 80419de:	b082      	sub	sp, #8
 80419e0:	af00      	add	r7, sp, #0
 80419e2:	4603      	mov	r3, r0
 80419e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80419e6:	4b08      	ldr	r3, [pc, #32]	; (8041a08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80419e8:	695a      	ldr	r2, [r3, #20]
 80419ea:	88fb      	ldrh	r3, [r7, #6]
 80419ec:	4013      	ands	r3, r2
 80419ee:	2b00      	cmp	r3, #0
 80419f0:	d006      	beq.n	8041a00 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80419f2:	4a05      	ldr	r2, [pc, #20]	; (8041a08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80419f4:	88fb      	ldrh	r3, [r7, #6]
 80419f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80419f8:	88fb      	ldrh	r3, [r7, #6]
 80419fa:	4618      	mov	r0, r3
 80419fc:	f000 f806 	bl	8041a0c <HAL_GPIO_EXTI_Callback>
  }
}
 8041a00:	bf00      	nop
 8041a02:	3708      	adds	r7, #8
 8041a04:	46bd      	mov	sp, r7
 8041a06:	bd80      	pop	{r7, pc}
 8041a08:	40010400 	.word	0x40010400

08041a0c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8041a0c:	b480      	push	{r7}
 8041a0e:	b083      	sub	sp, #12
 8041a10:	af00      	add	r7, sp, #0
 8041a12:	4603      	mov	r3, r0
 8041a14:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8041a16:	bf00      	nop
 8041a18:	370c      	adds	r7, #12
 8041a1a:	46bd      	mov	sp, r7
 8041a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041a20:	4770      	bx	lr
	...

08041a24 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8041a24:	b480      	push	{r7}
 8041a26:	b085      	sub	sp, #20
 8041a28:	af00      	add	r7, sp, #0
 8041a2a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8041a2c:	687b      	ldr	r3, [r7, #4]
 8041a2e:	2b00      	cmp	r3, #0
 8041a30:	d141      	bne.n	8041ab6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8041a32:	4b4b      	ldr	r3, [pc, #300]	; (8041b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8041a34:	681b      	ldr	r3, [r3, #0]
 8041a36:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8041a3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8041a3e:	d131      	bne.n	8041aa4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8041a40:	4b47      	ldr	r3, [pc, #284]	; (8041b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8041a42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8041a46:	4a46      	ldr	r2, [pc, #280]	; (8041b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8041a48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8041a4c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8041a50:	4b43      	ldr	r3, [pc, #268]	; (8041b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8041a52:	681b      	ldr	r3, [r3, #0]
 8041a54:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8041a58:	4a41      	ldr	r2, [pc, #260]	; (8041b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8041a5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8041a5e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8041a60:	4b40      	ldr	r3, [pc, #256]	; (8041b64 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8041a62:	681b      	ldr	r3, [r3, #0]
 8041a64:	2232      	movs	r2, #50	; 0x32
 8041a66:	fb02 f303 	mul.w	r3, r2, r3
 8041a6a:	4a3f      	ldr	r2, [pc, #252]	; (8041b68 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8041a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8041a70:	0c9b      	lsrs	r3, r3, #18
 8041a72:	3301      	adds	r3, #1
 8041a74:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8041a76:	e002      	b.n	8041a7e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8041a78:	68fb      	ldr	r3, [r7, #12]
 8041a7a:	3b01      	subs	r3, #1
 8041a7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8041a7e:	4b38      	ldr	r3, [pc, #224]	; (8041b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8041a80:	695b      	ldr	r3, [r3, #20]
 8041a82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8041a86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8041a8a:	d102      	bne.n	8041a92 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8041a8c:	68fb      	ldr	r3, [r7, #12]
 8041a8e:	2b00      	cmp	r3, #0
 8041a90:	d1f2      	bne.n	8041a78 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8041a92:	4b33      	ldr	r3, [pc, #204]	; (8041b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8041a94:	695b      	ldr	r3, [r3, #20]
 8041a96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8041a9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8041a9e:	d158      	bne.n	8041b52 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8041aa0:	2303      	movs	r3, #3
 8041aa2:	e057      	b.n	8041b54 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8041aa4:	4b2e      	ldr	r3, [pc, #184]	; (8041b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8041aa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8041aaa:	4a2d      	ldr	r2, [pc, #180]	; (8041b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8041aac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8041ab0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8041ab4:	e04d      	b.n	8041b52 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8041ab6:	687b      	ldr	r3, [r7, #4]
 8041ab8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8041abc:	d141      	bne.n	8041b42 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8041abe:	4b28      	ldr	r3, [pc, #160]	; (8041b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8041ac0:	681b      	ldr	r3, [r3, #0]
 8041ac2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8041ac6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8041aca:	d131      	bne.n	8041b30 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8041acc:	4b24      	ldr	r3, [pc, #144]	; (8041b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8041ace:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8041ad2:	4a23      	ldr	r2, [pc, #140]	; (8041b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8041ad4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8041ad8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8041adc:	4b20      	ldr	r3, [pc, #128]	; (8041b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8041ade:	681b      	ldr	r3, [r3, #0]
 8041ae0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8041ae4:	4a1e      	ldr	r2, [pc, #120]	; (8041b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8041ae6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8041aea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8041aec:	4b1d      	ldr	r3, [pc, #116]	; (8041b64 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8041aee:	681b      	ldr	r3, [r3, #0]
 8041af0:	2232      	movs	r2, #50	; 0x32
 8041af2:	fb02 f303 	mul.w	r3, r2, r3
 8041af6:	4a1c      	ldr	r2, [pc, #112]	; (8041b68 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8041af8:	fba2 2303 	umull	r2, r3, r2, r3
 8041afc:	0c9b      	lsrs	r3, r3, #18
 8041afe:	3301      	adds	r3, #1
 8041b00:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8041b02:	e002      	b.n	8041b0a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8041b04:	68fb      	ldr	r3, [r7, #12]
 8041b06:	3b01      	subs	r3, #1
 8041b08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8041b0a:	4b15      	ldr	r3, [pc, #84]	; (8041b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8041b0c:	695b      	ldr	r3, [r3, #20]
 8041b0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8041b12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8041b16:	d102      	bne.n	8041b1e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8041b18:	68fb      	ldr	r3, [r7, #12]
 8041b1a:	2b00      	cmp	r3, #0
 8041b1c:	d1f2      	bne.n	8041b04 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8041b1e:	4b10      	ldr	r3, [pc, #64]	; (8041b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8041b20:	695b      	ldr	r3, [r3, #20]
 8041b22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8041b26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8041b2a:	d112      	bne.n	8041b52 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8041b2c:	2303      	movs	r3, #3
 8041b2e:	e011      	b.n	8041b54 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8041b30:	4b0b      	ldr	r3, [pc, #44]	; (8041b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8041b32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8041b36:	4a0a      	ldr	r2, [pc, #40]	; (8041b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8041b38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8041b3c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8041b40:	e007      	b.n	8041b52 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8041b42:	4b07      	ldr	r3, [pc, #28]	; (8041b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8041b44:	681b      	ldr	r3, [r3, #0]
 8041b46:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8041b4a:	4a05      	ldr	r2, [pc, #20]	; (8041b60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8041b4c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8041b50:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8041b52:	2300      	movs	r3, #0
}
 8041b54:	4618      	mov	r0, r3
 8041b56:	3714      	adds	r7, #20
 8041b58:	46bd      	mov	sp, r7
 8041b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041b5e:	4770      	bx	lr
 8041b60:	40007000 	.word	0x40007000
 8041b64:	20000000 	.word	0x20000000
 8041b68:	431bde83 	.word	0x431bde83

08041b6c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8041b6c:	b480      	push	{r7}
 8041b6e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8041b70:	4b05      	ldr	r3, [pc, #20]	; (8041b88 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8041b72:	689b      	ldr	r3, [r3, #8]
 8041b74:	4a04      	ldr	r2, [pc, #16]	; (8041b88 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8041b76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8041b7a:	6093      	str	r3, [r2, #8]
}
 8041b7c:	bf00      	nop
 8041b7e:	46bd      	mov	sp, r7
 8041b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041b84:	4770      	bx	lr
 8041b86:	bf00      	nop
 8041b88:	40007000 	.word	0x40007000

08041b8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8041b8c:	b580      	push	{r7, lr}
 8041b8e:	b088      	sub	sp, #32
 8041b90:	af00      	add	r7, sp, #0
 8041b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8041b94:	687b      	ldr	r3, [r7, #4]
 8041b96:	2b00      	cmp	r3, #0
 8041b98:	d101      	bne.n	8041b9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8041b9a:	2301      	movs	r3, #1
 8041b9c:	e306      	b.n	80421ac <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8041b9e:	687b      	ldr	r3, [r7, #4]
 8041ba0:	681b      	ldr	r3, [r3, #0]
 8041ba2:	f003 0301 	and.w	r3, r3, #1
 8041ba6:	2b00      	cmp	r3, #0
 8041ba8:	d075      	beq.n	8041c96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8041baa:	4b97      	ldr	r3, [pc, #604]	; (8041e08 <HAL_RCC_OscConfig+0x27c>)
 8041bac:	689b      	ldr	r3, [r3, #8]
 8041bae:	f003 030c 	and.w	r3, r3, #12
 8041bb2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8041bb4:	4b94      	ldr	r3, [pc, #592]	; (8041e08 <HAL_RCC_OscConfig+0x27c>)
 8041bb6:	68db      	ldr	r3, [r3, #12]
 8041bb8:	f003 0303 	and.w	r3, r3, #3
 8041bbc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8041bbe:	69bb      	ldr	r3, [r7, #24]
 8041bc0:	2b0c      	cmp	r3, #12
 8041bc2:	d102      	bne.n	8041bca <HAL_RCC_OscConfig+0x3e>
 8041bc4:	697b      	ldr	r3, [r7, #20]
 8041bc6:	2b03      	cmp	r3, #3
 8041bc8:	d002      	beq.n	8041bd0 <HAL_RCC_OscConfig+0x44>
 8041bca:	69bb      	ldr	r3, [r7, #24]
 8041bcc:	2b08      	cmp	r3, #8
 8041bce:	d10b      	bne.n	8041be8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8041bd0:	4b8d      	ldr	r3, [pc, #564]	; (8041e08 <HAL_RCC_OscConfig+0x27c>)
 8041bd2:	681b      	ldr	r3, [r3, #0]
 8041bd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8041bd8:	2b00      	cmp	r3, #0
 8041bda:	d05b      	beq.n	8041c94 <HAL_RCC_OscConfig+0x108>
 8041bdc:	687b      	ldr	r3, [r7, #4]
 8041bde:	685b      	ldr	r3, [r3, #4]
 8041be0:	2b00      	cmp	r3, #0
 8041be2:	d157      	bne.n	8041c94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8041be4:	2301      	movs	r3, #1
 8041be6:	e2e1      	b.n	80421ac <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8041be8:	687b      	ldr	r3, [r7, #4]
 8041bea:	685b      	ldr	r3, [r3, #4]
 8041bec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8041bf0:	d106      	bne.n	8041c00 <HAL_RCC_OscConfig+0x74>
 8041bf2:	4b85      	ldr	r3, [pc, #532]	; (8041e08 <HAL_RCC_OscConfig+0x27c>)
 8041bf4:	681b      	ldr	r3, [r3, #0]
 8041bf6:	4a84      	ldr	r2, [pc, #528]	; (8041e08 <HAL_RCC_OscConfig+0x27c>)
 8041bf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8041bfc:	6013      	str	r3, [r2, #0]
 8041bfe:	e01d      	b.n	8041c3c <HAL_RCC_OscConfig+0xb0>
 8041c00:	687b      	ldr	r3, [r7, #4]
 8041c02:	685b      	ldr	r3, [r3, #4]
 8041c04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8041c08:	d10c      	bne.n	8041c24 <HAL_RCC_OscConfig+0x98>
 8041c0a:	4b7f      	ldr	r3, [pc, #508]	; (8041e08 <HAL_RCC_OscConfig+0x27c>)
 8041c0c:	681b      	ldr	r3, [r3, #0]
 8041c0e:	4a7e      	ldr	r2, [pc, #504]	; (8041e08 <HAL_RCC_OscConfig+0x27c>)
 8041c10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8041c14:	6013      	str	r3, [r2, #0]
 8041c16:	4b7c      	ldr	r3, [pc, #496]	; (8041e08 <HAL_RCC_OscConfig+0x27c>)
 8041c18:	681b      	ldr	r3, [r3, #0]
 8041c1a:	4a7b      	ldr	r2, [pc, #492]	; (8041e08 <HAL_RCC_OscConfig+0x27c>)
 8041c1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8041c20:	6013      	str	r3, [r2, #0]
 8041c22:	e00b      	b.n	8041c3c <HAL_RCC_OscConfig+0xb0>
 8041c24:	4b78      	ldr	r3, [pc, #480]	; (8041e08 <HAL_RCC_OscConfig+0x27c>)
 8041c26:	681b      	ldr	r3, [r3, #0]
 8041c28:	4a77      	ldr	r2, [pc, #476]	; (8041e08 <HAL_RCC_OscConfig+0x27c>)
 8041c2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8041c2e:	6013      	str	r3, [r2, #0]
 8041c30:	4b75      	ldr	r3, [pc, #468]	; (8041e08 <HAL_RCC_OscConfig+0x27c>)
 8041c32:	681b      	ldr	r3, [r3, #0]
 8041c34:	4a74      	ldr	r2, [pc, #464]	; (8041e08 <HAL_RCC_OscConfig+0x27c>)
 8041c36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8041c3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8041c3c:	687b      	ldr	r3, [r7, #4]
 8041c3e:	685b      	ldr	r3, [r3, #4]
 8041c40:	2b00      	cmp	r3, #0
 8041c42:	d013      	beq.n	8041c6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041c44:	f7ff f8f0 	bl	8040e28 <HAL_GetTick>
 8041c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8041c4a:	e008      	b.n	8041c5e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8041c4c:	f7ff f8ec 	bl	8040e28 <HAL_GetTick>
 8041c50:	4602      	mov	r2, r0
 8041c52:	693b      	ldr	r3, [r7, #16]
 8041c54:	1ad3      	subs	r3, r2, r3
 8041c56:	2b64      	cmp	r3, #100	; 0x64
 8041c58:	d901      	bls.n	8041c5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8041c5a:	2303      	movs	r3, #3
 8041c5c:	e2a6      	b.n	80421ac <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8041c5e:	4b6a      	ldr	r3, [pc, #424]	; (8041e08 <HAL_RCC_OscConfig+0x27c>)
 8041c60:	681b      	ldr	r3, [r3, #0]
 8041c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8041c66:	2b00      	cmp	r3, #0
 8041c68:	d0f0      	beq.n	8041c4c <HAL_RCC_OscConfig+0xc0>
 8041c6a:	e014      	b.n	8041c96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041c6c:	f7ff f8dc 	bl	8040e28 <HAL_GetTick>
 8041c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8041c72:	e008      	b.n	8041c86 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8041c74:	f7ff f8d8 	bl	8040e28 <HAL_GetTick>
 8041c78:	4602      	mov	r2, r0
 8041c7a:	693b      	ldr	r3, [r7, #16]
 8041c7c:	1ad3      	subs	r3, r2, r3
 8041c7e:	2b64      	cmp	r3, #100	; 0x64
 8041c80:	d901      	bls.n	8041c86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8041c82:	2303      	movs	r3, #3
 8041c84:	e292      	b.n	80421ac <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8041c86:	4b60      	ldr	r3, [pc, #384]	; (8041e08 <HAL_RCC_OscConfig+0x27c>)
 8041c88:	681b      	ldr	r3, [r3, #0]
 8041c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8041c8e:	2b00      	cmp	r3, #0
 8041c90:	d1f0      	bne.n	8041c74 <HAL_RCC_OscConfig+0xe8>
 8041c92:	e000      	b.n	8041c96 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8041c94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8041c96:	687b      	ldr	r3, [r7, #4]
 8041c98:	681b      	ldr	r3, [r3, #0]
 8041c9a:	f003 0302 	and.w	r3, r3, #2
 8041c9e:	2b00      	cmp	r3, #0
 8041ca0:	d075      	beq.n	8041d8e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8041ca2:	4b59      	ldr	r3, [pc, #356]	; (8041e08 <HAL_RCC_OscConfig+0x27c>)
 8041ca4:	689b      	ldr	r3, [r3, #8]
 8041ca6:	f003 030c 	and.w	r3, r3, #12
 8041caa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8041cac:	4b56      	ldr	r3, [pc, #344]	; (8041e08 <HAL_RCC_OscConfig+0x27c>)
 8041cae:	68db      	ldr	r3, [r3, #12]
 8041cb0:	f003 0303 	and.w	r3, r3, #3
 8041cb4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8041cb6:	69bb      	ldr	r3, [r7, #24]
 8041cb8:	2b0c      	cmp	r3, #12
 8041cba:	d102      	bne.n	8041cc2 <HAL_RCC_OscConfig+0x136>
 8041cbc:	697b      	ldr	r3, [r7, #20]
 8041cbe:	2b02      	cmp	r3, #2
 8041cc0:	d002      	beq.n	8041cc8 <HAL_RCC_OscConfig+0x13c>
 8041cc2:	69bb      	ldr	r3, [r7, #24]
 8041cc4:	2b04      	cmp	r3, #4
 8041cc6:	d11f      	bne.n	8041d08 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8041cc8:	4b4f      	ldr	r3, [pc, #316]	; (8041e08 <HAL_RCC_OscConfig+0x27c>)
 8041cca:	681b      	ldr	r3, [r3, #0]
 8041ccc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8041cd0:	2b00      	cmp	r3, #0
 8041cd2:	d005      	beq.n	8041ce0 <HAL_RCC_OscConfig+0x154>
 8041cd4:	687b      	ldr	r3, [r7, #4]
 8041cd6:	68db      	ldr	r3, [r3, #12]
 8041cd8:	2b00      	cmp	r3, #0
 8041cda:	d101      	bne.n	8041ce0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8041cdc:	2301      	movs	r3, #1
 8041cde:	e265      	b.n	80421ac <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8041ce0:	4b49      	ldr	r3, [pc, #292]	; (8041e08 <HAL_RCC_OscConfig+0x27c>)
 8041ce2:	685b      	ldr	r3, [r3, #4]
 8041ce4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8041ce8:	687b      	ldr	r3, [r7, #4]
 8041cea:	691b      	ldr	r3, [r3, #16]
 8041cec:	061b      	lsls	r3, r3, #24
 8041cee:	4946      	ldr	r1, [pc, #280]	; (8041e08 <HAL_RCC_OscConfig+0x27c>)
 8041cf0:	4313      	orrs	r3, r2
 8041cf2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8041cf4:	4b45      	ldr	r3, [pc, #276]	; (8041e0c <HAL_RCC_OscConfig+0x280>)
 8041cf6:	681b      	ldr	r3, [r3, #0]
 8041cf8:	4618      	mov	r0, r3
 8041cfa:	f7ff f849 	bl	8040d90 <HAL_InitTick>
 8041cfe:	4603      	mov	r3, r0
 8041d00:	2b00      	cmp	r3, #0
 8041d02:	d043      	beq.n	8041d8c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8041d04:	2301      	movs	r3, #1
 8041d06:	e251      	b.n	80421ac <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8041d08:	687b      	ldr	r3, [r7, #4]
 8041d0a:	68db      	ldr	r3, [r3, #12]
 8041d0c:	2b00      	cmp	r3, #0
 8041d0e:	d023      	beq.n	8041d58 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8041d10:	4b3d      	ldr	r3, [pc, #244]	; (8041e08 <HAL_RCC_OscConfig+0x27c>)
 8041d12:	681b      	ldr	r3, [r3, #0]
 8041d14:	4a3c      	ldr	r2, [pc, #240]	; (8041e08 <HAL_RCC_OscConfig+0x27c>)
 8041d16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8041d1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041d1c:	f7ff f884 	bl	8040e28 <HAL_GetTick>
 8041d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8041d22:	e008      	b.n	8041d36 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8041d24:	f7ff f880 	bl	8040e28 <HAL_GetTick>
 8041d28:	4602      	mov	r2, r0
 8041d2a:	693b      	ldr	r3, [r7, #16]
 8041d2c:	1ad3      	subs	r3, r2, r3
 8041d2e:	2b02      	cmp	r3, #2
 8041d30:	d901      	bls.n	8041d36 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8041d32:	2303      	movs	r3, #3
 8041d34:	e23a      	b.n	80421ac <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8041d36:	4b34      	ldr	r3, [pc, #208]	; (8041e08 <HAL_RCC_OscConfig+0x27c>)
 8041d38:	681b      	ldr	r3, [r3, #0]
 8041d3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8041d3e:	2b00      	cmp	r3, #0
 8041d40:	d0f0      	beq.n	8041d24 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8041d42:	4b31      	ldr	r3, [pc, #196]	; (8041e08 <HAL_RCC_OscConfig+0x27c>)
 8041d44:	685b      	ldr	r3, [r3, #4]
 8041d46:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8041d4a:	687b      	ldr	r3, [r7, #4]
 8041d4c:	691b      	ldr	r3, [r3, #16]
 8041d4e:	061b      	lsls	r3, r3, #24
 8041d50:	492d      	ldr	r1, [pc, #180]	; (8041e08 <HAL_RCC_OscConfig+0x27c>)
 8041d52:	4313      	orrs	r3, r2
 8041d54:	604b      	str	r3, [r1, #4]
 8041d56:	e01a      	b.n	8041d8e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8041d58:	4b2b      	ldr	r3, [pc, #172]	; (8041e08 <HAL_RCC_OscConfig+0x27c>)
 8041d5a:	681b      	ldr	r3, [r3, #0]
 8041d5c:	4a2a      	ldr	r2, [pc, #168]	; (8041e08 <HAL_RCC_OscConfig+0x27c>)
 8041d5e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8041d62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041d64:	f7ff f860 	bl	8040e28 <HAL_GetTick>
 8041d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8041d6a:	e008      	b.n	8041d7e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8041d6c:	f7ff f85c 	bl	8040e28 <HAL_GetTick>
 8041d70:	4602      	mov	r2, r0
 8041d72:	693b      	ldr	r3, [r7, #16]
 8041d74:	1ad3      	subs	r3, r2, r3
 8041d76:	2b02      	cmp	r3, #2
 8041d78:	d901      	bls.n	8041d7e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8041d7a:	2303      	movs	r3, #3
 8041d7c:	e216      	b.n	80421ac <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8041d7e:	4b22      	ldr	r3, [pc, #136]	; (8041e08 <HAL_RCC_OscConfig+0x27c>)
 8041d80:	681b      	ldr	r3, [r3, #0]
 8041d82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8041d86:	2b00      	cmp	r3, #0
 8041d88:	d1f0      	bne.n	8041d6c <HAL_RCC_OscConfig+0x1e0>
 8041d8a:	e000      	b.n	8041d8e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8041d8c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8041d8e:	687b      	ldr	r3, [r7, #4]
 8041d90:	681b      	ldr	r3, [r3, #0]
 8041d92:	f003 0308 	and.w	r3, r3, #8
 8041d96:	2b00      	cmp	r3, #0
 8041d98:	d041      	beq.n	8041e1e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8041d9a:	687b      	ldr	r3, [r7, #4]
 8041d9c:	695b      	ldr	r3, [r3, #20]
 8041d9e:	2b00      	cmp	r3, #0
 8041da0:	d01c      	beq.n	8041ddc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8041da2:	4b19      	ldr	r3, [pc, #100]	; (8041e08 <HAL_RCC_OscConfig+0x27c>)
 8041da4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8041da8:	4a17      	ldr	r2, [pc, #92]	; (8041e08 <HAL_RCC_OscConfig+0x27c>)
 8041daa:	f043 0301 	orr.w	r3, r3, #1
 8041dae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8041db2:	f7ff f839 	bl	8040e28 <HAL_GetTick>
 8041db6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8041db8:	e008      	b.n	8041dcc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8041dba:	f7ff f835 	bl	8040e28 <HAL_GetTick>
 8041dbe:	4602      	mov	r2, r0
 8041dc0:	693b      	ldr	r3, [r7, #16]
 8041dc2:	1ad3      	subs	r3, r2, r3
 8041dc4:	2b02      	cmp	r3, #2
 8041dc6:	d901      	bls.n	8041dcc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8041dc8:	2303      	movs	r3, #3
 8041dca:	e1ef      	b.n	80421ac <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8041dcc:	4b0e      	ldr	r3, [pc, #56]	; (8041e08 <HAL_RCC_OscConfig+0x27c>)
 8041dce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8041dd2:	f003 0302 	and.w	r3, r3, #2
 8041dd6:	2b00      	cmp	r3, #0
 8041dd8:	d0ef      	beq.n	8041dba <HAL_RCC_OscConfig+0x22e>
 8041dda:	e020      	b.n	8041e1e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8041ddc:	4b0a      	ldr	r3, [pc, #40]	; (8041e08 <HAL_RCC_OscConfig+0x27c>)
 8041dde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8041de2:	4a09      	ldr	r2, [pc, #36]	; (8041e08 <HAL_RCC_OscConfig+0x27c>)
 8041de4:	f023 0301 	bic.w	r3, r3, #1
 8041de8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8041dec:	f7ff f81c 	bl	8040e28 <HAL_GetTick>
 8041df0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8041df2:	e00d      	b.n	8041e10 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8041df4:	f7ff f818 	bl	8040e28 <HAL_GetTick>
 8041df8:	4602      	mov	r2, r0
 8041dfa:	693b      	ldr	r3, [r7, #16]
 8041dfc:	1ad3      	subs	r3, r2, r3
 8041dfe:	2b02      	cmp	r3, #2
 8041e00:	d906      	bls.n	8041e10 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8041e02:	2303      	movs	r3, #3
 8041e04:	e1d2      	b.n	80421ac <HAL_RCC_OscConfig+0x620>
 8041e06:	bf00      	nop
 8041e08:	40021000 	.word	0x40021000
 8041e0c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8041e10:	4b8c      	ldr	r3, [pc, #560]	; (8042044 <HAL_RCC_OscConfig+0x4b8>)
 8041e12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8041e16:	f003 0302 	and.w	r3, r3, #2
 8041e1a:	2b00      	cmp	r3, #0
 8041e1c:	d1ea      	bne.n	8041df4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8041e1e:	687b      	ldr	r3, [r7, #4]
 8041e20:	681b      	ldr	r3, [r3, #0]
 8041e22:	f003 0304 	and.w	r3, r3, #4
 8041e26:	2b00      	cmp	r3, #0
 8041e28:	f000 80a6 	beq.w	8041f78 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8041e2c:	2300      	movs	r3, #0
 8041e2e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8041e30:	4b84      	ldr	r3, [pc, #528]	; (8042044 <HAL_RCC_OscConfig+0x4b8>)
 8041e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8041e34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8041e38:	2b00      	cmp	r3, #0
 8041e3a:	d101      	bne.n	8041e40 <HAL_RCC_OscConfig+0x2b4>
 8041e3c:	2301      	movs	r3, #1
 8041e3e:	e000      	b.n	8041e42 <HAL_RCC_OscConfig+0x2b6>
 8041e40:	2300      	movs	r3, #0
 8041e42:	2b00      	cmp	r3, #0
 8041e44:	d00d      	beq.n	8041e62 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8041e46:	4b7f      	ldr	r3, [pc, #508]	; (8042044 <HAL_RCC_OscConfig+0x4b8>)
 8041e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8041e4a:	4a7e      	ldr	r2, [pc, #504]	; (8042044 <HAL_RCC_OscConfig+0x4b8>)
 8041e4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8041e50:	6593      	str	r3, [r2, #88]	; 0x58
 8041e52:	4b7c      	ldr	r3, [pc, #496]	; (8042044 <HAL_RCC_OscConfig+0x4b8>)
 8041e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8041e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8041e5a:	60fb      	str	r3, [r7, #12]
 8041e5c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8041e5e:	2301      	movs	r3, #1
 8041e60:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8041e62:	4b79      	ldr	r3, [pc, #484]	; (8042048 <HAL_RCC_OscConfig+0x4bc>)
 8041e64:	681b      	ldr	r3, [r3, #0]
 8041e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8041e6a:	2b00      	cmp	r3, #0
 8041e6c:	d118      	bne.n	8041ea0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8041e6e:	4b76      	ldr	r3, [pc, #472]	; (8042048 <HAL_RCC_OscConfig+0x4bc>)
 8041e70:	681b      	ldr	r3, [r3, #0]
 8041e72:	4a75      	ldr	r2, [pc, #468]	; (8042048 <HAL_RCC_OscConfig+0x4bc>)
 8041e74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8041e78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8041e7a:	f7fe ffd5 	bl	8040e28 <HAL_GetTick>
 8041e7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8041e80:	e008      	b.n	8041e94 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8041e82:	f7fe ffd1 	bl	8040e28 <HAL_GetTick>
 8041e86:	4602      	mov	r2, r0
 8041e88:	693b      	ldr	r3, [r7, #16]
 8041e8a:	1ad3      	subs	r3, r2, r3
 8041e8c:	2b02      	cmp	r3, #2
 8041e8e:	d901      	bls.n	8041e94 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8041e90:	2303      	movs	r3, #3
 8041e92:	e18b      	b.n	80421ac <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8041e94:	4b6c      	ldr	r3, [pc, #432]	; (8042048 <HAL_RCC_OscConfig+0x4bc>)
 8041e96:	681b      	ldr	r3, [r3, #0]
 8041e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8041e9c:	2b00      	cmp	r3, #0
 8041e9e:	d0f0      	beq.n	8041e82 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8041ea0:	687b      	ldr	r3, [r7, #4]
 8041ea2:	689b      	ldr	r3, [r3, #8]
 8041ea4:	2b01      	cmp	r3, #1
 8041ea6:	d108      	bne.n	8041eba <HAL_RCC_OscConfig+0x32e>
 8041ea8:	4b66      	ldr	r3, [pc, #408]	; (8042044 <HAL_RCC_OscConfig+0x4b8>)
 8041eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041eae:	4a65      	ldr	r2, [pc, #404]	; (8042044 <HAL_RCC_OscConfig+0x4b8>)
 8041eb0:	f043 0301 	orr.w	r3, r3, #1
 8041eb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8041eb8:	e024      	b.n	8041f04 <HAL_RCC_OscConfig+0x378>
 8041eba:	687b      	ldr	r3, [r7, #4]
 8041ebc:	689b      	ldr	r3, [r3, #8]
 8041ebe:	2b05      	cmp	r3, #5
 8041ec0:	d110      	bne.n	8041ee4 <HAL_RCC_OscConfig+0x358>
 8041ec2:	4b60      	ldr	r3, [pc, #384]	; (8042044 <HAL_RCC_OscConfig+0x4b8>)
 8041ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041ec8:	4a5e      	ldr	r2, [pc, #376]	; (8042044 <HAL_RCC_OscConfig+0x4b8>)
 8041eca:	f043 0304 	orr.w	r3, r3, #4
 8041ece:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8041ed2:	4b5c      	ldr	r3, [pc, #368]	; (8042044 <HAL_RCC_OscConfig+0x4b8>)
 8041ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041ed8:	4a5a      	ldr	r2, [pc, #360]	; (8042044 <HAL_RCC_OscConfig+0x4b8>)
 8041eda:	f043 0301 	orr.w	r3, r3, #1
 8041ede:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8041ee2:	e00f      	b.n	8041f04 <HAL_RCC_OscConfig+0x378>
 8041ee4:	4b57      	ldr	r3, [pc, #348]	; (8042044 <HAL_RCC_OscConfig+0x4b8>)
 8041ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041eea:	4a56      	ldr	r2, [pc, #344]	; (8042044 <HAL_RCC_OscConfig+0x4b8>)
 8041eec:	f023 0301 	bic.w	r3, r3, #1
 8041ef0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8041ef4:	4b53      	ldr	r3, [pc, #332]	; (8042044 <HAL_RCC_OscConfig+0x4b8>)
 8041ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041efa:	4a52      	ldr	r2, [pc, #328]	; (8042044 <HAL_RCC_OscConfig+0x4b8>)
 8041efc:	f023 0304 	bic.w	r3, r3, #4
 8041f00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8041f04:	687b      	ldr	r3, [r7, #4]
 8041f06:	689b      	ldr	r3, [r3, #8]
 8041f08:	2b00      	cmp	r3, #0
 8041f0a:	d016      	beq.n	8041f3a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8041f0c:	f7fe ff8c 	bl	8040e28 <HAL_GetTick>
 8041f10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8041f12:	e00a      	b.n	8041f2a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8041f14:	f7fe ff88 	bl	8040e28 <HAL_GetTick>
 8041f18:	4602      	mov	r2, r0
 8041f1a:	693b      	ldr	r3, [r7, #16]
 8041f1c:	1ad3      	subs	r3, r2, r3
 8041f1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8041f22:	4293      	cmp	r3, r2
 8041f24:	d901      	bls.n	8041f2a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8041f26:	2303      	movs	r3, #3
 8041f28:	e140      	b.n	80421ac <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8041f2a:	4b46      	ldr	r3, [pc, #280]	; (8042044 <HAL_RCC_OscConfig+0x4b8>)
 8041f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041f30:	f003 0302 	and.w	r3, r3, #2
 8041f34:	2b00      	cmp	r3, #0
 8041f36:	d0ed      	beq.n	8041f14 <HAL_RCC_OscConfig+0x388>
 8041f38:	e015      	b.n	8041f66 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8041f3a:	f7fe ff75 	bl	8040e28 <HAL_GetTick>
 8041f3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8041f40:	e00a      	b.n	8041f58 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8041f42:	f7fe ff71 	bl	8040e28 <HAL_GetTick>
 8041f46:	4602      	mov	r2, r0
 8041f48:	693b      	ldr	r3, [r7, #16]
 8041f4a:	1ad3      	subs	r3, r2, r3
 8041f4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8041f50:	4293      	cmp	r3, r2
 8041f52:	d901      	bls.n	8041f58 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8041f54:	2303      	movs	r3, #3
 8041f56:	e129      	b.n	80421ac <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8041f58:	4b3a      	ldr	r3, [pc, #232]	; (8042044 <HAL_RCC_OscConfig+0x4b8>)
 8041f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041f5e:	f003 0302 	and.w	r3, r3, #2
 8041f62:	2b00      	cmp	r3, #0
 8041f64:	d1ed      	bne.n	8041f42 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8041f66:	7ffb      	ldrb	r3, [r7, #31]
 8041f68:	2b01      	cmp	r3, #1
 8041f6a:	d105      	bne.n	8041f78 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8041f6c:	4b35      	ldr	r3, [pc, #212]	; (8042044 <HAL_RCC_OscConfig+0x4b8>)
 8041f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8041f70:	4a34      	ldr	r2, [pc, #208]	; (8042044 <HAL_RCC_OscConfig+0x4b8>)
 8041f72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8041f76:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8041f78:	687b      	ldr	r3, [r7, #4]
 8041f7a:	681b      	ldr	r3, [r3, #0]
 8041f7c:	f003 0320 	and.w	r3, r3, #32
 8041f80:	2b00      	cmp	r3, #0
 8041f82:	d03c      	beq.n	8041ffe <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8041f84:	687b      	ldr	r3, [r7, #4]
 8041f86:	699b      	ldr	r3, [r3, #24]
 8041f88:	2b00      	cmp	r3, #0
 8041f8a:	d01c      	beq.n	8041fc6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8041f8c:	4b2d      	ldr	r3, [pc, #180]	; (8042044 <HAL_RCC_OscConfig+0x4b8>)
 8041f8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8041f92:	4a2c      	ldr	r2, [pc, #176]	; (8042044 <HAL_RCC_OscConfig+0x4b8>)
 8041f94:	f043 0301 	orr.w	r3, r3, #1
 8041f98:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8041f9c:	f7fe ff44 	bl	8040e28 <HAL_GetTick>
 8041fa0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8041fa2:	e008      	b.n	8041fb6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8041fa4:	f7fe ff40 	bl	8040e28 <HAL_GetTick>
 8041fa8:	4602      	mov	r2, r0
 8041faa:	693b      	ldr	r3, [r7, #16]
 8041fac:	1ad3      	subs	r3, r2, r3
 8041fae:	2b02      	cmp	r3, #2
 8041fb0:	d901      	bls.n	8041fb6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8041fb2:	2303      	movs	r3, #3
 8041fb4:	e0fa      	b.n	80421ac <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8041fb6:	4b23      	ldr	r3, [pc, #140]	; (8042044 <HAL_RCC_OscConfig+0x4b8>)
 8041fb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8041fbc:	f003 0302 	and.w	r3, r3, #2
 8041fc0:	2b00      	cmp	r3, #0
 8041fc2:	d0ef      	beq.n	8041fa4 <HAL_RCC_OscConfig+0x418>
 8041fc4:	e01b      	b.n	8041ffe <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8041fc6:	4b1f      	ldr	r3, [pc, #124]	; (8042044 <HAL_RCC_OscConfig+0x4b8>)
 8041fc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8041fcc:	4a1d      	ldr	r2, [pc, #116]	; (8042044 <HAL_RCC_OscConfig+0x4b8>)
 8041fce:	f023 0301 	bic.w	r3, r3, #1
 8041fd2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8041fd6:	f7fe ff27 	bl	8040e28 <HAL_GetTick>
 8041fda:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8041fdc:	e008      	b.n	8041ff0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8041fde:	f7fe ff23 	bl	8040e28 <HAL_GetTick>
 8041fe2:	4602      	mov	r2, r0
 8041fe4:	693b      	ldr	r3, [r7, #16]
 8041fe6:	1ad3      	subs	r3, r2, r3
 8041fe8:	2b02      	cmp	r3, #2
 8041fea:	d901      	bls.n	8041ff0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8041fec:	2303      	movs	r3, #3
 8041fee:	e0dd      	b.n	80421ac <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8041ff0:	4b14      	ldr	r3, [pc, #80]	; (8042044 <HAL_RCC_OscConfig+0x4b8>)
 8041ff2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8041ff6:	f003 0302 	and.w	r3, r3, #2
 8041ffa:	2b00      	cmp	r3, #0
 8041ffc:	d1ef      	bne.n	8041fde <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8041ffe:	687b      	ldr	r3, [r7, #4]
 8042000:	69db      	ldr	r3, [r3, #28]
 8042002:	2b00      	cmp	r3, #0
 8042004:	f000 80d1 	beq.w	80421aa <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8042008:	4b0e      	ldr	r3, [pc, #56]	; (8042044 <HAL_RCC_OscConfig+0x4b8>)
 804200a:	689b      	ldr	r3, [r3, #8]
 804200c:	f003 030c 	and.w	r3, r3, #12
 8042010:	2b0c      	cmp	r3, #12
 8042012:	f000 808b 	beq.w	804212c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8042016:	687b      	ldr	r3, [r7, #4]
 8042018:	69db      	ldr	r3, [r3, #28]
 804201a:	2b02      	cmp	r3, #2
 804201c:	d15e      	bne.n	80420dc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 804201e:	4b09      	ldr	r3, [pc, #36]	; (8042044 <HAL_RCC_OscConfig+0x4b8>)
 8042020:	681b      	ldr	r3, [r3, #0]
 8042022:	4a08      	ldr	r2, [pc, #32]	; (8042044 <HAL_RCC_OscConfig+0x4b8>)
 8042024:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8042028:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 804202a:	f7fe fefd 	bl	8040e28 <HAL_GetTick>
 804202e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8042030:	e00c      	b.n	804204c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8042032:	f7fe fef9 	bl	8040e28 <HAL_GetTick>
 8042036:	4602      	mov	r2, r0
 8042038:	693b      	ldr	r3, [r7, #16]
 804203a:	1ad3      	subs	r3, r2, r3
 804203c:	2b02      	cmp	r3, #2
 804203e:	d905      	bls.n	804204c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8042040:	2303      	movs	r3, #3
 8042042:	e0b3      	b.n	80421ac <HAL_RCC_OscConfig+0x620>
 8042044:	40021000 	.word	0x40021000
 8042048:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 804204c:	4b59      	ldr	r3, [pc, #356]	; (80421b4 <HAL_RCC_OscConfig+0x628>)
 804204e:	681b      	ldr	r3, [r3, #0]
 8042050:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8042054:	2b00      	cmp	r3, #0
 8042056:	d1ec      	bne.n	8042032 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8042058:	4b56      	ldr	r3, [pc, #344]	; (80421b4 <HAL_RCC_OscConfig+0x628>)
 804205a:	68da      	ldr	r2, [r3, #12]
 804205c:	4b56      	ldr	r3, [pc, #344]	; (80421b8 <HAL_RCC_OscConfig+0x62c>)
 804205e:	4013      	ands	r3, r2
 8042060:	687a      	ldr	r2, [r7, #4]
 8042062:	6a11      	ldr	r1, [r2, #32]
 8042064:	687a      	ldr	r2, [r7, #4]
 8042066:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8042068:	3a01      	subs	r2, #1
 804206a:	0112      	lsls	r2, r2, #4
 804206c:	4311      	orrs	r1, r2
 804206e:	687a      	ldr	r2, [r7, #4]
 8042070:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8042072:	0212      	lsls	r2, r2, #8
 8042074:	4311      	orrs	r1, r2
 8042076:	687a      	ldr	r2, [r7, #4]
 8042078:	6b12      	ldr	r2, [r2, #48]	; 0x30
 804207a:	0852      	lsrs	r2, r2, #1
 804207c:	3a01      	subs	r2, #1
 804207e:	0552      	lsls	r2, r2, #21
 8042080:	4311      	orrs	r1, r2
 8042082:	687a      	ldr	r2, [r7, #4]
 8042084:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8042086:	0852      	lsrs	r2, r2, #1
 8042088:	3a01      	subs	r2, #1
 804208a:	0652      	lsls	r2, r2, #25
 804208c:	4311      	orrs	r1, r2
 804208e:	687a      	ldr	r2, [r7, #4]
 8042090:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8042092:	06d2      	lsls	r2, r2, #27
 8042094:	430a      	orrs	r2, r1
 8042096:	4947      	ldr	r1, [pc, #284]	; (80421b4 <HAL_RCC_OscConfig+0x628>)
 8042098:	4313      	orrs	r3, r2
 804209a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 804209c:	4b45      	ldr	r3, [pc, #276]	; (80421b4 <HAL_RCC_OscConfig+0x628>)
 804209e:	681b      	ldr	r3, [r3, #0]
 80420a0:	4a44      	ldr	r2, [pc, #272]	; (80421b4 <HAL_RCC_OscConfig+0x628>)
 80420a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80420a6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80420a8:	4b42      	ldr	r3, [pc, #264]	; (80421b4 <HAL_RCC_OscConfig+0x628>)
 80420aa:	68db      	ldr	r3, [r3, #12]
 80420ac:	4a41      	ldr	r2, [pc, #260]	; (80421b4 <HAL_RCC_OscConfig+0x628>)
 80420ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80420b2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80420b4:	f7fe feb8 	bl	8040e28 <HAL_GetTick>
 80420b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80420ba:	e008      	b.n	80420ce <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80420bc:	f7fe feb4 	bl	8040e28 <HAL_GetTick>
 80420c0:	4602      	mov	r2, r0
 80420c2:	693b      	ldr	r3, [r7, #16]
 80420c4:	1ad3      	subs	r3, r2, r3
 80420c6:	2b02      	cmp	r3, #2
 80420c8:	d901      	bls.n	80420ce <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80420ca:	2303      	movs	r3, #3
 80420cc:	e06e      	b.n	80421ac <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80420ce:	4b39      	ldr	r3, [pc, #228]	; (80421b4 <HAL_RCC_OscConfig+0x628>)
 80420d0:	681b      	ldr	r3, [r3, #0]
 80420d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80420d6:	2b00      	cmp	r3, #0
 80420d8:	d0f0      	beq.n	80420bc <HAL_RCC_OscConfig+0x530>
 80420da:	e066      	b.n	80421aa <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80420dc:	4b35      	ldr	r3, [pc, #212]	; (80421b4 <HAL_RCC_OscConfig+0x628>)
 80420de:	681b      	ldr	r3, [r3, #0]
 80420e0:	4a34      	ldr	r2, [pc, #208]	; (80421b4 <HAL_RCC_OscConfig+0x628>)
 80420e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80420e6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80420e8:	4b32      	ldr	r3, [pc, #200]	; (80421b4 <HAL_RCC_OscConfig+0x628>)
 80420ea:	68db      	ldr	r3, [r3, #12]
 80420ec:	4a31      	ldr	r2, [pc, #196]	; (80421b4 <HAL_RCC_OscConfig+0x628>)
 80420ee:	f023 0303 	bic.w	r3, r3, #3
 80420f2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80420f4:	4b2f      	ldr	r3, [pc, #188]	; (80421b4 <HAL_RCC_OscConfig+0x628>)
 80420f6:	68db      	ldr	r3, [r3, #12]
 80420f8:	4a2e      	ldr	r2, [pc, #184]	; (80421b4 <HAL_RCC_OscConfig+0x628>)
 80420fa:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80420fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8042102:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8042104:	f7fe fe90 	bl	8040e28 <HAL_GetTick>
 8042108:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 804210a:	e008      	b.n	804211e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 804210c:	f7fe fe8c 	bl	8040e28 <HAL_GetTick>
 8042110:	4602      	mov	r2, r0
 8042112:	693b      	ldr	r3, [r7, #16]
 8042114:	1ad3      	subs	r3, r2, r3
 8042116:	2b02      	cmp	r3, #2
 8042118:	d901      	bls.n	804211e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 804211a:	2303      	movs	r3, #3
 804211c:	e046      	b.n	80421ac <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 804211e:	4b25      	ldr	r3, [pc, #148]	; (80421b4 <HAL_RCC_OscConfig+0x628>)
 8042120:	681b      	ldr	r3, [r3, #0]
 8042122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8042126:	2b00      	cmp	r3, #0
 8042128:	d1f0      	bne.n	804210c <HAL_RCC_OscConfig+0x580>
 804212a:	e03e      	b.n	80421aa <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 804212c:	687b      	ldr	r3, [r7, #4]
 804212e:	69db      	ldr	r3, [r3, #28]
 8042130:	2b01      	cmp	r3, #1
 8042132:	d101      	bne.n	8042138 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8042134:	2301      	movs	r3, #1
 8042136:	e039      	b.n	80421ac <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8042138:	4b1e      	ldr	r3, [pc, #120]	; (80421b4 <HAL_RCC_OscConfig+0x628>)
 804213a:	68db      	ldr	r3, [r3, #12]
 804213c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 804213e:	697b      	ldr	r3, [r7, #20]
 8042140:	f003 0203 	and.w	r2, r3, #3
 8042144:	687b      	ldr	r3, [r7, #4]
 8042146:	6a1b      	ldr	r3, [r3, #32]
 8042148:	429a      	cmp	r2, r3
 804214a:	d12c      	bne.n	80421a6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 804214c:	697b      	ldr	r3, [r7, #20]
 804214e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8042152:	687b      	ldr	r3, [r7, #4]
 8042154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8042156:	3b01      	subs	r3, #1
 8042158:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 804215a:	429a      	cmp	r2, r3
 804215c:	d123      	bne.n	80421a6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 804215e:	697b      	ldr	r3, [r7, #20]
 8042160:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8042164:	687b      	ldr	r3, [r7, #4]
 8042166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8042168:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 804216a:	429a      	cmp	r2, r3
 804216c:	d11b      	bne.n	80421a6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 804216e:	697b      	ldr	r3, [r7, #20]
 8042170:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8042174:	687b      	ldr	r3, [r7, #4]
 8042176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8042178:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 804217a:	429a      	cmp	r2, r3
 804217c:	d113      	bne.n	80421a6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 804217e:	697b      	ldr	r3, [r7, #20]
 8042180:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8042184:	687b      	ldr	r3, [r7, #4]
 8042186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042188:	085b      	lsrs	r3, r3, #1
 804218a:	3b01      	subs	r3, #1
 804218c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 804218e:	429a      	cmp	r2, r3
 8042190:	d109      	bne.n	80421a6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8042192:	697b      	ldr	r3, [r7, #20]
 8042194:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8042198:	687b      	ldr	r3, [r7, #4]
 804219a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 804219c:	085b      	lsrs	r3, r3, #1
 804219e:	3b01      	subs	r3, #1
 80421a0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80421a2:	429a      	cmp	r2, r3
 80421a4:	d001      	beq.n	80421aa <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80421a6:	2301      	movs	r3, #1
 80421a8:	e000      	b.n	80421ac <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80421aa:	2300      	movs	r3, #0
}
 80421ac:	4618      	mov	r0, r3
 80421ae:	3720      	adds	r7, #32
 80421b0:	46bd      	mov	sp, r7
 80421b2:	bd80      	pop	{r7, pc}
 80421b4:	40021000 	.word	0x40021000
 80421b8:	019f800c 	.word	0x019f800c

080421bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80421bc:	b580      	push	{r7, lr}
 80421be:	b086      	sub	sp, #24
 80421c0:	af00      	add	r7, sp, #0
 80421c2:	6078      	str	r0, [r7, #4]
 80421c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80421c6:	2300      	movs	r3, #0
 80421c8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80421ca:	687b      	ldr	r3, [r7, #4]
 80421cc:	2b00      	cmp	r3, #0
 80421ce:	d101      	bne.n	80421d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80421d0:	2301      	movs	r3, #1
 80421d2:	e11e      	b.n	8042412 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80421d4:	4b91      	ldr	r3, [pc, #580]	; (804241c <HAL_RCC_ClockConfig+0x260>)
 80421d6:	681b      	ldr	r3, [r3, #0]
 80421d8:	f003 030f 	and.w	r3, r3, #15
 80421dc:	683a      	ldr	r2, [r7, #0]
 80421de:	429a      	cmp	r2, r3
 80421e0:	d910      	bls.n	8042204 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80421e2:	4b8e      	ldr	r3, [pc, #568]	; (804241c <HAL_RCC_ClockConfig+0x260>)
 80421e4:	681b      	ldr	r3, [r3, #0]
 80421e6:	f023 020f 	bic.w	r2, r3, #15
 80421ea:	498c      	ldr	r1, [pc, #560]	; (804241c <HAL_RCC_ClockConfig+0x260>)
 80421ec:	683b      	ldr	r3, [r7, #0]
 80421ee:	4313      	orrs	r3, r2
 80421f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80421f2:	4b8a      	ldr	r3, [pc, #552]	; (804241c <HAL_RCC_ClockConfig+0x260>)
 80421f4:	681b      	ldr	r3, [r3, #0]
 80421f6:	f003 030f 	and.w	r3, r3, #15
 80421fa:	683a      	ldr	r2, [r7, #0]
 80421fc:	429a      	cmp	r2, r3
 80421fe:	d001      	beq.n	8042204 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8042200:	2301      	movs	r3, #1
 8042202:	e106      	b.n	8042412 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8042204:	687b      	ldr	r3, [r7, #4]
 8042206:	681b      	ldr	r3, [r3, #0]
 8042208:	f003 0301 	and.w	r3, r3, #1
 804220c:	2b00      	cmp	r3, #0
 804220e:	d073      	beq.n	80422f8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8042210:	687b      	ldr	r3, [r7, #4]
 8042212:	685b      	ldr	r3, [r3, #4]
 8042214:	2b03      	cmp	r3, #3
 8042216:	d129      	bne.n	804226c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8042218:	4b81      	ldr	r3, [pc, #516]	; (8042420 <HAL_RCC_ClockConfig+0x264>)
 804221a:	681b      	ldr	r3, [r3, #0]
 804221c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8042220:	2b00      	cmp	r3, #0
 8042222:	d101      	bne.n	8042228 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8042224:	2301      	movs	r3, #1
 8042226:	e0f4      	b.n	8042412 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8042228:	f000 f99e 	bl	8042568 <RCC_GetSysClockFreqFromPLLSource>
 804222c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 804222e:	693b      	ldr	r3, [r7, #16]
 8042230:	4a7c      	ldr	r2, [pc, #496]	; (8042424 <HAL_RCC_ClockConfig+0x268>)
 8042232:	4293      	cmp	r3, r2
 8042234:	d93f      	bls.n	80422b6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8042236:	4b7a      	ldr	r3, [pc, #488]	; (8042420 <HAL_RCC_ClockConfig+0x264>)
 8042238:	689b      	ldr	r3, [r3, #8]
 804223a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 804223e:	2b00      	cmp	r3, #0
 8042240:	d009      	beq.n	8042256 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8042242:	687b      	ldr	r3, [r7, #4]
 8042244:	681b      	ldr	r3, [r3, #0]
 8042246:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 804224a:	2b00      	cmp	r3, #0
 804224c:	d033      	beq.n	80422b6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 804224e:	687b      	ldr	r3, [r7, #4]
 8042250:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8042252:	2b00      	cmp	r3, #0
 8042254:	d12f      	bne.n	80422b6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8042256:	4b72      	ldr	r3, [pc, #456]	; (8042420 <HAL_RCC_ClockConfig+0x264>)
 8042258:	689b      	ldr	r3, [r3, #8]
 804225a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 804225e:	4a70      	ldr	r2, [pc, #448]	; (8042420 <HAL_RCC_ClockConfig+0x264>)
 8042260:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8042264:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8042266:	2380      	movs	r3, #128	; 0x80
 8042268:	617b      	str	r3, [r7, #20]
 804226a:	e024      	b.n	80422b6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 804226c:	687b      	ldr	r3, [r7, #4]
 804226e:	685b      	ldr	r3, [r3, #4]
 8042270:	2b02      	cmp	r3, #2
 8042272:	d107      	bne.n	8042284 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8042274:	4b6a      	ldr	r3, [pc, #424]	; (8042420 <HAL_RCC_ClockConfig+0x264>)
 8042276:	681b      	ldr	r3, [r3, #0]
 8042278:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 804227c:	2b00      	cmp	r3, #0
 804227e:	d109      	bne.n	8042294 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8042280:	2301      	movs	r3, #1
 8042282:	e0c6      	b.n	8042412 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8042284:	4b66      	ldr	r3, [pc, #408]	; (8042420 <HAL_RCC_ClockConfig+0x264>)
 8042286:	681b      	ldr	r3, [r3, #0]
 8042288:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 804228c:	2b00      	cmp	r3, #0
 804228e:	d101      	bne.n	8042294 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8042290:	2301      	movs	r3, #1
 8042292:	e0be      	b.n	8042412 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8042294:	f000 f8ce 	bl	8042434 <HAL_RCC_GetSysClockFreq>
 8042298:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 804229a:	693b      	ldr	r3, [r7, #16]
 804229c:	4a61      	ldr	r2, [pc, #388]	; (8042424 <HAL_RCC_ClockConfig+0x268>)
 804229e:	4293      	cmp	r3, r2
 80422a0:	d909      	bls.n	80422b6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80422a2:	4b5f      	ldr	r3, [pc, #380]	; (8042420 <HAL_RCC_ClockConfig+0x264>)
 80422a4:	689b      	ldr	r3, [r3, #8]
 80422a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80422aa:	4a5d      	ldr	r2, [pc, #372]	; (8042420 <HAL_RCC_ClockConfig+0x264>)
 80422ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80422b0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80422b2:	2380      	movs	r3, #128	; 0x80
 80422b4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80422b6:	4b5a      	ldr	r3, [pc, #360]	; (8042420 <HAL_RCC_ClockConfig+0x264>)
 80422b8:	689b      	ldr	r3, [r3, #8]
 80422ba:	f023 0203 	bic.w	r2, r3, #3
 80422be:	687b      	ldr	r3, [r7, #4]
 80422c0:	685b      	ldr	r3, [r3, #4]
 80422c2:	4957      	ldr	r1, [pc, #348]	; (8042420 <HAL_RCC_ClockConfig+0x264>)
 80422c4:	4313      	orrs	r3, r2
 80422c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80422c8:	f7fe fdae 	bl	8040e28 <HAL_GetTick>
 80422cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80422ce:	e00a      	b.n	80422e6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80422d0:	f7fe fdaa 	bl	8040e28 <HAL_GetTick>
 80422d4:	4602      	mov	r2, r0
 80422d6:	68fb      	ldr	r3, [r7, #12]
 80422d8:	1ad3      	subs	r3, r2, r3
 80422da:	f241 3288 	movw	r2, #5000	; 0x1388
 80422de:	4293      	cmp	r3, r2
 80422e0:	d901      	bls.n	80422e6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80422e2:	2303      	movs	r3, #3
 80422e4:	e095      	b.n	8042412 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80422e6:	4b4e      	ldr	r3, [pc, #312]	; (8042420 <HAL_RCC_ClockConfig+0x264>)
 80422e8:	689b      	ldr	r3, [r3, #8]
 80422ea:	f003 020c 	and.w	r2, r3, #12
 80422ee:	687b      	ldr	r3, [r7, #4]
 80422f0:	685b      	ldr	r3, [r3, #4]
 80422f2:	009b      	lsls	r3, r3, #2
 80422f4:	429a      	cmp	r2, r3
 80422f6:	d1eb      	bne.n	80422d0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80422f8:	687b      	ldr	r3, [r7, #4]
 80422fa:	681b      	ldr	r3, [r3, #0]
 80422fc:	f003 0302 	and.w	r3, r3, #2
 8042300:	2b00      	cmp	r3, #0
 8042302:	d023      	beq.n	804234c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8042304:	687b      	ldr	r3, [r7, #4]
 8042306:	681b      	ldr	r3, [r3, #0]
 8042308:	f003 0304 	and.w	r3, r3, #4
 804230c:	2b00      	cmp	r3, #0
 804230e:	d005      	beq.n	804231c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8042310:	4b43      	ldr	r3, [pc, #268]	; (8042420 <HAL_RCC_ClockConfig+0x264>)
 8042312:	689b      	ldr	r3, [r3, #8]
 8042314:	4a42      	ldr	r2, [pc, #264]	; (8042420 <HAL_RCC_ClockConfig+0x264>)
 8042316:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 804231a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 804231c:	687b      	ldr	r3, [r7, #4]
 804231e:	681b      	ldr	r3, [r3, #0]
 8042320:	f003 0308 	and.w	r3, r3, #8
 8042324:	2b00      	cmp	r3, #0
 8042326:	d007      	beq.n	8042338 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8042328:	4b3d      	ldr	r3, [pc, #244]	; (8042420 <HAL_RCC_ClockConfig+0x264>)
 804232a:	689b      	ldr	r3, [r3, #8]
 804232c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8042330:	4a3b      	ldr	r2, [pc, #236]	; (8042420 <HAL_RCC_ClockConfig+0x264>)
 8042332:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8042336:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8042338:	4b39      	ldr	r3, [pc, #228]	; (8042420 <HAL_RCC_ClockConfig+0x264>)
 804233a:	689b      	ldr	r3, [r3, #8]
 804233c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8042340:	687b      	ldr	r3, [r7, #4]
 8042342:	689b      	ldr	r3, [r3, #8]
 8042344:	4936      	ldr	r1, [pc, #216]	; (8042420 <HAL_RCC_ClockConfig+0x264>)
 8042346:	4313      	orrs	r3, r2
 8042348:	608b      	str	r3, [r1, #8]
 804234a:	e008      	b.n	804235e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 804234c:	697b      	ldr	r3, [r7, #20]
 804234e:	2b80      	cmp	r3, #128	; 0x80
 8042350:	d105      	bne.n	804235e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8042352:	4b33      	ldr	r3, [pc, #204]	; (8042420 <HAL_RCC_ClockConfig+0x264>)
 8042354:	689b      	ldr	r3, [r3, #8]
 8042356:	4a32      	ldr	r2, [pc, #200]	; (8042420 <HAL_RCC_ClockConfig+0x264>)
 8042358:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 804235c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 804235e:	4b2f      	ldr	r3, [pc, #188]	; (804241c <HAL_RCC_ClockConfig+0x260>)
 8042360:	681b      	ldr	r3, [r3, #0]
 8042362:	f003 030f 	and.w	r3, r3, #15
 8042366:	683a      	ldr	r2, [r7, #0]
 8042368:	429a      	cmp	r2, r3
 804236a:	d21d      	bcs.n	80423a8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 804236c:	4b2b      	ldr	r3, [pc, #172]	; (804241c <HAL_RCC_ClockConfig+0x260>)
 804236e:	681b      	ldr	r3, [r3, #0]
 8042370:	f023 020f 	bic.w	r2, r3, #15
 8042374:	4929      	ldr	r1, [pc, #164]	; (804241c <HAL_RCC_ClockConfig+0x260>)
 8042376:	683b      	ldr	r3, [r7, #0]
 8042378:	4313      	orrs	r3, r2
 804237a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 804237c:	f7fe fd54 	bl	8040e28 <HAL_GetTick>
 8042380:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8042382:	e00a      	b.n	804239a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8042384:	f7fe fd50 	bl	8040e28 <HAL_GetTick>
 8042388:	4602      	mov	r2, r0
 804238a:	68fb      	ldr	r3, [r7, #12]
 804238c:	1ad3      	subs	r3, r2, r3
 804238e:	f241 3288 	movw	r2, #5000	; 0x1388
 8042392:	4293      	cmp	r3, r2
 8042394:	d901      	bls.n	804239a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8042396:	2303      	movs	r3, #3
 8042398:	e03b      	b.n	8042412 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 804239a:	4b20      	ldr	r3, [pc, #128]	; (804241c <HAL_RCC_ClockConfig+0x260>)
 804239c:	681b      	ldr	r3, [r3, #0]
 804239e:	f003 030f 	and.w	r3, r3, #15
 80423a2:	683a      	ldr	r2, [r7, #0]
 80423a4:	429a      	cmp	r2, r3
 80423a6:	d1ed      	bne.n	8042384 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80423a8:	687b      	ldr	r3, [r7, #4]
 80423aa:	681b      	ldr	r3, [r3, #0]
 80423ac:	f003 0304 	and.w	r3, r3, #4
 80423b0:	2b00      	cmp	r3, #0
 80423b2:	d008      	beq.n	80423c6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80423b4:	4b1a      	ldr	r3, [pc, #104]	; (8042420 <HAL_RCC_ClockConfig+0x264>)
 80423b6:	689b      	ldr	r3, [r3, #8]
 80423b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80423bc:	687b      	ldr	r3, [r7, #4]
 80423be:	68db      	ldr	r3, [r3, #12]
 80423c0:	4917      	ldr	r1, [pc, #92]	; (8042420 <HAL_RCC_ClockConfig+0x264>)
 80423c2:	4313      	orrs	r3, r2
 80423c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80423c6:	687b      	ldr	r3, [r7, #4]
 80423c8:	681b      	ldr	r3, [r3, #0]
 80423ca:	f003 0308 	and.w	r3, r3, #8
 80423ce:	2b00      	cmp	r3, #0
 80423d0:	d009      	beq.n	80423e6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80423d2:	4b13      	ldr	r3, [pc, #76]	; (8042420 <HAL_RCC_ClockConfig+0x264>)
 80423d4:	689b      	ldr	r3, [r3, #8]
 80423d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80423da:	687b      	ldr	r3, [r7, #4]
 80423dc:	691b      	ldr	r3, [r3, #16]
 80423de:	00db      	lsls	r3, r3, #3
 80423e0:	490f      	ldr	r1, [pc, #60]	; (8042420 <HAL_RCC_ClockConfig+0x264>)
 80423e2:	4313      	orrs	r3, r2
 80423e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80423e6:	f000 f825 	bl	8042434 <HAL_RCC_GetSysClockFreq>
 80423ea:	4602      	mov	r2, r0
 80423ec:	4b0c      	ldr	r3, [pc, #48]	; (8042420 <HAL_RCC_ClockConfig+0x264>)
 80423ee:	689b      	ldr	r3, [r3, #8]
 80423f0:	091b      	lsrs	r3, r3, #4
 80423f2:	f003 030f 	and.w	r3, r3, #15
 80423f6:	490c      	ldr	r1, [pc, #48]	; (8042428 <HAL_RCC_ClockConfig+0x26c>)
 80423f8:	5ccb      	ldrb	r3, [r1, r3]
 80423fa:	f003 031f 	and.w	r3, r3, #31
 80423fe:	fa22 f303 	lsr.w	r3, r2, r3
 8042402:	4a0a      	ldr	r2, [pc, #40]	; (804242c <HAL_RCC_ClockConfig+0x270>)
 8042404:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8042406:	4b0a      	ldr	r3, [pc, #40]	; (8042430 <HAL_RCC_ClockConfig+0x274>)
 8042408:	681b      	ldr	r3, [r3, #0]
 804240a:	4618      	mov	r0, r3
 804240c:	f7fe fcc0 	bl	8040d90 <HAL_InitTick>
 8042410:	4603      	mov	r3, r0
}
 8042412:	4618      	mov	r0, r3
 8042414:	3718      	adds	r7, #24
 8042416:	46bd      	mov	sp, r7
 8042418:	bd80      	pop	{r7, pc}
 804241a:	bf00      	nop
 804241c:	40022000 	.word	0x40022000
 8042420:	40021000 	.word	0x40021000
 8042424:	04c4b400 	.word	0x04c4b400
 8042428:	08044ab4 	.word	0x08044ab4
 804242c:	20000000 	.word	0x20000000
 8042430:	20000004 	.word	0x20000004

08042434 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8042434:	b480      	push	{r7}
 8042436:	b087      	sub	sp, #28
 8042438:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 804243a:	4b2c      	ldr	r3, [pc, #176]	; (80424ec <HAL_RCC_GetSysClockFreq+0xb8>)
 804243c:	689b      	ldr	r3, [r3, #8]
 804243e:	f003 030c 	and.w	r3, r3, #12
 8042442:	2b04      	cmp	r3, #4
 8042444:	d102      	bne.n	804244c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8042446:	4b2a      	ldr	r3, [pc, #168]	; (80424f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8042448:	613b      	str	r3, [r7, #16]
 804244a:	e047      	b.n	80424dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 804244c:	4b27      	ldr	r3, [pc, #156]	; (80424ec <HAL_RCC_GetSysClockFreq+0xb8>)
 804244e:	689b      	ldr	r3, [r3, #8]
 8042450:	f003 030c 	and.w	r3, r3, #12
 8042454:	2b08      	cmp	r3, #8
 8042456:	d102      	bne.n	804245e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8042458:	4b26      	ldr	r3, [pc, #152]	; (80424f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 804245a:	613b      	str	r3, [r7, #16]
 804245c:	e03e      	b.n	80424dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 804245e:	4b23      	ldr	r3, [pc, #140]	; (80424ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8042460:	689b      	ldr	r3, [r3, #8]
 8042462:	f003 030c 	and.w	r3, r3, #12
 8042466:	2b0c      	cmp	r3, #12
 8042468:	d136      	bne.n	80424d8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 804246a:	4b20      	ldr	r3, [pc, #128]	; (80424ec <HAL_RCC_GetSysClockFreq+0xb8>)
 804246c:	68db      	ldr	r3, [r3, #12]
 804246e:	f003 0303 	and.w	r3, r3, #3
 8042472:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8042474:	4b1d      	ldr	r3, [pc, #116]	; (80424ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8042476:	68db      	ldr	r3, [r3, #12]
 8042478:	091b      	lsrs	r3, r3, #4
 804247a:	f003 030f 	and.w	r3, r3, #15
 804247e:	3301      	adds	r3, #1
 8042480:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8042482:	68fb      	ldr	r3, [r7, #12]
 8042484:	2b03      	cmp	r3, #3
 8042486:	d10c      	bne.n	80424a2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8042488:	4a1a      	ldr	r2, [pc, #104]	; (80424f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 804248a:	68bb      	ldr	r3, [r7, #8]
 804248c:	fbb2 f3f3 	udiv	r3, r2, r3
 8042490:	4a16      	ldr	r2, [pc, #88]	; (80424ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8042492:	68d2      	ldr	r2, [r2, #12]
 8042494:	0a12      	lsrs	r2, r2, #8
 8042496:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 804249a:	fb02 f303 	mul.w	r3, r2, r3
 804249e:	617b      	str	r3, [r7, #20]
      break;
 80424a0:	e00c      	b.n	80424bc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80424a2:	4a13      	ldr	r2, [pc, #76]	; (80424f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80424a4:	68bb      	ldr	r3, [r7, #8]
 80424a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80424aa:	4a10      	ldr	r2, [pc, #64]	; (80424ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80424ac:	68d2      	ldr	r2, [r2, #12]
 80424ae:	0a12      	lsrs	r2, r2, #8
 80424b0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80424b4:	fb02 f303 	mul.w	r3, r2, r3
 80424b8:	617b      	str	r3, [r7, #20]
      break;
 80424ba:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80424bc:	4b0b      	ldr	r3, [pc, #44]	; (80424ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80424be:	68db      	ldr	r3, [r3, #12]
 80424c0:	0e5b      	lsrs	r3, r3, #25
 80424c2:	f003 0303 	and.w	r3, r3, #3
 80424c6:	3301      	adds	r3, #1
 80424c8:	005b      	lsls	r3, r3, #1
 80424ca:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80424cc:	697a      	ldr	r2, [r7, #20]
 80424ce:	687b      	ldr	r3, [r7, #4]
 80424d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80424d4:	613b      	str	r3, [r7, #16]
 80424d6:	e001      	b.n	80424dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80424d8:	2300      	movs	r3, #0
 80424da:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80424dc:	693b      	ldr	r3, [r7, #16]
}
 80424de:	4618      	mov	r0, r3
 80424e0:	371c      	adds	r7, #28
 80424e2:	46bd      	mov	sp, r7
 80424e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80424e8:	4770      	bx	lr
 80424ea:	bf00      	nop
 80424ec:	40021000 	.word	0x40021000
 80424f0:	00f42400 	.word	0x00f42400
 80424f4:	016e3600 	.word	0x016e3600

080424f8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80424f8:	b480      	push	{r7}
 80424fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80424fc:	4b03      	ldr	r3, [pc, #12]	; (804250c <HAL_RCC_GetHCLKFreq+0x14>)
 80424fe:	681b      	ldr	r3, [r3, #0]
}
 8042500:	4618      	mov	r0, r3
 8042502:	46bd      	mov	sp, r7
 8042504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042508:	4770      	bx	lr
 804250a:	bf00      	nop
 804250c:	20000000 	.word	0x20000000

08042510 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8042510:	b580      	push	{r7, lr}
 8042512:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8042514:	f7ff fff0 	bl	80424f8 <HAL_RCC_GetHCLKFreq>
 8042518:	4602      	mov	r2, r0
 804251a:	4b06      	ldr	r3, [pc, #24]	; (8042534 <HAL_RCC_GetPCLK1Freq+0x24>)
 804251c:	689b      	ldr	r3, [r3, #8]
 804251e:	0a1b      	lsrs	r3, r3, #8
 8042520:	f003 0307 	and.w	r3, r3, #7
 8042524:	4904      	ldr	r1, [pc, #16]	; (8042538 <HAL_RCC_GetPCLK1Freq+0x28>)
 8042526:	5ccb      	ldrb	r3, [r1, r3]
 8042528:	f003 031f 	and.w	r3, r3, #31
 804252c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8042530:	4618      	mov	r0, r3
 8042532:	bd80      	pop	{r7, pc}
 8042534:	40021000 	.word	0x40021000
 8042538:	08044ac4 	.word	0x08044ac4

0804253c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 804253c:	b580      	push	{r7, lr}
 804253e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8042540:	f7ff ffda 	bl	80424f8 <HAL_RCC_GetHCLKFreq>
 8042544:	4602      	mov	r2, r0
 8042546:	4b06      	ldr	r3, [pc, #24]	; (8042560 <HAL_RCC_GetPCLK2Freq+0x24>)
 8042548:	689b      	ldr	r3, [r3, #8]
 804254a:	0adb      	lsrs	r3, r3, #11
 804254c:	f003 0307 	and.w	r3, r3, #7
 8042550:	4904      	ldr	r1, [pc, #16]	; (8042564 <HAL_RCC_GetPCLK2Freq+0x28>)
 8042552:	5ccb      	ldrb	r3, [r1, r3]
 8042554:	f003 031f 	and.w	r3, r3, #31
 8042558:	fa22 f303 	lsr.w	r3, r2, r3
}
 804255c:	4618      	mov	r0, r3
 804255e:	bd80      	pop	{r7, pc}
 8042560:	40021000 	.word	0x40021000
 8042564:	08044ac4 	.word	0x08044ac4

08042568 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8042568:	b480      	push	{r7}
 804256a:	b087      	sub	sp, #28
 804256c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 804256e:	4b1e      	ldr	r3, [pc, #120]	; (80425e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8042570:	68db      	ldr	r3, [r3, #12]
 8042572:	f003 0303 	and.w	r3, r3, #3
 8042576:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8042578:	4b1b      	ldr	r3, [pc, #108]	; (80425e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 804257a:	68db      	ldr	r3, [r3, #12]
 804257c:	091b      	lsrs	r3, r3, #4
 804257e:	f003 030f 	and.w	r3, r3, #15
 8042582:	3301      	adds	r3, #1
 8042584:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8042586:	693b      	ldr	r3, [r7, #16]
 8042588:	2b03      	cmp	r3, #3
 804258a:	d10c      	bne.n	80425a6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 804258c:	4a17      	ldr	r2, [pc, #92]	; (80425ec <RCC_GetSysClockFreqFromPLLSource+0x84>)
 804258e:	68fb      	ldr	r3, [r7, #12]
 8042590:	fbb2 f3f3 	udiv	r3, r2, r3
 8042594:	4a14      	ldr	r2, [pc, #80]	; (80425e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8042596:	68d2      	ldr	r2, [r2, #12]
 8042598:	0a12      	lsrs	r2, r2, #8
 804259a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 804259e:	fb02 f303 	mul.w	r3, r2, r3
 80425a2:	617b      	str	r3, [r7, #20]
    break;
 80425a4:	e00c      	b.n	80425c0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80425a6:	4a12      	ldr	r2, [pc, #72]	; (80425f0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80425a8:	68fb      	ldr	r3, [r7, #12]
 80425aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80425ae:	4a0e      	ldr	r2, [pc, #56]	; (80425e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80425b0:	68d2      	ldr	r2, [r2, #12]
 80425b2:	0a12      	lsrs	r2, r2, #8
 80425b4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80425b8:	fb02 f303 	mul.w	r3, r2, r3
 80425bc:	617b      	str	r3, [r7, #20]
    break;
 80425be:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80425c0:	4b09      	ldr	r3, [pc, #36]	; (80425e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80425c2:	68db      	ldr	r3, [r3, #12]
 80425c4:	0e5b      	lsrs	r3, r3, #25
 80425c6:	f003 0303 	and.w	r3, r3, #3
 80425ca:	3301      	adds	r3, #1
 80425cc:	005b      	lsls	r3, r3, #1
 80425ce:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80425d0:	697a      	ldr	r2, [r7, #20]
 80425d2:	68bb      	ldr	r3, [r7, #8]
 80425d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80425d8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80425da:	687b      	ldr	r3, [r7, #4]
}
 80425dc:	4618      	mov	r0, r3
 80425de:	371c      	adds	r7, #28
 80425e0:	46bd      	mov	sp, r7
 80425e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80425e6:	4770      	bx	lr
 80425e8:	40021000 	.word	0x40021000
 80425ec:	016e3600 	.word	0x016e3600
 80425f0:	00f42400 	.word	0x00f42400

080425f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80425f4:	b580      	push	{r7, lr}
 80425f6:	b086      	sub	sp, #24
 80425f8:	af00      	add	r7, sp, #0
 80425fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80425fc:	2300      	movs	r3, #0
 80425fe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8042600:	2300      	movs	r3, #0
 8042602:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8042604:	687b      	ldr	r3, [r7, #4]
 8042606:	681b      	ldr	r3, [r3, #0]
 8042608:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 804260c:	2b00      	cmp	r3, #0
 804260e:	f000 8098 	beq.w	8042742 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8042612:	2300      	movs	r3, #0
 8042614:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8042616:	4b43      	ldr	r3, [pc, #268]	; (8042724 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8042618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804261a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 804261e:	2b00      	cmp	r3, #0
 8042620:	d10d      	bne.n	804263e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8042622:	4b40      	ldr	r3, [pc, #256]	; (8042724 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8042624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8042626:	4a3f      	ldr	r2, [pc, #252]	; (8042724 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8042628:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 804262c:	6593      	str	r3, [r2, #88]	; 0x58
 804262e:	4b3d      	ldr	r3, [pc, #244]	; (8042724 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8042630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8042632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8042636:	60bb      	str	r3, [r7, #8]
 8042638:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 804263a:	2301      	movs	r3, #1
 804263c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 804263e:	4b3a      	ldr	r3, [pc, #232]	; (8042728 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8042640:	681b      	ldr	r3, [r3, #0]
 8042642:	4a39      	ldr	r2, [pc, #228]	; (8042728 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8042644:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8042648:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 804264a:	f7fe fbed 	bl	8040e28 <HAL_GetTick>
 804264e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8042650:	e009      	b.n	8042666 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8042652:	f7fe fbe9 	bl	8040e28 <HAL_GetTick>
 8042656:	4602      	mov	r2, r0
 8042658:	68fb      	ldr	r3, [r7, #12]
 804265a:	1ad3      	subs	r3, r2, r3
 804265c:	2b02      	cmp	r3, #2
 804265e:	d902      	bls.n	8042666 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8042660:	2303      	movs	r3, #3
 8042662:	74fb      	strb	r3, [r7, #19]
        break;
 8042664:	e005      	b.n	8042672 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8042666:	4b30      	ldr	r3, [pc, #192]	; (8042728 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8042668:	681b      	ldr	r3, [r3, #0]
 804266a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 804266e:	2b00      	cmp	r3, #0
 8042670:	d0ef      	beq.n	8042652 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8042672:	7cfb      	ldrb	r3, [r7, #19]
 8042674:	2b00      	cmp	r3, #0
 8042676:	d159      	bne.n	804272c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8042678:	4b2a      	ldr	r3, [pc, #168]	; (8042724 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 804267a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804267e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8042682:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8042684:	697b      	ldr	r3, [r7, #20]
 8042686:	2b00      	cmp	r3, #0
 8042688:	d01e      	beq.n	80426c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 804268a:	687b      	ldr	r3, [r7, #4]
 804268c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 804268e:	697a      	ldr	r2, [r7, #20]
 8042690:	429a      	cmp	r2, r3
 8042692:	d019      	beq.n	80426c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8042694:	4b23      	ldr	r3, [pc, #140]	; (8042724 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8042696:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804269a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 804269e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80426a0:	4b20      	ldr	r3, [pc, #128]	; (8042724 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80426a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80426a6:	4a1f      	ldr	r2, [pc, #124]	; (8042724 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80426a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80426ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80426b0:	4b1c      	ldr	r3, [pc, #112]	; (8042724 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80426b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80426b6:	4a1b      	ldr	r2, [pc, #108]	; (8042724 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80426b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80426bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80426c0:	4a18      	ldr	r2, [pc, #96]	; (8042724 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80426c2:	697b      	ldr	r3, [r7, #20]
 80426c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80426c8:	697b      	ldr	r3, [r7, #20]
 80426ca:	f003 0301 	and.w	r3, r3, #1
 80426ce:	2b00      	cmp	r3, #0
 80426d0:	d016      	beq.n	8042700 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80426d2:	f7fe fba9 	bl	8040e28 <HAL_GetTick>
 80426d6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80426d8:	e00b      	b.n	80426f2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80426da:	f7fe fba5 	bl	8040e28 <HAL_GetTick>
 80426de:	4602      	mov	r2, r0
 80426e0:	68fb      	ldr	r3, [r7, #12]
 80426e2:	1ad3      	subs	r3, r2, r3
 80426e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80426e8:	4293      	cmp	r3, r2
 80426ea:	d902      	bls.n	80426f2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80426ec:	2303      	movs	r3, #3
 80426ee:	74fb      	strb	r3, [r7, #19]
            break;
 80426f0:	e006      	b.n	8042700 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80426f2:	4b0c      	ldr	r3, [pc, #48]	; (8042724 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80426f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80426f8:	f003 0302 	and.w	r3, r3, #2
 80426fc:	2b00      	cmp	r3, #0
 80426fe:	d0ec      	beq.n	80426da <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8042700:	7cfb      	ldrb	r3, [r7, #19]
 8042702:	2b00      	cmp	r3, #0
 8042704:	d10b      	bne.n	804271e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8042706:	4b07      	ldr	r3, [pc, #28]	; (8042724 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8042708:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804270c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8042710:	687b      	ldr	r3, [r7, #4]
 8042712:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8042714:	4903      	ldr	r1, [pc, #12]	; (8042724 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8042716:	4313      	orrs	r3, r2
 8042718:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 804271c:	e008      	b.n	8042730 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 804271e:	7cfb      	ldrb	r3, [r7, #19]
 8042720:	74bb      	strb	r3, [r7, #18]
 8042722:	e005      	b.n	8042730 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8042724:	40021000 	.word	0x40021000
 8042728:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 804272c:	7cfb      	ldrb	r3, [r7, #19]
 804272e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8042730:	7c7b      	ldrb	r3, [r7, #17]
 8042732:	2b01      	cmp	r3, #1
 8042734:	d105      	bne.n	8042742 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8042736:	4ba7      	ldr	r3, [pc, #668]	; (80429d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8042738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804273a:	4aa6      	ldr	r2, [pc, #664]	; (80429d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 804273c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8042740:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8042742:	687b      	ldr	r3, [r7, #4]
 8042744:	681b      	ldr	r3, [r3, #0]
 8042746:	f003 0301 	and.w	r3, r3, #1
 804274a:	2b00      	cmp	r3, #0
 804274c:	d00a      	beq.n	8042764 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 804274e:	4ba1      	ldr	r3, [pc, #644]	; (80429d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8042750:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042754:	f023 0203 	bic.w	r2, r3, #3
 8042758:	687b      	ldr	r3, [r7, #4]
 804275a:	685b      	ldr	r3, [r3, #4]
 804275c:	499d      	ldr	r1, [pc, #628]	; (80429d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 804275e:	4313      	orrs	r3, r2
 8042760:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8042764:	687b      	ldr	r3, [r7, #4]
 8042766:	681b      	ldr	r3, [r3, #0]
 8042768:	f003 0302 	and.w	r3, r3, #2
 804276c:	2b00      	cmp	r3, #0
 804276e:	d00a      	beq.n	8042786 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8042770:	4b98      	ldr	r3, [pc, #608]	; (80429d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8042772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042776:	f023 020c 	bic.w	r2, r3, #12
 804277a:	687b      	ldr	r3, [r7, #4]
 804277c:	689b      	ldr	r3, [r3, #8]
 804277e:	4995      	ldr	r1, [pc, #596]	; (80429d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8042780:	4313      	orrs	r3, r2
 8042782:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8042786:	687b      	ldr	r3, [r7, #4]
 8042788:	681b      	ldr	r3, [r3, #0]
 804278a:	f003 0304 	and.w	r3, r3, #4
 804278e:	2b00      	cmp	r3, #0
 8042790:	d00a      	beq.n	80427a8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8042792:	4b90      	ldr	r3, [pc, #576]	; (80429d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8042794:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042798:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 804279c:	687b      	ldr	r3, [r7, #4]
 804279e:	68db      	ldr	r3, [r3, #12]
 80427a0:	498c      	ldr	r1, [pc, #560]	; (80429d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80427a2:	4313      	orrs	r3, r2
 80427a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80427a8:	687b      	ldr	r3, [r7, #4]
 80427aa:	681b      	ldr	r3, [r3, #0]
 80427ac:	f003 0308 	and.w	r3, r3, #8
 80427b0:	2b00      	cmp	r3, #0
 80427b2:	d00a      	beq.n	80427ca <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80427b4:	4b87      	ldr	r3, [pc, #540]	; (80429d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80427b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80427ba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80427be:	687b      	ldr	r3, [r7, #4]
 80427c0:	691b      	ldr	r3, [r3, #16]
 80427c2:	4984      	ldr	r1, [pc, #528]	; (80429d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80427c4:	4313      	orrs	r3, r2
 80427c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80427ca:	687b      	ldr	r3, [r7, #4]
 80427cc:	681b      	ldr	r3, [r3, #0]
 80427ce:	f003 0310 	and.w	r3, r3, #16
 80427d2:	2b00      	cmp	r3, #0
 80427d4:	d00a      	beq.n	80427ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80427d6:	4b7f      	ldr	r3, [pc, #508]	; (80429d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80427d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80427dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80427e0:	687b      	ldr	r3, [r7, #4]
 80427e2:	695b      	ldr	r3, [r3, #20]
 80427e4:	497b      	ldr	r1, [pc, #492]	; (80429d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80427e6:	4313      	orrs	r3, r2
 80427e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80427ec:	687b      	ldr	r3, [r7, #4]
 80427ee:	681b      	ldr	r3, [r3, #0]
 80427f0:	f003 0320 	and.w	r3, r3, #32
 80427f4:	2b00      	cmp	r3, #0
 80427f6:	d00a      	beq.n	804280e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80427f8:	4b76      	ldr	r3, [pc, #472]	; (80429d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80427fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80427fe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8042802:	687b      	ldr	r3, [r7, #4]
 8042804:	699b      	ldr	r3, [r3, #24]
 8042806:	4973      	ldr	r1, [pc, #460]	; (80429d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8042808:	4313      	orrs	r3, r2
 804280a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 804280e:	687b      	ldr	r3, [r7, #4]
 8042810:	681b      	ldr	r3, [r3, #0]
 8042812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8042816:	2b00      	cmp	r3, #0
 8042818:	d00a      	beq.n	8042830 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 804281a:	4b6e      	ldr	r3, [pc, #440]	; (80429d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 804281c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042820:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8042824:	687b      	ldr	r3, [r7, #4]
 8042826:	69db      	ldr	r3, [r3, #28]
 8042828:	496a      	ldr	r1, [pc, #424]	; (80429d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 804282a:	4313      	orrs	r3, r2
 804282c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8042830:	687b      	ldr	r3, [r7, #4]
 8042832:	681b      	ldr	r3, [r3, #0]
 8042834:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8042838:	2b00      	cmp	r3, #0
 804283a:	d00a      	beq.n	8042852 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 804283c:	4b65      	ldr	r3, [pc, #404]	; (80429d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 804283e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042842:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8042846:	687b      	ldr	r3, [r7, #4]
 8042848:	6a1b      	ldr	r3, [r3, #32]
 804284a:	4962      	ldr	r1, [pc, #392]	; (80429d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 804284c:	4313      	orrs	r3, r2
 804284e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8042852:	687b      	ldr	r3, [r7, #4]
 8042854:	681b      	ldr	r3, [r3, #0]
 8042856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 804285a:	2b00      	cmp	r3, #0
 804285c:	d00a      	beq.n	8042874 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 804285e:	4b5d      	ldr	r3, [pc, #372]	; (80429d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8042860:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042864:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8042868:	687b      	ldr	r3, [r7, #4]
 804286a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804286c:	4959      	ldr	r1, [pc, #356]	; (80429d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 804286e:	4313      	orrs	r3, r2
 8042870:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8042874:	687b      	ldr	r3, [r7, #4]
 8042876:	681b      	ldr	r3, [r3, #0]
 8042878:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 804287c:	2b00      	cmp	r3, #0
 804287e:	d00a      	beq.n	8042896 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8042880:	4b54      	ldr	r3, [pc, #336]	; (80429d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8042882:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8042886:	f023 0203 	bic.w	r2, r3, #3
 804288a:	687b      	ldr	r3, [r7, #4]
 804288c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804288e:	4951      	ldr	r1, [pc, #324]	; (80429d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8042890:	4313      	orrs	r3, r2
 8042892:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8042896:	687b      	ldr	r3, [r7, #4]
 8042898:	681b      	ldr	r3, [r3, #0]
 804289a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 804289e:	2b00      	cmp	r3, #0
 80428a0:	d00a      	beq.n	80428b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80428a2:	4b4c      	ldr	r3, [pc, #304]	; (80429d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80428a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80428a8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80428ac:	687b      	ldr	r3, [r7, #4]
 80428ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80428b0:	4948      	ldr	r1, [pc, #288]	; (80429d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80428b2:	4313      	orrs	r3, r2
 80428b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80428b8:	687b      	ldr	r3, [r7, #4]
 80428ba:	681b      	ldr	r3, [r3, #0]
 80428bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80428c0:	2b00      	cmp	r3, #0
 80428c2:	d015      	beq.n	80428f0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80428c4:	4b43      	ldr	r3, [pc, #268]	; (80429d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80428c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80428ca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80428ce:	687b      	ldr	r3, [r7, #4]
 80428d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80428d2:	4940      	ldr	r1, [pc, #256]	; (80429d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80428d4:	4313      	orrs	r3, r2
 80428d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80428da:	687b      	ldr	r3, [r7, #4]
 80428dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80428de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80428e2:	d105      	bne.n	80428f0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80428e4:	4b3b      	ldr	r3, [pc, #236]	; (80429d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80428e6:	68db      	ldr	r3, [r3, #12]
 80428e8:	4a3a      	ldr	r2, [pc, #232]	; (80429d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80428ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80428ee:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80428f0:	687b      	ldr	r3, [r7, #4]
 80428f2:	681b      	ldr	r3, [r3, #0]
 80428f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80428f8:	2b00      	cmp	r3, #0
 80428fa:	d015      	beq.n	8042928 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80428fc:	4b35      	ldr	r3, [pc, #212]	; (80429d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80428fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042902:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8042906:	687b      	ldr	r3, [r7, #4]
 8042908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 804290a:	4932      	ldr	r1, [pc, #200]	; (80429d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 804290c:	4313      	orrs	r3, r2
 804290e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8042912:	687b      	ldr	r3, [r7, #4]
 8042914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8042916:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 804291a:	d105      	bne.n	8042928 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 804291c:	4b2d      	ldr	r3, [pc, #180]	; (80429d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 804291e:	68db      	ldr	r3, [r3, #12]
 8042920:	4a2c      	ldr	r2, [pc, #176]	; (80429d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8042922:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8042926:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8042928:	687b      	ldr	r3, [r7, #4]
 804292a:	681b      	ldr	r3, [r3, #0]
 804292c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8042930:	2b00      	cmp	r3, #0
 8042932:	d015      	beq.n	8042960 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8042934:	4b27      	ldr	r3, [pc, #156]	; (80429d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8042936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804293a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 804293e:	687b      	ldr	r3, [r7, #4]
 8042940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8042942:	4924      	ldr	r1, [pc, #144]	; (80429d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8042944:	4313      	orrs	r3, r2
 8042946:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 804294a:	687b      	ldr	r3, [r7, #4]
 804294c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804294e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8042952:	d105      	bne.n	8042960 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8042954:	4b1f      	ldr	r3, [pc, #124]	; (80429d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8042956:	68db      	ldr	r3, [r3, #12]
 8042958:	4a1e      	ldr	r2, [pc, #120]	; (80429d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 804295a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 804295e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8042960:	687b      	ldr	r3, [r7, #4]
 8042962:	681b      	ldr	r3, [r3, #0]
 8042964:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8042968:	2b00      	cmp	r3, #0
 804296a:	d015      	beq.n	8042998 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 804296c:	4b19      	ldr	r3, [pc, #100]	; (80429d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 804296e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042972:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8042976:	687b      	ldr	r3, [r7, #4]
 8042978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 804297a:	4916      	ldr	r1, [pc, #88]	; (80429d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 804297c:	4313      	orrs	r3, r2
 804297e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8042982:	687b      	ldr	r3, [r7, #4]
 8042984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8042986:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 804298a:	d105      	bne.n	8042998 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 804298c:	4b11      	ldr	r3, [pc, #68]	; (80429d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 804298e:	68db      	ldr	r3, [r3, #12]
 8042990:	4a10      	ldr	r2, [pc, #64]	; (80429d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8042992:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8042996:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8042998:	687b      	ldr	r3, [r7, #4]
 804299a:	681b      	ldr	r3, [r3, #0]
 804299c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80429a0:	2b00      	cmp	r3, #0
 80429a2:	d019      	beq.n	80429d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80429a4:	4b0b      	ldr	r3, [pc, #44]	; (80429d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80429a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80429aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80429ae:	687b      	ldr	r3, [r7, #4]
 80429b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80429b2:	4908      	ldr	r1, [pc, #32]	; (80429d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80429b4:	4313      	orrs	r3, r2
 80429b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80429ba:	687b      	ldr	r3, [r7, #4]
 80429bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80429be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80429c2:	d109      	bne.n	80429d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80429c4:	4b03      	ldr	r3, [pc, #12]	; (80429d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80429c6:	68db      	ldr	r3, [r3, #12]
 80429c8:	4a02      	ldr	r2, [pc, #8]	; (80429d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80429ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80429ce:	60d3      	str	r3, [r2, #12]
 80429d0:	e002      	b.n	80429d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80429d2:	bf00      	nop
 80429d4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80429d8:	687b      	ldr	r3, [r7, #4]
 80429da:	681b      	ldr	r3, [r3, #0]
 80429dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80429e0:	2b00      	cmp	r3, #0
 80429e2:	d015      	beq.n	8042a10 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80429e4:	4b29      	ldr	r3, [pc, #164]	; (8042a8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80429e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80429ea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80429ee:	687b      	ldr	r3, [r7, #4]
 80429f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80429f2:	4926      	ldr	r1, [pc, #152]	; (8042a8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80429f4:	4313      	orrs	r3, r2
 80429f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80429fa:	687b      	ldr	r3, [r7, #4]
 80429fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80429fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8042a02:	d105      	bne.n	8042a10 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8042a04:	4b21      	ldr	r3, [pc, #132]	; (8042a8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8042a06:	68db      	ldr	r3, [r3, #12]
 8042a08:	4a20      	ldr	r2, [pc, #128]	; (8042a8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8042a0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8042a0e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8042a10:	687b      	ldr	r3, [r7, #4]
 8042a12:	681b      	ldr	r3, [r3, #0]
 8042a14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8042a18:	2b00      	cmp	r3, #0
 8042a1a:	d015      	beq.n	8042a48 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8042a1c:	4b1b      	ldr	r3, [pc, #108]	; (8042a8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8042a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042a22:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8042a26:	687b      	ldr	r3, [r7, #4]
 8042a28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8042a2a:	4918      	ldr	r1, [pc, #96]	; (8042a8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8042a2c:	4313      	orrs	r3, r2
 8042a2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8042a32:	687b      	ldr	r3, [r7, #4]
 8042a34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8042a36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8042a3a:	d105      	bne.n	8042a48 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8042a3c:	4b13      	ldr	r3, [pc, #76]	; (8042a8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8042a3e:	68db      	ldr	r3, [r3, #12]
 8042a40:	4a12      	ldr	r2, [pc, #72]	; (8042a8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8042a42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8042a46:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8042a48:	687b      	ldr	r3, [r7, #4]
 8042a4a:	681b      	ldr	r3, [r3, #0]
 8042a4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8042a50:	2b00      	cmp	r3, #0
 8042a52:	d015      	beq.n	8042a80 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8042a54:	4b0d      	ldr	r3, [pc, #52]	; (8042a8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8042a56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8042a5a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8042a5e:	687b      	ldr	r3, [r7, #4]
 8042a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8042a62:	490a      	ldr	r1, [pc, #40]	; (8042a8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8042a64:	4313      	orrs	r3, r2
 8042a66:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8042a6a:	687b      	ldr	r3, [r7, #4]
 8042a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8042a6e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8042a72:	d105      	bne.n	8042a80 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8042a74:	4b05      	ldr	r3, [pc, #20]	; (8042a8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8042a76:	68db      	ldr	r3, [r3, #12]
 8042a78:	4a04      	ldr	r2, [pc, #16]	; (8042a8c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8042a7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8042a7e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8042a80:	7cbb      	ldrb	r3, [r7, #18]
}
 8042a82:	4618      	mov	r0, r3
 8042a84:	3718      	adds	r7, #24
 8042a86:	46bd      	mov	sp, r7
 8042a88:	bd80      	pop	{r7, pc}
 8042a8a:	bf00      	nop
 8042a8c:	40021000 	.word	0x40021000

08042a90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8042a90:	b580      	push	{r7, lr}
 8042a92:	b082      	sub	sp, #8
 8042a94:	af00      	add	r7, sp, #0
 8042a96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8042a98:	687b      	ldr	r3, [r7, #4]
 8042a9a:	2b00      	cmp	r3, #0
 8042a9c:	d101      	bne.n	8042aa2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8042a9e:	2301      	movs	r3, #1
 8042aa0:	e049      	b.n	8042b36 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8042aa2:	687b      	ldr	r3, [r7, #4]
 8042aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8042aa8:	b2db      	uxtb	r3, r3
 8042aaa:	2b00      	cmp	r3, #0
 8042aac:	d106      	bne.n	8042abc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8042aae:	687b      	ldr	r3, [r7, #4]
 8042ab0:	2200      	movs	r2, #0
 8042ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8042ab6:	6878      	ldr	r0, [r7, #4]
 8042ab8:	f7fe f814 	bl	8040ae4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8042abc:	687b      	ldr	r3, [r7, #4]
 8042abe:	2202      	movs	r2, #2
 8042ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8042ac4:	687b      	ldr	r3, [r7, #4]
 8042ac6:	681a      	ldr	r2, [r3, #0]
 8042ac8:	687b      	ldr	r3, [r7, #4]
 8042aca:	3304      	adds	r3, #4
 8042acc:	4619      	mov	r1, r3
 8042ace:	4610      	mov	r0, r2
 8042ad0:	f000 fa56 	bl	8042f80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8042ad4:	687b      	ldr	r3, [r7, #4]
 8042ad6:	2201      	movs	r2, #1
 8042ad8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8042adc:	687b      	ldr	r3, [r7, #4]
 8042ade:	2201      	movs	r2, #1
 8042ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8042ae4:	687b      	ldr	r3, [r7, #4]
 8042ae6:	2201      	movs	r2, #1
 8042ae8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8042aec:	687b      	ldr	r3, [r7, #4]
 8042aee:	2201      	movs	r2, #1
 8042af0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8042af4:	687b      	ldr	r3, [r7, #4]
 8042af6:	2201      	movs	r2, #1
 8042af8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8042afc:	687b      	ldr	r3, [r7, #4]
 8042afe:	2201      	movs	r2, #1
 8042b00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8042b04:	687b      	ldr	r3, [r7, #4]
 8042b06:	2201      	movs	r2, #1
 8042b08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8042b0c:	687b      	ldr	r3, [r7, #4]
 8042b0e:	2201      	movs	r2, #1
 8042b10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8042b14:	687b      	ldr	r3, [r7, #4]
 8042b16:	2201      	movs	r2, #1
 8042b18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8042b1c:	687b      	ldr	r3, [r7, #4]
 8042b1e:	2201      	movs	r2, #1
 8042b20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8042b24:	687b      	ldr	r3, [r7, #4]
 8042b26:	2201      	movs	r2, #1
 8042b28:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8042b2c:	687b      	ldr	r3, [r7, #4]
 8042b2e:	2201      	movs	r2, #1
 8042b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8042b34:	2300      	movs	r3, #0
}
 8042b36:	4618      	mov	r0, r3
 8042b38:	3708      	adds	r7, #8
 8042b3a:	46bd      	mov	sp, r7
 8042b3c:	bd80      	pop	{r7, pc}
	...

08042b40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8042b40:	b480      	push	{r7}
 8042b42:	b085      	sub	sp, #20
 8042b44:	af00      	add	r7, sp, #0
 8042b46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8042b48:	687b      	ldr	r3, [r7, #4]
 8042b4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8042b4e:	b2db      	uxtb	r3, r3
 8042b50:	2b01      	cmp	r3, #1
 8042b52:	d001      	beq.n	8042b58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8042b54:	2301      	movs	r3, #1
 8042b56:	e054      	b.n	8042c02 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8042b58:	687b      	ldr	r3, [r7, #4]
 8042b5a:	2202      	movs	r2, #2
 8042b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8042b60:	687b      	ldr	r3, [r7, #4]
 8042b62:	681b      	ldr	r3, [r3, #0]
 8042b64:	68da      	ldr	r2, [r3, #12]
 8042b66:	687b      	ldr	r3, [r7, #4]
 8042b68:	681b      	ldr	r3, [r3, #0]
 8042b6a:	f042 0201 	orr.w	r2, r2, #1
 8042b6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8042b70:	687b      	ldr	r3, [r7, #4]
 8042b72:	681b      	ldr	r3, [r3, #0]
 8042b74:	4a26      	ldr	r2, [pc, #152]	; (8042c10 <HAL_TIM_Base_Start_IT+0xd0>)
 8042b76:	4293      	cmp	r3, r2
 8042b78:	d022      	beq.n	8042bc0 <HAL_TIM_Base_Start_IT+0x80>
 8042b7a:	687b      	ldr	r3, [r7, #4]
 8042b7c:	681b      	ldr	r3, [r3, #0]
 8042b7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8042b82:	d01d      	beq.n	8042bc0 <HAL_TIM_Base_Start_IT+0x80>
 8042b84:	687b      	ldr	r3, [r7, #4]
 8042b86:	681b      	ldr	r3, [r3, #0]
 8042b88:	4a22      	ldr	r2, [pc, #136]	; (8042c14 <HAL_TIM_Base_Start_IT+0xd4>)
 8042b8a:	4293      	cmp	r3, r2
 8042b8c:	d018      	beq.n	8042bc0 <HAL_TIM_Base_Start_IT+0x80>
 8042b8e:	687b      	ldr	r3, [r7, #4]
 8042b90:	681b      	ldr	r3, [r3, #0]
 8042b92:	4a21      	ldr	r2, [pc, #132]	; (8042c18 <HAL_TIM_Base_Start_IT+0xd8>)
 8042b94:	4293      	cmp	r3, r2
 8042b96:	d013      	beq.n	8042bc0 <HAL_TIM_Base_Start_IT+0x80>
 8042b98:	687b      	ldr	r3, [r7, #4]
 8042b9a:	681b      	ldr	r3, [r3, #0]
 8042b9c:	4a1f      	ldr	r2, [pc, #124]	; (8042c1c <HAL_TIM_Base_Start_IT+0xdc>)
 8042b9e:	4293      	cmp	r3, r2
 8042ba0:	d00e      	beq.n	8042bc0 <HAL_TIM_Base_Start_IT+0x80>
 8042ba2:	687b      	ldr	r3, [r7, #4]
 8042ba4:	681b      	ldr	r3, [r3, #0]
 8042ba6:	4a1e      	ldr	r2, [pc, #120]	; (8042c20 <HAL_TIM_Base_Start_IT+0xe0>)
 8042ba8:	4293      	cmp	r3, r2
 8042baa:	d009      	beq.n	8042bc0 <HAL_TIM_Base_Start_IT+0x80>
 8042bac:	687b      	ldr	r3, [r7, #4]
 8042bae:	681b      	ldr	r3, [r3, #0]
 8042bb0:	4a1c      	ldr	r2, [pc, #112]	; (8042c24 <HAL_TIM_Base_Start_IT+0xe4>)
 8042bb2:	4293      	cmp	r3, r2
 8042bb4:	d004      	beq.n	8042bc0 <HAL_TIM_Base_Start_IT+0x80>
 8042bb6:	687b      	ldr	r3, [r7, #4]
 8042bb8:	681b      	ldr	r3, [r3, #0]
 8042bba:	4a1b      	ldr	r2, [pc, #108]	; (8042c28 <HAL_TIM_Base_Start_IT+0xe8>)
 8042bbc:	4293      	cmp	r3, r2
 8042bbe:	d115      	bne.n	8042bec <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8042bc0:	687b      	ldr	r3, [r7, #4]
 8042bc2:	681b      	ldr	r3, [r3, #0]
 8042bc4:	689a      	ldr	r2, [r3, #8]
 8042bc6:	4b19      	ldr	r3, [pc, #100]	; (8042c2c <HAL_TIM_Base_Start_IT+0xec>)
 8042bc8:	4013      	ands	r3, r2
 8042bca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8042bcc:	68fb      	ldr	r3, [r7, #12]
 8042bce:	2b06      	cmp	r3, #6
 8042bd0:	d015      	beq.n	8042bfe <HAL_TIM_Base_Start_IT+0xbe>
 8042bd2:	68fb      	ldr	r3, [r7, #12]
 8042bd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8042bd8:	d011      	beq.n	8042bfe <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8042bda:	687b      	ldr	r3, [r7, #4]
 8042bdc:	681b      	ldr	r3, [r3, #0]
 8042bde:	681a      	ldr	r2, [r3, #0]
 8042be0:	687b      	ldr	r3, [r7, #4]
 8042be2:	681b      	ldr	r3, [r3, #0]
 8042be4:	f042 0201 	orr.w	r2, r2, #1
 8042be8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8042bea:	e008      	b.n	8042bfe <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8042bec:	687b      	ldr	r3, [r7, #4]
 8042bee:	681b      	ldr	r3, [r3, #0]
 8042bf0:	681a      	ldr	r2, [r3, #0]
 8042bf2:	687b      	ldr	r3, [r7, #4]
 8042bf4:	681b      	ldr	r3, [r3, #0]
 8042bf6:	f042 0201 	orr.w	r2, r2, #1
 8042bfa:	601a      	str	r2, [r3, #0]
 8042bfc:	e000      	b.n	8042c00 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8042bfe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8042c00:	2300      	movs	r3, #0
}
 8042c02:	4618      	mov	r0, r3
 8042c04:	3714      	adds	r7, #20
 8042c06:	46bd      	mov	sp, r7
 8042c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042c0c:	4770      	bx	lr
 8042c0e:	bf00      	nop
 8042c10:	40012c00 	.word	0x40012c00
 8042c14:	40000400 	.word	0x40000400
 8042c18:	40000800 	.word	0x40000800
 8042c1c:	40000c00 	.word	0x40000c00
 8042c20:	40013400 	.word	0x40013400
 8042c24:	40014000 	.word	0x40014000
 8042c28:	40015000 	.word	0x40015000
 8042c2c:	00010007 	.word	0x00010007

08042c30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8042c30:	b580      	push	{r7, lr}
 8042c32:	b082      	sub	sp, #8
 8042c34:	af00      	add	r7, sp, #0
 8042c36:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8042c38:	687b      	ldr	r3, [r7, #4]
 8042c3a:	681b      	ldr	r3, [r3, #0]
 8042c3c:	691b      	ldr	r3, [r3, #16]
 8042c3e:	f003 0302 	and.w	r3, r3, #2
 8042c42:	2b02      	cmp	r3, #2
 8042c44:	d122      	bne.n	8042c8c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8042c46:	687b      	ldr	r3, [r7, #4]
 8042c48:	681b      	ldr	r3, [r3, #0]
 8042c4a:	68db      	ldr	r3, [r3, #12]
 8042c4c:	f003 0302 	and.w	r3, r3, #2
 8042c50:	2b02      	cmp	r3, #2
 8042c52:	d11b      	bne.n	8042c8c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8042c54:	687b      	ldr	r3, [r7, #4]
 8042c56:	681b      	ldr	r3, [r3, #0]
 8042c58:	f06f 0202 	mvn.w	r2, #2
 8042c5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8042c5e:	687b      	ldr	r3, [r7, #4]
 8042c60:	2201      	movs	r2, #1
 8042c62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8042c64:	687b      	ldr	r3, [r7, #4]
 8042c66:	681b      	ldr	r3, [r3, #0]
 8042c68:	699b      	ldr	r3, [r3, #24]
 8042c6a:	f003 0303 	and.w	r3, r3, #3
 8042c6e:	2b00      	cmp	r3, #0
 8042c70:	d003      	beq.n	8042c7a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8042c72:	6878      	ldr	r0, [r7, #4]
 8042c74:	f000 f965 	bl	8042f42 <HAL_TIM_IC_CaptureCallback>
 8042c78:	e005      	b.n	8042c86 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8042c7a:	6878      	ldr	r0, [r7, #4]
 8042c7c:	f000 f957 	bl	8042f2e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8042c80:	6878      	ldr	r0, [r7, #4]
 8042c82:	f000 f968 	bl	8042f56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8042c86:	687b      	ldr	r3, [r7, #4]
 8042c88:	2200      	movs	r2, #0
 8042c8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8042c8c:	687b      	ldr	r3, [r7, #4]
 8042c8e:	681b      	ldr	r3, [r3, #0]
 8042c90:	691b      	ldr	r3, [r3, #16]
 8042c92:	f003 0304 	and.w	r3, r3, #4
 8042c96:	2b04      	cmp	r3, #4
 8042c98:	d122      	bne.n	8042ce0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8042c9a:	687b      	ldr	r3, [r7, #4]
 8042c9c:	681b      	ldr	r3, [r3, #0]
 8042c9e:	68db      	ldr	r3, [r3, #12]
 8042ca0:	f003 0304 	and.w	r3, r3, #4
 8042ca4:	2b04      	cmp	r3, #4
 8042ca6:	d11b      	bne.n	8042ce0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8042ca8:	687b      	ldr	r3, [r7, #4]
 8042caa:	681b      	ldr	r3, [r3, #0]
 8042cac:	f06f 0204 	mvn.w	r2, #4
 8042cb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8042cb2:	687b      	ldr	r3, [r7, #4]
 8042cb4:	2202      	movs	r2, #2
 8042cb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8042cb8:	687b      	ldr	r3, [r7, #4]
 8042cba:	681b      	ldr	r3, [r3, #0]
 8042cbc:	699b      	ldr	r3, [r3, #24]
 8042cbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8042cc2:	2b00      	cmp	r3, #0
 8042cc4:	d003      	beq.n	8042cce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8042cc6:	6878      	ldr	r0, [r7, #4]
 8042cc8:	f000 f93b 	bl	8042f42 <HAL_TIM_IC_CaptureCallback>
 8042ccc:	e005      	b.n	8042cda <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8042cce:	6878      	ldr	r0, [r7, #4]
 8042cd0:	f000 f92d 	bl	8042f2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8042cd4:	6878      	ldr	r0, [r7, #4]
 8042cd6:	f000 f93e 	bl	8042f56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8042cda:	687b      	ldr	r3, [r7, #4]
 8042cdc:	2200      	movs	r2, #0
 8042cde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8042ce0:	687b      	ldr	r3, [r7, #4]
 8042ce2:	681b      	ldr	r3, [r3, #0]
 8042ce4:	691b      	ldr	r3, [r3, #16]
 8042ce6:	f003 0308 	and.w	r3, r3, #8
 8042cea:	2b08      	cmp	r3, #8
 8042cec:	d122      	bne.n	8042d34 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8042cee:	687b      	ldr	r3, [r7, #4]
 8042cf0:	681b      	ldr	r3, [r3, #0]
 8042cf2:	68db      	ldr	r3, [r3, #12]
 8042cf4:	f003 0308 	and.w	r3, r3, #8
 8042cf8:	2b08      	cmp	r3, #8
 8042cfa:	d11b      	bne.n	8042d34 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8042cfc:	687b      	ldr	r3, [r7, #4]
 8042cfe:	681b      	ldr	r3, [r3, #0]
 8042d00:	f06f 0208 	mvn.w	r2, #8
 8042d04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8042d06:	687b      	ldr	r3, [r7, #4]
 8042d08:	2204      	movs	r2, #4
 8042d0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8042d0c:	687b      	ldr	r3, [r7, #4]
 8042d0e:	681b      	ldr	r3, [r3, #0]
 8042d10:	69db      	ldr	r3, [r3, #28]
 8042d12:	f003 0303 	and.w	r3, r3, #3
 8042d16:	2b00      	cmp	r3, #0
 8042d18:	d003      	beq.n	8042d22 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8042d1a:	6878      	ldr	r0, [r7, #4]
 8042d1c:	f000 f911 	bl	8042f42 <HAL_TIM_IC_CaptureCallback>
 8042d20:	e005      	b.n	8042d2e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8042d22:	6878      	ldr	r0, [r7, #4]
 8042d24:	f000 f903 	bl	8042f2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8042d28:	6878      	ldr	r0, [r7, #4]
 8042d2a:	f000 f914 	bl	8042f56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8042d2e:	687b      	ldr	r3, [r7, #4]
 8042d30:	2200      	movs	r2, #0
 8042d32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8042d34:	687b      	ldr	r3, [r7, #4]
 8042d36:	681b      	ldr	r3, [r3, #0]
 8042d38:	691b      	ldr	r3, [r3, #16]
 8042d3a:	f003 0310 	and.w	r3, r3, #16
 8042d3e:	2b10      	cmp	r3, #16
 8042d40:	d122      	bne.n	8042d88 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8042d42:	687b      	ldr	r3, [r7, #4]
 8042d44:	681b      	ldr	r3, [r3, #0]
 8042d46:	68db      	ldr	r3, [r3, #12]
 8042d48:	f003 0310 	and.w	r3, r3, #16
 8042d4c:	2b10      	cmp	r3, #16
 8042d4e:	d11b      	bne.n	8042d88 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8042d50:	687b      	ldr	r3, [r7, #4]
 8042d52:	681b      	ldr	r3, [r3, #0]
 8042d54:	f06f 0210 	mvn.w	r2, #16
 8042d58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8042d5a:	687b      	ldr	r3, [r7, #4]
 8042d5c:	2208      	movs	r2, #8
 8042d5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8042d60:	687b      	ldr	r3, [r7, #4]
 8042d62:	681b      	ldr	r3, [r3, #0]
 8042d64:	69db      	ldr	r3, [r3, #28]
 8042d66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8042d6a:	2b00      	cmp	r3, #0
 8042d6c:	d003      	beq.n	8042d76 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8042d6e:	6878      	ldr	r0, [r7, #4]
 8042d70:	f000 f8e7 	bl	8042f42 <HAL_TIM_IC_CaptureCallback>
 8042d74:	e005      	b.n	8042d82 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8042d76:	6878      	ldr	r0, [r7, #4]
 8042d78:	f000 f8d9 	bl	8042f2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8042d7c:	6878      	ldr	r0, [r7, #4]
 8042d7e:	f000 f8ea 	bl	8042f56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8042d82:	687b      	ldr	r3, [r7, #4]
 8042d84:	2200      	movs	r2, #0
 8042d86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8042d88:	687b      	ldr	r3, [r7, #4]
 8042d8a:	681b      	ldr	r3, [r3, #0]
 8042d8c:	691b      	ldr	r3, [r3, #16]
 8042d8e:	f003 0301 	and.w	r3, r3, #1
 8042d92:	2b01      	cmp	r3, #1
 8042d94:	d10e      	bne.n	8042db4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8042d96:	687b      	ldr	r3, [r7, #4]
 8042d98:	681b      	ldr	r3, [r3, #0]
 8042d9a:	68db      	ldr	r3, [r3, #12]
 8042d9c:	f003 0301 	and.w	r3, r3, #1
 8042da0:	2b01      	cmp	r3, #1
 8042da2:	d107      	bne.n	8042db4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8042da4:	687b      	ldr	r3, [r7, #4]
 8042da6:	681b      	ldr	r3, [r3, #0]
 8042da8:	f06f 0201 	mvn.w	r2, #1
 8042dac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8042dae:	6878      	ldr	r0, [r7, #4]
 8042db0:	f7fd fe56 	bl	8040a60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8042db4:	687b      	ldr	r3, [r7, #4]
 8042db6:	681b      	ldr	r3, [r3, #0]
 8042db8:	691b      	ldr	r3, [r3, #16]
 8042dba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8042dbe:	2b80      	cmp	r3, #128	; 0x80
 8042dc0:	d10e      	bne.n	8042de0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8042dc2:	687b      	ldr	r3, [r7, #4]
 8042dc4:	681b      	ldr	r3, [r3, #0]
 8042dc6:	68db      	ldr	r3, [r3, #12]
 8042dc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8042dcc:	2b80      	cmp	r3, #128	; 0x80
 8042dce:	d107      	bne.n	8042de0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8042dd0:	687b      	ldr	r3, [r7, #4]
 8042dd2:	681b      	ldr	r3, [r3, #0]
 8042dd4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8042dd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8042dda:	6878      	ldr	r0, [r7, #4]
 8042ddc:	f000 f982 	bl	80430e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8042de0:	687b      	ldr	r3, [r7, #4]
 8042de2:	681b      	ldr	r3, [r3, #0]
 8042de4:	691b      	ldr	r3, [r3, #16]
 8042de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8042dea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8042dee:	d10e      	bne.n	8042e0e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8042df0:	687b      	ldr	r3, [r7, #4]
 8042df2:	681b      	ldr	r3, [r3, #0]
 8042df4:	68db      	ldr	r3, [r3, #12]
 8042df6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8042dfa:	2b80      	cmp	r3, #128	; 0x80
 8042dfc:	d107      	bne.n	8042e0e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8042dfe:	687b      	ldr	r3, [r7, #4]
 8042e00:	681b      	ldr	r3, [r3, #0]
 8042e02:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8042e06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8042e08:	6878      	ldr	r0, [r7, #4]
 8042e0a:	f000 f975 	bl	80430f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8042e0e:	687b      	ldr	r3, [r7, #4]
 8042e10:	681b      	ldr	r3, [r3, #0]
 8042e12:	691b      	ldr	r3, [r3, #16]
 8042e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8042e18:	2b40      	cmp	r3, #64	; 0x40
 8042e1a:	d10e      	bne.n	8042e3a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8042e1c:	687b      	ldr	r3, [r7, #4]
 8042e1e:	681b      	ldr	r3, [r3, #0]
 8042e20:	68db      	ldr	r3, [r3, #12]
 8042e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8042e26:	2b40      	cmp	r3, #64	; 0x40
 8042e28:	d107      	bne.n	8042e3a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8042e2a:	687b      	ldr	r3, [r7, #4]
 8042e2c:	681b      	ldr	r3, [r3, #0]
 8042e2e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8042e32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8042e34:	6878      	ldr	r0, [r7, #4]
 8042e36:	f000 f898 	bl	8042f6a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8042e3a:	687b      	ldr	r3, [r7, #4]
 8042e3c:	681b      	ldr	r3, [r3, #0]
 8042e3e:	691b      	ldr	r3, [r3, #16]
 8042e40:	f003 0320 	and.w	r3, r3, #32
 8042e44:	2b20      	cmp	r3, #32
 8042e46:	d10e      	bne.n	8042e66 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8042e48:	687b      	ldr	r3, [r7, #4]
 8042e4a:	681b      	ldr	r3, [r3, #0]
 8042e4c:	68db      	ldr	r3, [r3, #12]
 8042e4e:	f003 0320 	and.w	r3, r3, #32
 8042e52:	2b20      	cmp	r3, #32
 8042e54:	d107      	bne.n	8042e66 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8042e56:	687b      	ldr	r3, [r7, #4]
 8042e58:	681b      	ldr	r3, [r3, #0]
 8042e5a:	f06f 0220 	mvn.w	r2, #32
 8042e5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8042e60:	6878      	ldr	r0, [r7, #4]
 8042e62:	f000 f935 	bl	80430d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8042e66:	687b      	ldr	r3, [r7, #4]
 8042e68:	681b      	ldr	r3, [r3, #0]
 8042e6a:	691b      	ldr	r3, [r3, #16]
 8042e6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8042e70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8042e74:	d10f      	bne.n	8042e96 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8042e76:	687b      	ldr	r3, [r7, #4]
 8042e78:	681b      	ldr	r3, [r3, #0]
 8042e7a:	68db      	ldr	r3, [r3, #12]
 8042e7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8042e80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8042e84:	d107      	bne.n	8042e96 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8042e86:	687b      	ldr	r3, [r7, #4]
 8042e88:	681b      	ldr	r3, [r3, #0]
 8042e8a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8042e8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8042e90:	6878      	ldr	r0, [r7, #4]
 8042e92:	f000 f93b 	bl	804310c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8042e96:	687b      	ldr	r3, [r7, #4]
 8042e98:	681b      	ldr	r3, [r3, #0]
 8042e9a:	691b      	ldr	r3, [r3, #16]
 8042e9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8042ea0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8042ea4:	d10f      	bne.n	8042ec6 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8042ea6:	687b      	ldr	r3, [r7, #4]
 8042ea8:	681b      	ldr	r3, [r3, #0]
 8042eaa:	68db      	ldr	r3, [r3, #12]
 8042eac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8042eb0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8042eb4:	d107      	bne.n	8042ec6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8042eb6:	687b      	ldr	r3, [r7, #4]
 8042eb8:	681b      	ldr	r3, [r3, #0]
 8042eba:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8042ebe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8042ec0:	6878      	ldr	r0, [r7, #4]
 8042ec2:	f000 f92d 	bl	8043120 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8042ec6:	687b      	ldr	r3, [r7, #4]
 8042ec8:	681b      	ldr	r3, [r3, #0]
 8042eca:	691b      	ldr	r3, [r3, #16]
 8042ecc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8042ed0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8042ed4:	d10f      	bne.n	8042ef6 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8042ed6:	687b      	ldr	r3, [r7, #4]
 8042ed8:	681b      	ldr	r3, [r3, #0]
 8042eda:	68db      	ldr	r3, [r3, #12]
 8042edc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8042ee0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8042ee4:	d107      	bne.n	8042ef6 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8042ee6:	687b      	ldr	r3, [r7, #4]
 8042ee8:	681b      	ldr	r3, [r3, #0]
 8042eea:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8042eee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8042ef0:	6878      	ldr	r0, [r7, #4]
 8042ef2:	f000 f91f 	bl	8043134 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8042ef6:	687b      	ldr	r3, [r7, #4]
 8042ef8:	681b      	ldr	r3, [r3, #0]
 8042efa:	691b      	ldr	r3, [r3, #16]
 8042efc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8042f00:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8042f04:	d10f      	bne.n	8042f26 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8042f06:	687b      	ldr	r3, [r7, #4]
 8042f08:	681b      	ldr	r3, [r3, #0]
 8042f0a:	68db      	ldr	r3, [r3, #12]
 8042f0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8042f10:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8042f14:	d107      	bne.n	8042f26 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8042f16:	687b      	ldr	r3, [r7, #4]
 8042f18:	681b      	ldr	r3, [r3, #0]
 8042f1a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8042f1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8042f20:	6878      	ldr	r0, [r7, #4]
 8042f22:	f000 f911 	bl	8043148 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8042f26:	bf00      	nop
 8042f28:	3708      	adds	r7, #8
 8042f2a:	46bd      	mov	sp, r7
 8042f2c:	bd80      	pop	{r7, pc}

08042f2e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8042f2e:	b480      	push	{r7}
 8042f30:	b083      	sub	sp, #12
 8042f32:	af00      	add	r7, sp, #0
 8042f34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8042f36:	bf00      	nop
 8042f38:	370c      	adds	r7, #12
 8042f3a:	46bd      	mov	sp, r7
 8042f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042f40:	4770      	bx	lr

08042f42 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8042f42:	b480      	push	{r7}
 8042f44:	b083      	sub	sp, #12
 8042f46:	af00      	add	r7, sp, #0
 8042f48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8042f4a:	bf00      	nop
 8042f4c:	370c      	adds	r7, #12
 8042f4e:	46bd      	mov	sp, r7
 8042f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042f54:	4770      	bx	lr

08042f56 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8042f56:	b480      	push	{r7}
 8042f58:	b083      	sub	sp, #12
 8042f5a:	af00      	add	r7, sp, #0
 8042f5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8042f5e:	bf00      	nop
 8042f60:	370c      	adds	r7, #12
 8042f62:	46bd      	mov	sp, r7
 8042f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042f68:	4770      	bx	lr

08042f6a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8042f6a:	b480      	push	{r7}
 8042f6c:	b083      	sub	sp, #12
 8042f6e:	af00      	add	r7, sp, #0
 8042f70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8042f72:	bf00      	nop
 8042f74:	370c      	adds	r7, #12
 8042f76:	46bd      	mov	sp, r7
 8042f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042f7c:	4770      	bx	lr
	...

08042f80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8042f80:	b480      	push	{r7}
 8042f82:	b085      	sub	sp, #20
 8042f84:	af00      	add	r7, sp, #0
 8042f86:	6078      	str	r0, [r7, #4]
 8042f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8042f8a:	687b      	ldr	r3, [r7, #4]
 8042f8c:	681b      	ldr	r3, [r3, #0]
 8042f8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8042f90:	687b      	ldr	r3, [r7, #4]
 8042f92:	4a46      	ldr	r2, [pc, #280]	; (80430ac <TIM_Base_SetConfig+0x12c>)
 8042f94:	4293      	cmp	r3, r2
 8042f96:	d017      	beq.n	8042fc8 <TIM_Base_SetConfig+0x48>
 8042f98:	687b      	ldr	r3, [r7, #4]
 8042f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8042f9e:	d013      	beq.n	8042fc8 <TIM_Base_SetConfig+0x48>
 8042fa0:	687b      	ldr	r3, [r7, #4]
 8042fa2:	4a43      	ldr	r2, [pc, #268]	; (80430b0 <TIM_Base_SetConfig+0x130>)
 8042fa4:	4293      	cmp	r3, r2
 8042fa6:	d00f      	beq.n	8042fc8 <TIM_Base_SetConfig+0x48>
 8042fa8:	687b      	ldr	r3, [r7, #4]
 8042faa:	4a42      	ldr	r2, [pc, #264]	; (80430b4 <TIM_Base_SetConfig+0x134>)
 8042fac:	4293      	cmp	r3, r2
 8042fae:	d00b      	beq.n	8042fc8 <TIM_Base_SetConfig+0x48>
 8042fb0:	687b      	ldr	r3, [r7, #4]
 8042fb2:	4a41      	ldr	r2, [pc, #260]	; (80430b8 <TIM_Base_SetConfig+0x138>)
 8042fb4:	4293      	cmp	r3, r2
 8042fb6:	d007      	beq.n	8042fc8 <TIM_Base_SetConfig+0x48>
 8042fb8:	687b      	ldr	r3, [r7, #4]
 8042fba:	4a40      	ldr	r2, [pc, #256]	; (80430bc <TIM_Base_SetConfig+0x13c>)
 8042fbc:	4293      	cmp	r3, r2
 8042fbe:	d003      	beq.n	8042fc8 <TIM_Base_SetConfig+0x48>
 8042fc0:	687b      	ldr	r3, [r7, #4]
 8042fc2:	4a3f      	ldr	r2, [pc, #252]	; (80430c0 <TIM_Base_SetConfig+0x140>)
 8042fc4:	4293      	cmp	r3, r2
 8042fc6:	d108      	bne.n	8042fda <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8042fc8:	68fb      	ldr	r3, [r7, #12]
 8042fca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8042fce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8042fd0:	683b      	ldr	r3, [r7, #0]
 8042fd2:	685b      	ldr	r3, [r3, #4]
 8042fd4:	68fa      	ldr	r2, [r7, #12]
 8042fd6:	4313      	orrs	r3, r2
 8042fd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8042fda:	687b      	ldr	r3, [r7, #4]
 8042fdc:	4a33      	ldr	r2, [pc, #204]	; (80430ac <TIM_Base_SetConfig+0x12c>)
 8042fde:	4293      	cmp	r3, r2
 8042fe0:	d023      	beq.n	804302a <TIM_Base_SetConfig+0xaa>
 8042fe2:	687b      	ldr	r3, [r7, #4]
 8042fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8042fe8:	d01f      	beq.n	804302a <TIM_Base_SetConfig+0xaa>
 8042fea:	687b      	ldr	r3, [r7, #4]
 8042fec:	4a30      	ldr	r2, [pc, #192]	; (80430b0 <TIM_Base_SetConfig+0x130>)
 8042fee:	4293      	cmp	r3, r2
 8042ff0:	d01b      	beq.n	804302a <TIM_Base_SetConfig+0xaa>
 8042ff2:	687b      	ldr	r3, [r7, #4]
 8042ff4:	4a2f      	ldr	r2, [pc, #188]	; (80430b4 <TIM_Base_SetConfig+0x134>)
 8042ff6:	4293      	cmp	r3, r2
 8042ff8:	d017      	beq.n	804302a <TIM_Base_SetConfig+0xaa>
 8042ffa:	687b      	ldr	r3, [r7, #4]
 8042ffc:	4a2e      	ldr	r2, [pc, #184]	; (80430b8 <TIM_Base_SetConfig+0x138>)
 8042ffe:	4293      	cmp	r3, r2
 8043000:	d013      	beq.n	804302a <TIM_Base_SetConfig+0xaa>
 8043002:	687b      	ldr	r3, [r7, #4]
 8043004:	4a2d      	ldr	r2, [pc, #180]	; (80430bc <TIM_Base_SetConfig+0x13c>)
 8043006:	4293      	cmp	r3, r2
 8043008:	d00f      	beq.n	804302a <TIM_Base_SetConfig+0xaa>
 804300a:	687b      	ldr	r3, [r7, #4]
 804300c:	4a2d      	ldr	r2, [pc, #180]	; (80430c4 <TIM_Base_SetConfig+0x144>)
 804300e:	4293      	cmp	r3, r2
 8043010:	d00b      	beq.n	804302a <TIM_Base_SetConfig+0xaa>
 8043012:	687b      	ldr	r3, [r7, #4]
 8043014:	4a2c      	ldr	r2, [pc, #176]	; (80430c8 <TIM_Base_SetConfig+0x148>)
 8043016:	4293      	cmp	r3, r2
 8043018:	d007      	beq.n	804302a <TIM_Base_SetConfig+0xaa>
 804301a:	687b      	ldr	r3, [r7, #4]
 804301c:	4a2b      	ldr	r2, [pc, #172]	; (80430cc <TIM_Base_SetConfig+0x14c>)
 804301e:	4293      	cmp	r3, r2
 8043020:	d003      	beq.n	804302a <TIM_Base_SetConfig+0xaa>
 8043022:	687b      	ldr	r3, [r7, #4]
 8043024:	4a26      	ldr	r2, [pc, #152]	; (80430c0 <TIM_Base_SetConfig+0x140>)
 8043026:	4293      	cmp	r3, r2
 8043028:	d108      	bne.n	804303c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 804302a:	68fb      	ldr	r3, [r7, #12]
 804302c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8043030:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8043032:	683b      	ldr	r3, [r7, #0]
 8043034:	68db      	ldr	r3, [r3, #12]
 8043036:	68fa      	ldr	r2, [r7, #12]
 8043038:	4313      	orrs	r3, r2
 804303a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 804303c:	68fb      	ldr	r3, [r7, #12]
 804303e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8043042:	683b      	ldr	r3, [r7, #0]
 8043044:	695b      	ldr	r3, [r3, #20]
 8043046:	4313      	orrs	r3, r2
 8043048:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 804304a:	687b      	ldr	r3, [r7, #4]
 804304c:	68fa      	ldr	r2, [r7, #12]
 804304e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8043050:	683b      	ldr	r3, [r7, #0]
 8043052:	689a      	ldr	r2, [r3, #8]
 8043054:	687b      	ldr	r3, [r7, #4]
 8043056:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8043058:	683b      	ldr	r3, [r7, #0]
 804305a:	681a      	ldr	r2, [r3, #0]
 804305c:	687b      	ldr	r3, [r7, #4]
 804305e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8043060:	687b      	ldr	r3, [r7, #4]
 8043062:	4a12      	ldr	r2, [pc, #72]	; (80430ac <TIM_Base_SetConfig+0x12c>)
 8043064:	4293      	cmp	r3, r2
 8043066:	d013      	beq.n	8043090 <TIM_Base_SetConfig+0x110>
 8043068:	687b      	ldr	r3, [r7, #4]
 804306a:	4a14      	ldr	r2, [pc, #80]	; (80430bc <TIM_Base_SetConfig+0x13c>)
 804306c:	4293      	cmp	r3, r2
 804306e:	d00f      	beq.n	8043090 <TIM_Base_SetConfig+0x110>
 8043070:	687b      	ldr	r3, [r7, #4]
 8043072:	4a14      	ldr	r2, [pc, #80]	; (80430c4 <TIM_Base_SetConfig+0x144>)
 8043074:	4293      	cmp	r3, r2
 8043076:	d00b      	beq.n	8043090 <TIM_Base_SetConfig+0x110>
 8043078:	687b      	ldr	r3, [r7, #4]
 804307a:	4a13      	ldr	r2, [pc, #76]	; (80430c8 <TIM_Base_SetConfig+0x148>)
 804307c:	4293      	cmp	r3, r2
 804307e:	d007      	beq.n	8043090 <TIM_Base_SetConfig+0x110>
 8043080:	687b      	ldr	r3, [r7, #4]
 8043082:	4a12      	ldr	r2, [pc, #72]	; (80430cc <TIM_Base_SetConfig+0x14c>)
 8043084:	4293      	cmp	r3, r2
 8043086:	d003      	beq.n	8043090 <TIM_Base_SetConfig+0x110>
 8043088:	687b      	ldr	r3, [r7, #4]
 804308a:	4a0d      	ldr	r2, [pc, #52]	; (80430c0 <TIM_Base_SetConfig+0x140>)
 804308c:	4293      	cmp	r3, r2
 804308e:	d103      	bne.n	8043098 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8043090:	683b      	ldr	r3, [r7, #0]
 8043092:	691a      	ldr	r2, [r3, #16]
 8043094:	687b      	ldr	r3, [r7, #4]
 8043096:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8043098:	687b      	ldr	r3, [r7, #4]
 804309a:	2201      	movs	r2, #1
 804309c:	615a      	str	r2, [r3, #20]
}
 804309e:	bf00      	nop
 80430a0:	3714      	adds	r7, #20
 80430a2:	46bd      	mov	sp, r7
 80430a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80430a8:	4770      	bx	lr
 80430aa:	bf00      	nop
 80430ac:	40012c00 	.word	0x40012c00
 80430b0:	40000400 	.word	0x40000400
 80430b4:	40000800 	.word	0x40000800
 80430b8:	40000c00 	.word	0x40000c00
 80430bc:	40013400 	.word	0x40013400
 80430c0:	40015000 	.word	0x40015000
 80430c4:	40014000 	.word	0x40014000
 80430c8:	40014400 	.word	0x40014400
 80430cc:	40014800 	.word	0x40014800

080430d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80430d0:	b480      	push	{r7}
 80430d2:	b083      	sub	sp, #12
 80430d4:	af00      	add	r7, sp, #0
 80430d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80430d8:	bf00      	nop
 80430da:	370c      	adds	r7, #12
 80430dc:	46bd      	mov	sp, r7
 80430de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80430e2:	4770      	bx	lr

080430e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80430e4:	b480      	push	{r7}
 80430e6:	b083      	sub	sp, #12
 80430e8:	af00      	add	r7, sp, #0
 80430ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80430ec:	bf00      	nop
 80430ee:	370c      	adds	r7, #12
 80430f0:	46bd      	mov	sp, r7
 80430f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80430f6:	4770      	bx	lr

080430f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80430f8:	b480      	push	{r7}
 80430fa:	b083      	sub	sp, #12
 80430fc:	af00      	add	r7, sp, #0
 80430fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8043100:	bf00      	nop
 8043102:	370c      	adds	r7, #12
 8043104:	46bd      	mov	sp, r7
 8043106:	f85d 7b04 	ldr.w	r7, [sp], #4
 804310a:	4770      	bx	lr

0804310c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 804310c:	b480      	push	{r7}
 804310e:	b083      	sub	sp, #12
 8043110:	af00      	add	r7, sp, #0
 8043112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8043114:	bf00      	nop
 8043116:	370c      	adds	r7, #12
 8043118:	46bd      	mov	sp, r7
 804311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804311e:	4770      	bx	lr

08043120 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8043120:	b480      	push	{r7}
 8043122:	b083      	sub	sp, #12
 8043124:	af00      	add	r7, sp, #0
 8043126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8043128:	bf00      	nop
 804312a:	370c      	adds	r7, #12
 804312c:	46bd      	mov	sp, r7
 804312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043132:	4770      	bx	lr

08043134 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8043134:	b480      	push	{r7}
 8043136:	b083      	sub	sp, #12
 8043138:	af00      	add	r7, sp, #0
 804313a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 804313c:	bf00      	nop
 804313e:	370c      	adds	r7, #12
 8043140:	46bd      	mov	sp, r7
 8043142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043146:	4770      	bx	lr

08043148 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8043148:	b480      	push	{r7}
 804314a:	b083      	sub	sp, #12
 804314c:	af00      	add	r7, sp, #0
 804314e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8043150:	bf00      	nop
 8043152:	370c      	adds	r7, #12
 8043154:	46bd      	mov	sp, r7
 8043156:	f85d 7b04 	ldr.w	r7, [sp], #4
 804315a:	4770      	bx	lr

0804315c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 804315c:	b580      	push	{r7, lr}
 804315e:	b082      	sub	sp, #8
 8043160:	af00      	add	r7, sp, #0
 8043162:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8043164:	687b      	ldr	r3, [r7, #4]
 8043166:	2b00      	cmp	r3, #0
 8043168:	d101      	bne.n	804316e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 804316a:	2301      	movs	r3, #1
 804316c:	e042      	b.n	80431f4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 804316e:	687b      	ldr	r3, [r7, #4]
 8043170:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8043174:	2b00      	cmp	r3, #0
 8043176:	d106      	bne.n	8043186 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8043178:	687b      	ldr	r3, [r7, #4]
 804317a:	2200      	movs	r2, #0
 804317c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8043180:	6878      	ldr	r0, [r7, #4]
 8043182:	f7fd fcd5 	bl	8040b30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8043186:	687b      	ldr	r3, [r7, #4]
 8043188:	2224      	movs	r2, #36	; 0x24
 804318a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 804318e:	687b      	ldr	r3, [r7, #4]
 8043190:	681b      	ldr	r3, [r3, #0]
 8043192:	681a      	ldr	r2, [r3, #0]
 8043194:	687b      	ldr	r3, [r7, #4]
 8043196:	681b      	ldr	r3, [r3, #0]
 8043198:	f022 0201 	bic.w	r2, r2, #1
 804319c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 804319e:	6878      	ldr	r0, [r7, #4]
 80431a0:	f000 fb1a 	bl	80437d8 <UART_SetConfig>
 80431a4:	4603      	mov	r3, r0
 80431a6:	2b01      	cmp	r3, #1
 80431a8:	d101      	bne.n	80431ae <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80431aa:	2301      	movs	r3, #1
 80431ac:	e022      	b.n	80431f4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80431ae:	687b      	ldr	r3, [r7, #4]
 80431b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80431b2:	2b00      	cmp	r3, #0
 80431b4:	d002      	beq.n	80431bc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80431b6:	6878      	ldr	r0, [r7, #4]
 80431b8:	f000 fe10 	bl	8043ddc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80431bc:	687b      	ldr	r3, [r7, #4]
 80431be:	681b      	ldr	r3, [r3, #0]
 80431c0:	685a      	ldr	r2, [r3, #4]
 80431c2:	687b      	ldr	r3, [r7, #4]
 80431c4:	681b      	ldr	r3, [r3, #0]
 80431c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80431ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80431cc:	687b      	ldr	r3, [r7, #4]
 80431ce:	681b      	ldr	r3, [r3, #0]
 80431d0:	689a      	ldr	r2, [r3, #8]
 80431d2:	687b      	ldr	r3, [r7, #4]
 80431d4:	681b      	ldr	r3, [r3, #0]
 80431d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80431da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80431dc:	687b      	ldr	r3, [r7, #4]
 80431de:	681b      	ldr	r3, [r3, #0]
 80431e0:	681a      	ldr	r2, [r3, #0]
 80431e2:	687b      	ldr	r3, [r7, #4]
 80431e4:	681b      	ldr	r3, [r3, #0]
 80431e6:	f042 0201 	orr.w	r2, r2, #1
 80431ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80431ec:	6878      	ldr	r0, [r7, #4]
 80431ee:	f000 fe97 	bl	8043f20 <UART_CheckIdleState>
 80431f2:	4603      	mov	r3, r0
}
 80431f4:	4618      	mov	r0, r3
 80431f6:	3708      	adds	r7, #8
 80431f8:	46bd      	mov	sp, r7
 80431fa:	bd80      	pop	{r7, pc}

080431fc <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80431fc:	b480      	push	{r7}
 80431fe:	b085      	sub	sp, #20
 8043200:	af00      	add	r7, sp, #0
 8043202:	60f8      	str	r0, [r7, #12]
 8043204:	60b9      	str	r1, [r7, #8]
 8043206:	4613      	mov	r3, r2
 8043208:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 804320a:	68fb      	ldr	r3, [r7, #12]
 804320c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8043210:	2b20      	cmp	r3, #32
 8043212:	d168      	bne.n	80432e6 <HAL_UART_Transmit_IT+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 8043214:	68bb      	ldr	r3, [r7, #8]
 8043216:	2b00      	cmp	r3, #0
 8043218:	d002      	beq.n	8043220 <HAL_UART_Transmit_IT+0x24>
 804321a:	88fb      	ldrh	r3, [r7, #6]
 804321c:	2b00      	cmp	r3, #0
 804321e:	d101      	bne.n	8043224 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8043220:	2301      	movs	r3, #1
 8043222:	e061      	b.n	80432e8 <HAL_UART_Transmit_IT+0xec>
    }

    __HAL_LOCK(huart);
 8043224:	68fb      	ldr	r3, [r7, #12]
 8043226:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 804322a:	2b01      	cmp	r3, #1
 804322c:	d101      	bne.n	8043232 <HAL_UART_Transmit_IT+0x36>
 804322e:	2302      	movs	r3, #2
 8043230:	e05a      	b.n	80432e8 <HAL_UART_Transmit_IT+0xec>
 8043232:	68fb      	ldr	r3, [r7, #12]
 8043234:	2201      	movs	r2, #1
 8043236:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 804323a:	68fb      	ldr	r3, [r7, #12]
 804323c:	68ba      	ldr	r2, [r7, #8]
 804323e:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8043240:	68fb      	ldr	r3, [r7, #12]
 8043242:	88fa      	ldrh	r2, [r7, #6]
 8043244:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8043248:	68fb      	ldr	r3, [r7, #12]
 804324a:	88fa      	ldrh	r2, [r7, #6]
 804324c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8043250:	68fb      	ldr	r3, [r7, #12]
 8043252:	2200      	movs	r2, #0
 8043254:	671a      	str	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8043256:	68fb      	ldr	r3, [r7, #12]
 8043258:	2200      	movs	r2, #0
 804325a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 804325e:	68fb      	ldr	r3, [r7, #12]
 8043260:	2221      	movs	r2, #33	; 0x21
 8043262:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8043266:	68fb      	ldr	r3, [r7, #12]
 8043268:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 804326a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 804326e:	d11c      	bne.n	80432aa <HAL_UART_Transmit_IT+0xae>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8043270:	68fb      	ldr	r3, [r7, #12]
 8043272:	689b      	ldr	r3, [r3, #8]
 8043274:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8043278:	d107      	bne.n	804328a <HAL_UART_Transmit_IT+0x8e>
 804327a:	68fb      	ldr	r3, [r7, #12]
 804327c:	691b      	ldr	r3, [r3, #16]
 804327e:	2b00      	cmp	r3, #0
 8043280:	d103      	bne.n	804328a <HAL_UART_Transmit_IT+0x8e>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8043282:	68fb      	ldr	r3, [r7, #12]
 8043284:	4a1b      	ldr	r2, [pc, #108]	; (80432f4 <HAL_UART_Transmit_IT+0xf8>)
 8043286:	671a      	str	r2, [r3, #112]	; 0x70
 8043288:	e002      	b.n	8043290 <HAL_UART_Transmit_IT+0x94>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 804328a:	68fb      	ldr	r3, [r7, #12]
 804328c:	4a1a      	ldr	r2, [pc, #104]	; (80432f8 <HAL_UART_Transmit_IT+0xfc>)
 804328e:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 8043290:	68fb      	ldr	r3, [r7, #12]
 8043292:	2200      	movs	r2, #0
 8043294:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the TX FIFO threshold interrupt */
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8043298:	68fb      	ldr	r3, [r7, #12]
 804329a:	681b      	ldr	r3, [r3, #0]
 804329c:	689a      	ldr	r2, [r3, #8]
 804329e:	68fb      	ldr	r3, [r7, #12]
 80432a0:	681b      	ldr	r3, [r3, #0]
 80432a2:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80432a6:	609a      	str	r2, [r3, #8]
 80432a8:	e01b      	b.n	80432e2 <HAL_UART_Transmit_IT+0xe6>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80432aa:	68fb      	ldr	r3, [r7, #12]
 80432ac:	689b      	ldr	r3, [r3, #8]
 80432ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80432b2:	d107      	bne.n	80432c4 <HAL_UART_Transmit_IT+0xc8>
 80432b4:	68fb      	ldr	r3, [r7, #12]
 80432b6:	691b      	ldr	r3, [r3, #16]
 80432b8:	2b00      	cmp	r3, #0
 80432ba:	d103      	bne.n	80432c4 <HAL_UART_Transmit_IT+0xc8>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80432bc:	68fb      	ldr	r3, [r7, #12]
 80432be:	4a0f      	ldr	r2, [pc, #60]	; (80432fc <HAL_UART_Transmit_IT+0x100>)
 80432c0:	671a      	str	r2, [r3, #112]	; 0x70
 80432c2:	e002      	b.n	80432ca <HAL_UART_Transmit_IT+0xce>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80432c4:	68fb      	ldr	r3, [r7, #12]
 80432c6:	4a0e      	ldr	r2, [pc, #56]	; (8043300 <HAL_UART_Transmit_IT+0x104>)
 80432c8:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 80432ca:	68fb      	ldr	r3, [r7, #12]
 80432cc:	2200      	movs	r2, #0
 80432ce:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80432d2:	68fb      	ldr	r3, [r7, #12]
 80432d4:	681b      	ldr	r3, [r3, #0]
 80432d6:	681a      	ldr	r2, [r3, #0]
 80432d8:	68fb      	ldr	r3, [r7, #12]
 80432da:	681b      	ldr	r3, [r3, #0]
 80432dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80432e0:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 80432e2:	2300      	movs	r3, #0
 80432e4:	e000      	b.n	80432e8 <HAL_UART_Transmit_IT+0xec>
  }
  else
  {
    return HAL_BUSY;
 80432e6:	2302      	movs	r3, #2
  }
}
 80432e8:	4618      	mov	r0, r3
 80432ea:	3714      	adds	r7, #20
 80432ec:	46bd      	mov	sp, r7
 80432ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80432f2:	4770      	bx	lr
 80432f4:	080442af 	.word	0x080442af
 80432f8:	08044215 	.word	0x08044215
 80432fc:	08044197 	.word	0x08044197
 8043300:	08044123 	.word	0x08044123

08043304 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8043304:	b480      	push	{r7}
 8043306:	b085      	sub	sp, #20
 8043308:	af00      	add	r7, sp, #0
 804330a:	60f8      	str	r0, [r7, #12]
 804330c:	60b9      	str	r1, [r7, #8]
 804330e:	4613      	mov	r3, r2
 8043310:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8043312:	68fb      	ldr	r3, [r7, #12]
 8043314:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8043318:	2b20      	cmp	r3, #32
 804331a:	f040 80bc 	bne.w	8043496 <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 804331e:	68bb      	ldr	r3, [r7, #8]
 8043320:	2b00      	cmp	r3, #0
 8043322:	d002      	beq.n	804332a <HAL_UART_Receive_IT+0x26>
 8043324:	88fb      	ldrh	r3, [r7, #6]
 8043326:	2b00      	cmp	r3, #0
 8043328:	d101      	bne.n	804332e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 804332a:	2301      	movs	r3, #1
 804332c:	e0b4      	b.n	8043498 <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 804332e:	68fb      	ldr	r3, [r7, #12]
 8043330:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8043334:	2b01      	cmp	r3, #1
 8043336:	d101      	bne.n	804333c <HAL_UART_Receive_IT+0x38>
 8043338:	2302      	movs	r3, #2
 804333a:	e0ad      	b.n	8043498 <HAL_UART_Receive_IT+0x194>
 804333c:	68fb      	ldr	r3, [r7, #12]
 804333e:	2201      	movs	r2, #1
 8043340:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 8043344:	68fb      	ldr	r3, [r7, #12]
 8043346:	68ba      	ldr	r2, [r7, #8]
 8043348:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 804334a:	68fb      	ldr	r3, [r7, #12]
 804334c:	88fa      	ldrh	r2, [r7, #6]
 804334e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8043352:	68fb      	ldr	r3, [r7, #12]
 8043354:	88fa      	ldrh	r2, [r7, #6]
 8043356:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 804335a:	68fb      	ldr	r3, [r7, #12]
 804335c:	2200      	movs	r2, #0
 804335e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8043360:	68fb      	ldr	r3, [r7, #12]
 8043362:	689b      	ldr	r3, [r3, #8]
 8043364:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8043368:	d10e      	bne.n	8043388 <HAL_UART_Receive_IT+0x84>
 804336a:	68fb      	ldr	r3, [r7, #12]
 804336c:	691b      	ldr	r3, [r3, #16]
 804336e:	2b00      	cmp	r3, #0
 8043370:	d105      	bne.n	804337e <HAL_UART_Receive_IT+0x7a>
 8043372:	68fb      	ldr	r3, [r7, #12]
 8043374:	f240 12ff 	movw	r2, #511	; 0x1ff
 8043378:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 804337c:	e02d      	b.n	80433da <HAL_UART_Receive_IT+0xd6>
 804337e:	68fb      	ldr	r3, [r7, #12]
 8043380:	22ff      	movs	r2, #255	; 0xff
 8043382:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8043386:	e028      	b.n	80433da <HAL_UART_Receive_IT+0xd6>
 8043388:	68fb      	ldr	r3, [r7, #12]
 804338a:	689b      	ldr	r3, [r3, #8]
 804338c:	2b00      	cmp	r3, #0
 804338e:	d10d      	bne.n	80433ac <HAL_UART_Receive_IT+0xa8>
 8043390:	68fb      	ldr	r3, [r7, #12]
 8043392:	691b      	ldr	r3, [r3, #16]
 8043394:	2b00      	cmp	r3, #0
 8043396:	d104      	bne.n	80433a2 <HAL_UART_Receive_IT+0x9e>
 8043398:	68fb      	ldr	r3, [r7, #12]
 804339a:	22ff      	movs	r2, #255	; 0xff
 804339c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80433a0:	e01b      	b.n	80433da <HAL_UART_Receive_IT+0xd6>
 80433a2:	68fb      	ldr	r3, [r7, #12]
 80433a4:	227f      	movs	r2, #127	; 0x7f
 80433a6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80433aa:	e016      	b.n	80433da <HAL_UART_Receive_IT+0xd6>
 80433ac:	68fb      	ldr	r3, [r7, #12]
 80433ae:	689b      	ldr	r3, [r3, #8]
 80433b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80433b4:	d10d      	bne.n	80433d2 <HAL_UART_Receive_IT+0xce>
 80433b6:	68fb      	ldr	r3, [r7, #12]
 80433b8:	691b      	ldr	r3, [r3, #16]
 80433ba:	2b00      	cmp	r3, #0
 80433bc:	d104      	bne.n	80433c8 <HAL_UART_Receive_IT+0xc4>
 80433be:	68fb      	ldr	r3, [r7, #12]
 80433c0:	227f      	movs	r2, #127	; 0x7f
 80433c2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80433c6:	e008      	b.n	80433da <HAL_UART_Receive_IT+0xd6>
 80433c8:	68fb      	ldr	r3, [r7, #12]
 80433ca:	223f      	movs	r2, #63	; 0x3f
 80433cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80433d0:	e003      	b.n	80433da <HAL_UART_Receive_IT+0xd6>
 80433d2:	68fb      	ldr	r3, [r7, #12]
 80433d4:	2200      	movs	r2, #0
 80433d6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80433da:	68fb      	ldr	r3, [r7, #12]
 80433dc:	2200      	movs	r2, #0
 80433de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80433e2:	68fb      	ldr	r3, [r7, #12]
 80433e4:	2222      	movs	r2, #34	; 0x22
 80433e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80433ea:	68fb      	ldr	r3, [r7, #12]
 80433ec:	681b      	ldr	r3, [r3, #0]
 80433ee:	689a      	ldr	r2, [r3, #8]
 80433f0:	68fb      	ldr	r3, [r7, #12]
 80433f2:	681b      	ldr	r3, [r3, #0]
 80433f4:	f042 0201 	orr.w	r2, r2, #1
 80433f8:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80433fa:	68fb      	ldr	r3, [r7, #12]
 80433fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80433fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8043402:	d12a      	bne.n	804345a <HAL_UART_Receive_IT+0x156>
 8043404:	68fb      	ldr	r3, [r7, #12]
 8043406:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 804340a:	88fa      	ldrh	r2, [r7, #6]
 804340c:	429a      	cmp	r2, r3
 804340e:	d324      	bcc.n	804345a <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8043410:	68fb      	ldr	r3, [r7, #12]
 8043412:	689b      	ldr	r3, [r3, #8]
 8043414:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8043418:	d107      	bne.n	804342a <HAL_UART_Receive_IT+0x126>
 804341a:	68fb      	ldr	r3, [r7, #12]
 804341c:	691b      	ldr	r3, [r3, #16]
 804341e:	2b00      	cmp	r3, #0
 8043420:	d103      	bne.n	804342a <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8043422:	68fb      	ldr	r3, [r7, #12]
 8043424:	4a1f      	ldr	r2, [pc, #124]	; (80434a4 <HAL_UART_Receive_IT+0x1a0>)
 8043426:	66da      	str	r2, [r3, #108]	; 0x6c
 8043428:	e002      	b.n	8043430 <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 804342a:	68fb      	ldr	r3, [r7, #12]
 804342c:	4a1e      	ldr	r2, [pc, #120]	; (80434a8 <HAL_UART_Receive_IT+0x1a4>)
 804342e:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8043430:	68fb      	ldr	r3, [r7, #12]
 8043432:	2200      	movs	r2, #0
 8043434:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8043438:	68fb      	ldr	r3, [r7, #12]
 804343a:	681b      	ldr	r3, [r3, #0]
 804343c:	681a      	ldr	r2, [r3, #0]
 804343e:	68fb      	ldr	r3, [r7, #12]
 8043440:	681b      	ldr	r3, [r3, #0]
 8043442:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8043446:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8043448:	68fb      	ldr	r3, [r7, #12]
 804344a:	681b      	ldr	r3, [r3, #0]
 804344c:	689a      	ldr	r2, [r3, #8]
 804344e:	68fb      	ldr	r3, [r7, #12]
 8043450:	681b      	ldr	r3, [r3, #0]
 8043452:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8043456:	609a      	str	r2, [r3, #8]
 8043458:	e01b      	b.n	8043492 <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 804345a:	68fb      	ldr	r3, [r7, #12]
 804345c:	689b      	ldr	r3, [r3, #8]
 804345e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8043462:	d107      	bne.n	8043474 <HAL_UART_Receive_IT+0x170>
 8043464:	68fb      	ldr	r3, [r7, #12]
 8043466:	691b      	ldr	r3, [r3, #16]
 8043468:	2b00      	cmp	r3, #0
 804346a:	d103      	bne.n	8043474 <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 804346c:	68fb      	ldr	r3, [r7, #12]
 804346e:	4a0f      	ldr	r2, [pc, #60]	; (80434ac <HAL_UART_Receive_IT+0x1a8>)
 8043470:	66da      	str	r2, [r3, #108]	; 0x6c
 8043472:	e002      	b.n	804347a <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 8043474:	68fb      	ldr	r3, [r7, #12]
 8043476:	4a0e      	ldr	r2, [pc, #56]	; (80434b0 <HAL_UART_Receive_IT+0x1ac>)
 8043478:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 804347a:	68fb      	ldr	r3, [r7, #12]
 804347c:	2200      	movs	r2, #0
 804347e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8043482:	68fb      	ldr	r3, [r7, #12]
 8043484:	681b      	ldr	r3, [r3, #0]
 8043486:	681a      	ldr	r2, [r3, #0]
 8043488:	68fb      	ldr	r3, [r7, #12]
 804348a:	681b      	ldr	r3, [r3, #0]
 804348c:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8043490:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8043492:	2300      	movs	r3, #0
 8043494:	e000      	b.n	8043498 <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 8043496:	2302      	movs	r3, #2
  }
}
 8043498:	4618      	mov	r0, r3
 804349a:	3714      	adds	r7, #20
 804349c:	46bd      	mov	sp, r7
 804349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80434a2:	4770      	bx	lr
 80434a4:	080445e5 	.word	0x080445e5
 80434a8:	080444dd 	.word	0x080444dd
 80434ac:	08044431 	.word	0x08044431
 80434b0:	08044387 	.word	0x08044387

080434b4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80434b4:	b580      	push	{r7, lr}
 80434b6:	b088      	sub	sp, #32
 80434b8:	af00      	add	r7, sp, #0
 80434ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80434bc:	687b      	ldr	r3, [r7, #4]
 80434be:	681b      	ldr	r3, [r3, #0]
 80434c0:	69db      	ldr	r3, [r3, #28]
 80434c2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80434c4:	687b      	ldr	r3, [r7, #4]
 80434c6:	681b      	ldr	r3, [r3, #0]
 80434c8:	681b      	ldr	r3, [r3, #0]
 80434ca:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80434cc:	687b      	ldr	r3, [r7, #4]
 80434ce:	681b      	ldr	r3, [r3, #0]
 80434d0:	689b      	ldr	r3, [r3, #8]
 80434d2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80434d4:	69fa      	ldr	r2, [r7, #28]
 80434d6:	f640 030f 	movw	r3, #2063	; 0x80f
 80434da:	4013      	ands	r3, r2
 80434dc:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80434de:	693b      	ldr	r3, [r7, #16]
 80434e0:	2b00      	cmp	r3, #0
 80434e2:	d118      	bne.n	8043516 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80434e4:	69fb      	ldr	r3, [r7, #28]
 80434e6:	f003 0320 	and.w	r3, r3, #32
 80434ea:	2b00      	cmp	r3, #0
 80434ec:	d013      	beq.n	8043516 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80434ee:	69bb      	ldr	r3, [r7, #24]
 80434f0:	f003 0320 	and.w	r3, r3, #32
 80434f4:	2b00      	cmp	r3, #0
 80434f6:	d104      	bne.n	8043502 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80434f8:	697b      	ldr	r3, [r7, #20]
 80434fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80434fe:	2b00      	cmp	r3, #0
 8043500:	d009      	beq.n	8043516 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8043502:	687b      	ldr	r3, [r7, #4]
 8043504:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8043506:	2b00      	cmp	r3, #0
 8043508:	f000 8144 	beq.w	8043794 <HAL_UART_IRQHandler+0x2e0>
      {
        huart->RxISR(huart);
 804350c:	687b      	ldr	r3, [r7, #4]
 804350e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8043510:	6878      	ldr	r0, [r7, #4]
 8043512:	4798      	blx	r3
      }
      return;
 8043514:	e13e      	b.n	8043794 <HAL_UART_IRQHandler+0x2e0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8043516:	693b      	ldr	r3, [r7, #16]
 8043518:	2b00      	cmp	r3, #0
 804351a:	f000 80e8 	beq.w	80436ee <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 804351e:	697a      	ldr	r2, [r7, #20]
 8043520:	4b9e      	ldr	r3, [pc, #632]	; (804379c <HAL_UART_IRQHandler+0x2e8>)
 8043522:	4013      	ands	r3, r2
 8043524:	2b00      	cmp	r3, #0
 8043526:	d105      	bne.n	8043534 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8043528:	69ba      	ldr	r2, [r7, #24]
 804352a:	4b9d      	ldr	r3, [pc, #628]	; (80437a0 <HAL_UART_IRQHandler+0x2ec>)
 804352c:	4013      	ands	r3, r2
 804352e:	2b00      	cmp	r3, #0
 8043530:	f000 80dd 	beq.w	80436ee <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8043534:	69fb      	ldr	r3, [r7, #28]
 8043536:	f003 0301 	and.w	r3, r3, #1
 804353a:	2b00      	cmp	r3, #0
 804353c:	d010      	beq.n	8043560 <HAL_UART_IRQHandler+0xac>
 804353e:	69bb      	ldr	r3, [r7, #24]
 8043540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8043544:	2b00      	cmp	r3, #0
 8043546:	d00b      	beq.n	8043560 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8043548:	687b      	ldr	r3, [r7, #4]
 804354a:	681b      	ldr	r3, [r3, #0]
 804354c:	2201      	movs	r2, #1
 804354e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8043550:	687b      	ldr	r3, [r7, #4]
 8043552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8043556:	f043 0201 	orr.w	r2, r3, #1
 804355a:	687b      	ldr	r3, [r7, #4]
 804355c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8043560:	69fb      	ldr	r3, [r7, #28]
 8043562:	f003 0302 	and.w	r3, r3, #2
 8043566:	2b00      	cmp	r3, #0
 8043568:	d010      	beq.n	804358c <HAL_UART_IRQHandler+0xd8>
 804356a:	697b      	ldr	r3, [r7, #20]
 804356c:	f003 0301 	and.w	r3, r3, #1
 8043570:	2b00      	cmp	r3, #0
 8043572:	d00b      	beq.n	804358c <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8043574:	687b      	ldr	r3, [r7, #4]
 8043576:	681b      	ldr	r3, [r3, #0]
 8043578:	2202      	movs	r2, #2
 804357a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 804357c:	687b      	ldr	r3, [r7, #4]
 804357e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8043582:	f043 0204 	orr.w	r2, r3, #4
 8043586:	687b      	ldr	r3, [r7, #4]
 8043588:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 804358c:	69fb      	ldr	r3, [r7, #28]
 804358e:	f003 0304 	and.w	r3, r3, #4
 8043592:	2b00      	cmp	r3, #0
 8043594:	d010      	beq.n	80435b8 <HAL_UART_IRQHandler+0x104>
 8043596:	697b      	ldr	r3, [r7, #20]
 8043598:	f003 0301 	and.w	r3, r3, #1
 804359c:	2b00      	cmp	r3, #0
 804359e:	d00b      	beq.n	80435b8 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80435a0:	687b      	ldr	r3, [r7, #4]
 80435a2:	681b      	ldr	r3, [r3, #0]
 80435a4:	2204      	movs	r2, #4
 80435a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80435a8:	687b      	ldr	r3, [r7, #4]
 80435aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80435ae:	f043 0202 	orr.w	r2, r3, #2
 80435b2:	687b      	ldr	r3, [r7, #4]
 80435b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80435b8:	69fb      	ldr	r3, [r7, #28]
 80435ba:	f003 0308 	and.w	r3, r3, #8
 80435be:	2b00      	cmp	r3, #0
 80435c0:	d015      	beq.n	80435ee <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80435c2:	69bb      	ldr	r3, [r7, #24]
 80435c4:	f003 0320 	and.w	r3, r3, #32
 80435c8:	2b00      	cmp	r3, #0
 80435ca:	d104      	bne.n	80435d6 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80435cc:	697a      	ldr	r2, [r7, #20]
 80435ce:	4b73      	ldr	r3, [pc, #460]	; (804379c <HAL_UART_IRQHandler+0x2e8>)
 80435d0:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80435d2:	2b00      	cmp	r3, #0
 80435d4:	d00b      	beq.n	80435ee <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80435d6:	687b      	ldr	r3, [r7, #4]
 80435d8:	681b      	ldr	r3, [r3, #0]
 80435da:	2208      	movs	r2, #8
 80435dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80435de:	687b      	ldr	r3, [r7, #4]
 80435e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80435e4:	f043 0208 	orr.w	r2, r3, #8
 80435e8:	687b      	ldr	r3, [r7, #4]
 80435ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80435ee:	69fb      	ldr	r3, [r7, #28]
 80435f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80435f4:	2b00      	cmp	r3, #0
 80435f6:	d011      	beq.n	804361c <HAL_UART_IRQHandler+0x168>
 80435f8:	69bb      	ldr	r3, [r7, #24]
 80435fa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80435fe:	2b00      	cmp	r3, #0
 8043600:	d00c      	beq.n	804361c <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8043602:	687b      	ldr	r3, [r7, #4]
 8043604:	681b      	ldr	r3, [r3, #0]
 8043606:	f44f 6200 	mov.w	r2, #2048	; 0x800
 804360a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 804360c:	687b      	ldr	r3, [r7, #4]
 804360e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8043612:	f043 0220 	orr.w	r2, r3, #32
 8043616:	687b      	ldr	r3, [r7, #4]
 8043618:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 804361c:	687b      	ldr	r3, [r7, #4]
 804361e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8043622:	2b00      	cmp	r3, #0
 8043624:	f000 80b8 	beq.w	8043798 <HAL_UART_IRQHandler+0x2e4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8043628:	69fb      	ldr	r3, [r7, #28]
 804362a:	f003 0320 	and.w	r3, r3, #32
 804362e:	2b00      	cmp	r3, #0
 8043630:	d011      	beq.n	8043656 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8043632:	69bb      	ldr	r3, [r7, #24]
 8043634:	f003 0320 	and.w	r3, r3, #32
 8043638:	2b00      	cmp	r3, #0
 804363a:	d104      	bne.n	8043646 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 804363c:	697b      	ldr	r3, [r7, #20]
 804363e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8043642:	2b00      	cmp	r3, #0
 8043644:	d007      	beq.n	8043656 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8043646:	687b      	ldr	r3, [r7, #4]
 8043648:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 804364a:	2b00      	cmp	r3, #0
 804364c:	d003      	beq.n	8043656 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 804364e:	687b      	ldr	r3, [r7, #4]
 8043650:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8043652:	6878      	ldr	r0, [r7, #4]
 8043654:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8043656:	687b      	ldr	r3, [r7, #4]
 8043658:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804365c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 804365e:	687b      	ldr	r3, [r7, #4]
 8043660:	681b      	ldr	r3, [r3, #0]
 8043662:	689b      	ldr	r3, [r3, #8]
 8043664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8043668:	2b40      	cmp	r3, #64	; 0x40
 804366a:	d004      	beq.n	8043676 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 804366c:	68fb      	ldr	r3, [r7, #12]
 804366e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8043672:	2b00      	cmp	r3, #0
 8043674:	d031      	beq.n	80436da <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8043676:	6878      	ldr	r0, [r7, #4]
 8043678:	f000 fd1a 	bl	80440b0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 804367c:	687b      	ldr	r3, [r7, #4]
 804367e:	681b      	ldr	r3, [r3, #0]
 8043680:	689b      	ldr	r3, [r3, #8]
 8043682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8043686:	2b40      	cmp	r3, #64	; 0x40
 8043688:	d123      	bne.n	80436d2 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 804368a:	687b      	ldr	r3, [r7, #4]
 804368c:	681b      	ldr	r3, [r3, #0]
 804368e:	689a      	ldr	r2, [r3, #8]
 8043690:	687b      	ldr	r3, [r7, #4]
 8043692:	681b      	ldr	r3, [r3, #0]
 8043694:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8043698:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 804369a:	687b      	ldr	r3, [r7, #4]
 804369c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 804369e:	2b00      	cmp	r3, #0
 80436a0:	d013      	beq.n	80436ca <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80436a2:	687b      	ldr	r3, [r7, #4]
 80436a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80436a6:	4a3f      	ldr	r2, [pc, #252]	; (80437a4 <HAL_UART_IRQHandler+0x2f0>)
 80436a8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80436aa:	687b      	ldr	r3, [r7, #4]
 80436ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80436ae:	4618      	mov	r0, r3
 80436b0:	f7fd fcd5 	bl	804105e <HAL_DMA_Abort_IT>
 80436b4:	4603      	mov	r3, r0
 80436b6:	2b00      	cmp	r3, #0
 80436b8:	d017      	beq.n	80436ea <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80436ba:	687b      	ldr	r3, [r7, #4]
 80436bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80436be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80436c0:	687a      	ldr	r2, [r7, #4]
 80436c2:	6f92      	ldr	r2, [r2, #120]	; 0x78
 80436c4:	4610      	mov	r0, r2
 80436c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80436c8:	e00f      	b.n	80436ea <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80436ca:	6878      	ldr	r0, [r7, #4]
 80436cc:	f000 f87a 	bl	80437c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80436d0:	e00b      	b.n	80436ea <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80436d2:	6878      	ldr	r0, [r7, #4]
 80436d4:	f000 f876 	bl	80437c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80436d8:	e007      	b.n	80436ea <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80436da:	6878      	ldr	r0, [r7, #4]
 80436dc:	f000 f872 	bl	80437c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80436e0:	687b      	ldr	r3, [r7, #4]
 80436e2:	2200      	movs	r2, #0
 80436e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 80436e8:	e056      	b.n	8043798 <HAL_UART_IRQHandler+0x2e4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80436ea:	bf00      	nop
    return;
 80436ec:	e054      	b.n	8043798 <HAL_UART_IRQHandler+0x2e4>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80436ee:	69fb      	ldr	r3, [r7, #28]
 80436f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80436f4:	2b00      	cmp	r3, #0
 80436f6:	d00d      	beq.n	8043714 <HAL_UART_IRQHandler+0x260>
 80436f8:	697b      	ldr	r3, [r7, #20]
 80436fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80436fe:	2b00      	cmp	r3, #0
 8043700:	d008      	beq.n	8043714 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8043702:	687b      	ldr	r3, [r7, #4]
 8043704:	681b      	ldr	r3, [r3, #0]
 8043706:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 804370a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 804370c:	6878      	ldr	r0, [r7, #4]
 804370e:	f000 ffed 	bl	80446ec <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8043712:	e04a      	b.n	80437aa <HAL_UART_IRQHandler+0x2f6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8043714:	69fb      	ldr	r3, [r7, #28]
 8043716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 804371a:	2b00      	cmp	r3, #0
 804371c:	d012      	beq.n	8043744 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 804371e:	69bb      	ldr	r3, [r7, #24]
 8043720:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8043724:	2b00      	cmp	r3, #0
 8043726:	d104      	bne.n	8043732 <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8043728:	697b      	ldr	r3, [r7, #20]
 804372a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 804372e:	2b00      	cmp	r3, #0
 8043730:	d008      	beq.n	8043744 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 8043732:	687b      	ldr	r3, [r7, #4]
 8043734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8043736:	2b00      	cmp	r3, #0
 8043738:	d036      	beq.n	80437a8 <HAL_UART_IRQHandler+0x2f4>
    {
      huart->TxISR(huart);
 804373a:	687b      	ldr	r3, [r7, #4]
 804373c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804373e:	6878      	ldr	r0, [r7, #4]
 8043740:	4798      	blx	r3
    }
    return;
 8043742:	e031      	b.n	80437a8 <HAL_UART_IRQHandler+0x2f4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8043744:	69fb      	ldr	r3, [r7, #28]
 8043746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 804374a:	2b00      	cmp	r3, #0
 804374c:	d008      	beq.n	8043760 <HAL_UART_IRQHandler+0x2ac>
 804374e:	69bb      	ldr	r3, [r7, #24]
 8043750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8043754:	2b00      	cmp	r3, #0
 8043756:	d003      	beq.n	8043760 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8043758:	6878      	ldr	r0, [r7, #4]
 804375a:	f000 fdfa 	bl	8044352 <UART_EndTransmit_IT>
    return;
 804375e:	e024      	b.n	80437aa <HAL_UART_IRQHandler+0x2f6>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8043760:	69fb      	ldr	r3, [r7, #28]
 8043762:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8043766:	2b00      	cmp	r3, #0
 8043768:	d008      	beq.n	804377c <HAL_UART_IRQHandler+0x2c8>
 804376a:	69bb      	ldr	r3, [r7, #24]
 804376c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8043770:	2b00      	cmp	r3, #0
 8043772:	d003      	beq.n	804377c <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8043774:	6878      	ldr	r0, [r7, #4]
 8043776:	f000 ffcd 	bl	8044714 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 804377a:	e016      	b.n	80437aa <HAL_UART_IRQHandler+0x2f6>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 804377c:	69fb      	ldr	r3, [r7, #28]
 804377e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8043782:	2b00      	cmp	r3, #0
 8043784:	d011      	beq.n	80437aa <HAL_UART_IRQHandler+0x2f6>
 8043786:	69bb      	ldr	r3, [r7, #24]
 8043788:	2b00      	cmp	r3, #0
 804378a:	da0e      	bge.n	80437aa <HAL_UART_IRQHandler+0x2f6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 804378c:	6878      	ldr	r0, [r7, #4]
 804378e:	f000 ffb7 	bl	8044700 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8043792:	e00a      	b.n	80437aa <HAL_UART_IRQHandler+0x2f6>
      return;
 8043794:	bf00      	nop
 8043796:	e008      	b.n	80437aa <HAL_UART_IRQHandler+0x2f6>
    return;
 8043798:	bf00      	nop
 804379a:	e006      	b.n	80437aa <HAL_UART_IRQHandler+0x2f6>
 804379c:	10000001 	.word	0x10000001
 80437a0:	04000120 	.word	0x04000120
 80437a4:	080440f7 	.word	0x080440f7
    return;
 80437a8:	bf00      	nop
  }
}
 80437aa:	3720      	adds	r7, #32
 80437ac:	46bd      	mov	sp, r7
 80437ae:	bd80      	pop	{r7, pc}

080437b0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80437b0:	b480      	push	{r7}
 80437b2:	b083      	sub	sp, #12
 80437b4:	af00      	add	r7, sp, #0
 80437b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80437b8:	bf00      	nop
 80437ba:	370c      	adds	r7, #12
 80437bc:	46bd      	mov	sp, r7
 80437be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80437c2:	4770      	bx	lr

080437c4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80437c4:	b480      	push	{r7}
 80437c6:	b083      	sub	sp, #12
 80437c8:	af00      	add	r7, sp, #0
 80437ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80437cc:	bf00      	nop
 80437ce:	370c      	adds	r7, #12
 80437d0:	46bd      	mov	sp, r7
 80437d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80437d6:	4770      	bx	lr

080437d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80437d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80437dc:	b08c      	sub	sp, #48	; 0x30
 80437de:	af00      	add	r7, sp, #0
 80437e0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80437e2:	2300      	movs	r3, #0
 80437e4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80437e8:	697b      	ldr	r3, [r7, #20]
 80437ea:	689a      	ldr	r2, [r3, #8]
 80437ec:	697b      	ldr	r3, [r7, #20]
 80437ee:	691b      	ldr	r3, [r3, #16]
 80437f0:	431a      	orrs	r2, r3
 80437f2:	697b      	ldr	r3, [r7, #20]
 80437f4:	695b      	ldr	r3, [r3, #20]
 80437f6:	431a      	orrs	r2, r3
 80437f8:	697b      	ldr	r3, [r7, #20]
 80437fa:	69db      	ldr	r3, [r3, #28]
 80437fc:	4313      	orrs	r3, r2
 80437fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  tmpreg |= (uint32_t)huart->FifoMode;
 8043800:	697b      	ldr	r3, [r7, #20]
 8043802:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8043804:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8043806:	4313      	orrs	r3, r2
 8043808:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 804380a:	697b      	ldr	r3, [r7, #20]
 804380c:	681b      	ldr	r3, [r3, #0]
 804380e:	681a      	ldr	r2, [r3, #0]
 8043810:	4baa      	ldr	r3, [pc, #680]	; (8043abc <UART_SetConfig+0x2e4>)
 8043812:	4013      	ands	r3, r2
 8043814:	697a      	ldr	r2, [r7, #20]
 8043816:	6812      	ldr	r2, [r2, #0]
 8043818:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 804381a:	430b      	orrs	r3, r1
 804381c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 804381e:	697b      	ldr	r3, [r7, #20]
 8043820:	681b      	ldr	r3, [r3, #0]
 8043822:	685b      	ldr	r3, [r3, #4]
 8043824:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8043828:	697b      	ldr	r3, [r7, #20]
 804382a:	68da      	ldr	r2, [r3, #12]
 804382c:	697b      	ldr	r3, [r7, #20]
 804382e:	681b      	ldr	r3, [r3, #0]
 8043830:	430a      	orrs	r2, r1
 8043832:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8043834:	697b      	ldr	r3, [r7, #20]
 8043836:	699b      	ldr	r3, [r3, #24]
 8043838:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 804383a:	697b      	ldr	r3, [r7, #20]
 804383c:	681b      	ldr	r3, [r3, #0]
 804383e:	4aa0      	ldr	r2, [pc, #640]	; (8043ac0 <UART_SetConfig+0x2e8>)
 8043840:	4293      	cmp	r3, r2
 8043842:	d004      	beq.n	804384e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8043844:	697b      	ldr	r3, [r7, #20]
 8043846:	6a1b      	ldr	r3, [r3, #32]
 8043848:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 804384a:	4313      	orrs	r3, r2
 804384c:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 804384e:	697b      	ldr	r3, [r7, #20]
 8043850:	681b      	ldr	r3, [r3, #0]
 8043852:	689b      	ldr	r3, [r3, #8]
 8043854:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8043858:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 804385c:	697a      	ldr	r2, [r7, #20]
 804385e:	6812      	ldr	r2, [r2, #0]
 8043860:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8043862:	430b      	orrs	r3, r1
 8043864:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8043866:	697b      	ldr	r3, [r7, #20]
 8043868:	681b      	ldr	r3, [r3, #0]
 804386a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804386c:	f023 010f 	bic.w	r1, r3, #15
 8043870:	697b      	ldr	r3, [r7, #20]
 8043872:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8043874:	697b      	ldr	r3, [r7, #20]
 8043876:	681b      	ldr	r3, [r3, #0]
 8043878:	430a      	orrs	r2, r1
 804387a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 804387c:	697b      	ldr	r3, [r7, #20]
 804387e:	681b      	ldr	r3, [r3, #0]
 8043880:	4a90      	ldr	r2, [pc, #576]	; (8043ac4 <UART_SetConfig+0x2ec>)
 8043882:	4293      	cmp	r3, r2
 8043884:	d126      	bne.n	80438d4 <UART_SetConfig+0xfc>
 8043886:	4b90      	ldr	r3, [pc, #576]	; (8043ac8 <UART_SetConfig+0x2f0>)
 8043888:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804388c:	f003 0303 	and.w	r3, r3, #3
 8043890:	2b03      	cmp	r3, #3
 8043892:	d81b      	bhi.n	80438cc <UART_SetConfig+0xf4>
 8043894:	a201      	add	r2, pc, #4	; (adr r2, 804389c <UART_SetConfig+0xc4>)
 8043896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804389a:	bf00      	nop
 804389c:	080438ad 	.word	0x080438ad
 80438a0:	080438bd 	.word	0x080438bd
 80438a4:	080438b5 	.word	0x080438b5
 80438a8:	080438c5 	.word	0x080438c5
 80438ac:	2301      	movs	r3, #1
 80438ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80438b2:	e116      	b.n	8043ae2 <UART_SetConfig+0x30a>
 80438b4:	2302      	movs	r3, #2
 80438b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80438ba:	e112      	b.n	8043ae2 <UART_SetConfig+0x30a>
 80438bc:	2304      	movs	r3, #4
 80438be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80438c2:	e10e      	b.n	8043ae2 <UART_SetConfig+0x30a>
 80438c4:	2308      	movs	r3, #8
 80438c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80438ca:	e10a      	b.n	8043ae2 <UART_SetConfig+0x30a>
 80438cc:	2310      	movs	r3, #16
 80438ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80438d2:	e106      	b.n	8043ae2 <UART_SetConfig+0x30a>
 80438d4:	697b      	ldr	r3, [r7, #20]
 80438d6:	681b      	ldr	r3, [r3, #0]
 80438d8:	4a7c      	ldr	r2, [pc, #496]	; (8043acc <UART_SetConfig+0x2f4>)
 80438da:	4293      	cmp	r3, r2
 80438dc:	d138      	bne.n	8043950 <UART_SetConfig+0x178>
 80438de:	4b7a      	ldr	r3, [pc, #488]	; (8043ac8 <UART_SetConfig+0x2f0>)
 80438e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80438e4:	f003 030c 	and.w	r3, r3, #12
 80438e8:	2b0c      	cmp	r3, #12
 80438ea:	d82d      	bhi.n	8043948 <UART_SetConfig+0x170>
 80438ec:	a201      	add	r2, pc, #4	; (adr r2, 80438f4 <UART_SetConfig+0x11c>)
 80438ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80438f2:	bf00      	nop
 80438f4:	08043929 	.word	0x08043929
 80438f8:	08043949 	.word	0x08043949
 80438fc:	08043949 	.word	0x08043949
 8043900:	08043949 	.word	0x08043949
 8043904:	08043939 	.word	0x08043939
 8043908:	08043949 	.word	0x08043949
 804390c:	08043949 	.word	0x08043949
 8043910:	08043949 	.word	0x08043949
 8043914:	08043931 	.word	0x08043931
 8043918:	08043949 	.word	0x08043949
 804391c:	08043949 	.word	0x08043949
 8043920:	08043949 	.word	0x08043949
 8043924:	08043941 	.word	0x08043941
 8043928:	2300      	movs	r3, #0
 804392a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 804392e:	e0d8      	b.n	8043ae2 <UART_SetConfig+0x30a>
 8043930:	2302      	movs	r3, #2
 8043932:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8043936:	e0d4      	b.n	8043ae2 <UART_SetConfig+0x30a>
 8043938:	2304      	movs	r3, #4
 804393a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 804393e:	e0d0      	b.n	8043ae2 <UART_SetConfig+0x30a>
 8043940:	2308      	movs	r3, #8
 8043942:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8043946:	e0cc      	b.n	8043ae2 <UART_SetConfig+0x30a>
 8043948:	2310      	movs	r3, #16
 804394a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 804394e:	e0c8      	b.n	8043ae2 <UART_SetConfig+0x30a>
 8043950:	697b      	ldr	r3, [r7, #20]
 8043952:	681b      	ldr	r3, [r3, #0]
 8043954:	4a5e      	ldr	r2, [pc, #376]	; (8043ad0 <UART_SetConfig+0x2f8>)
 8043956:	4293      	cmp	r3, r2
 8043958:	d125      	bne.n	80439a6 <UART_SetConfig+0x1ce>
 804395a:	4b5b      	ldr	r3, [pc, #364]	; (8043ac8 <UART_SetConfig+0x2f0>)
 804395c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8043960:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8043964:	2b30      	cmp	r3, #48	; 0x30
 8043966:	d016      	beq.n	8043996 <UART_SetConfig+0x1be>
 8043968:	2b30      	cmp	r3, #48	; 0x30
 804396a:	d818      	bhi.n	804399e <UART_SetConfig+0x1c6>
 804396c:	2b20      	cmp	r3, #32
 804396e:	d00a      	beq.n	8043986 <UART_SetConfig+0x1ae>
 8043970:	2b20      	cmp	r3, #32
 8043972:	d814      	bhi.n	804399e <UART_SetConfig+0x1c6>
 8043974:	2b00      	cmp	r3, #0
 8043976:	d002      	beq.n	804397e <UART_SetConfig+0x1a6>
 8043978:	2b10      	cmp	r3, #16
 804397a:	d008      	beq.n	804398e <UART_SetConfig+0x1b6>
 804397c:	e00f      	b.n	804399e <UART_SetConfig+0x1c6>
 804397e:	2300      	movs	r3, #0
 8043980:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8043984:	e0ad      	b.n	8043ae2 <UART_SetConfig+0x30a>
 8043986:	2302      	movs	r3, #2
 8043988:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 804398c:	e0a9      	b.n	8043ae2 <UART_SetConfig+0x30a>
 804398e:	2304      	movs	r3, #4
 8043990:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8043994:	e0a5      	b.n	8043ae2 <UART_SetConfig+0x30a>
 8043996:	2308      	movs	r3, #8
 8043998:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 804399c:	e0a1      	b.n	8043ae2 <UART_SetConfig+0x30a>
 804399e:	2310      	movs	r3, #16
 80439a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80439a4:	e09d      	b.n	8043ae2 <UART_SetConfig+0x30a>
 80439a6:	697b      	ldr	r3, [r7, #20]
 80439a8:	681b      	ldr	r3, [r3, #0]
 80439aa:	4a4a      	ldr	r2, [pc, #296]	; (8043ad4 <UART_SetConfig+0x2fc>)
 80439ac:	4293      	cmp	r3, r2
 80439ae:	d125      	bne.n	80439fc <UART_SetConfig+0x224>
 80439b0:	4b45      	ldr	r3, [pc, #276]	; (8043ac8 <UART_SetConfig+0x2f0>)
 80439b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80439b6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80439ba:	2bc0      	cmp	r3, #192	; 0xc0
 80439bc:	d016      	beq.n	80439ec <UART_SetConfig+0x214>
 80439be:	2bc0      	cmp	r3, #192	; 0xc0
 80439c0:	d818      	bhi.n	80439f4 <UART_SetConfig+0x21c>
 80439c2:	2b80      	cmp	r3, #128	; 0x80
 80439c4:	d00a      	beq.n	80439dc <UART_SetConfig+0x204>
 80439c6:	2b80      	cmp	r3, #128	; 0x80
 80439c8:	d814      	bhi.n	80439f4 <UART_SetConfig+0x21c>
 80439ca:	2b00      	cmp	r3, #0
 80439cc:	d002      	beq.n	80439d4 <UART_SetConfig+0x1fc>
 80439ce:	2b40      	cmp	r3, #64	; 0x40
 80439d0:	d008      	beq.n	80439e4 <UART_SetConfig+0x20c>
 80439d2:	e00f      	b.n	80439f4 <UART_SetConfig+0x21c>
 80439d4:	2300      	movs	r3, #0
 80439d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80439da:	e082      	b.n	8043ae2 <UART_SetConfig+0x30a>
 80439dc:	2302      	movs	r3, #2
 80439de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80439e2:	e07e      	b.n	8043ae2 <UART_SetConfig+0x30a>
 80439e4:	2304      	movs	r3, #4
 80439e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80439ea:	e07a      	b.n	8043ae2 <UART_SetConfig+0x30a>
 80439ec:	2308      	movs	r3, #8
 80439ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80439f2:	e076      	b.n	8043ae2 <UART_SetConfig+0x30a>
 80439f4:	2310      	movs	r3, #16
 80439f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80439fa:	e072      	b.n	8043ae2 <UART_SetConfig+0x30a>
 80439fc:	697b      	ldr	r3, [r7, #20]
 80439fe:	681b      	ldr	r3, [r3, #0]
 8043a00:	4a35      	ldr	r2, [pc, #212]	; (8043ad8 <UART_SetConfig+0x300>)
 8043a02:	4293      	cmp	r3, r2
 8043a04:	d12a      	bne.n	8043a5c <UART_SetConfig+0x284>
 8043a06:	4b30      	ldr	r3, [pc, #192]	; (8043ac8 <UART_SetConfig+0x2f0>)
 8043a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8043a0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8043a10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8043a14:	d01a      	beq.n	8043a4c <UART_SetConfig+0x274>
 8043a16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8043a1a:	d81b      	bhi.n	8043a54 <UART_SetConfig+0x27c>
 8043a1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8043a20:	d00c      	beq.n	8043a3c <UART_SetConfig+0x264>
 8043a22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8043a26:	d815      	bhi.n	8043a54 <UART_SetConfig+0x27c>
 8043a28:	2b00      	cmp	r3, #0
 8043a2a:	d003      	beq.n	8043a34 <UART_SetConfig+0x25c>
 8043a2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8043a30:	d008      	beq.n	8043a44 <UART_SetConfig+0x26c>
 8043a32:	e00f      	b.n	8043a54 <UART_SetConfig+0x27c>
 8043a34:	2300      	movs	r3, #0
 8043a36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8043a3a:	e052      	b.n	8043ae2 <UART_SetConfig+0x30a>
 8043a3c:	2302      	movs	r3, #2
 8043a3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8043a42:	e04e      	b.n	8043ae2 <UART_SetConfig+0x30a>
 8043a44:	2304      	movs	r3, #4
 8043a46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8043a4a:	e04a      	b.n	8043ae2 <UART_SetConfig+0x30a>
 8043a4c:	2308      	movs	r3, #8
 8043a4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8043a52:	e046      	b.n	8043ae2 <UART_SetConfig+0x30a>
 8043a54:	2310      	movs	r3, #16
 8043a56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8043a5a:	e042      	b.n	8043ae2 <UART_SetConfig+0x30a>
 8043a5c:	697b      	ldr	r3, [r7, #20]
 8043a5e:	681b      	ldr	r3, [r3, #0]
 8043a60:	4a17      	ldr	r2, [pc, #92]	; (8043ac0 <UART_SetConfig+0x2e8>)
 8043a62:	4293      	cmp	r3, r2
 8043a64:	d13a      	bne.n	8043adc <UART_SetConfig+0x304>
 8043a66:	4b18      	ldr	r3, [pc, #96]	; (8043ac8 <UART_SetConfig+0x2f0>)
 8043a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8043a6c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8043a70:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8043a74:	d01a      	beq.n	8043aac <UART_SetConfig+0x2d4>
 8043a76:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8043a7a:	d81b      	bhi.n	8043ab4 <UART_SetConfig+0x2dc>
 8043a7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8043a80:	d00c      	beq.n	8043a9c <UART_SetConfig+0x2c4>
 8043a82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8043a86:	d815      	bhi.n	8043ab4 <UART_SetConfig+0x2dc>
 8043a88:	2b00      	cmp	r3, #0
 8043a8a:	d003      	beq.n	8043a94 <UART_SetConfig+0x2bc>
 8043a8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8043a90:	d008      	beq.n	8043aa4 <UART_SetConfig+0x2cc>
 8043a92:	e00f      	b.n	8043ab4 <UART_SetConfig+0x2dc>
 8043a94:	2300      	movs	r3, #0
 8043a96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8043a9a:	e022      	b.n	8043ae2 <UART_SetConfig+0x30a>
 8043a9c:	2302      	movs	r3, #2
 8043a9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8043aa2:	e01e      	b.n	8043ae2 <UART_SetConfig+0x30a>
 8043aa4:	2304      	movs	r3, #4
 8043aa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8043aaa:	e01a      	b.n	8043ae2 <UART_SetConfig+0x30a>
 8043aac:	2308      	movs	r3, #8
 8043aae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8043ab2:	e016      	b.n	8043ae2 <UART_SetConfig+0x30a>
 8043ab4:	2310      	movs	r3, #16
 8043ab6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8043aba:	e012      	b.n	8043ae2 <UART_SetConfig+0x30a>
 8043abc:	cfff69f3 	.word	0xcfff69f3
 8043ac0:	40008000 	.word	0x40008000
 8043ac4:	40013800 	.word	0x40013800
 8043ac8:	40021000 	.word	0x40021000
 8043acc:	40004400 	.word	0x40004400
 8043ad0:	40004800 	.word	0x40004800
 8043ad4:	40004c00 	.word	0x40004c00
 8043ad8:	40005000 	.word	0x40005000
 8043adc:	2310      	movs	r3, #16
 8043ade:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8043ae2:	697b      	ldr	r3, [r7, #20]
 8043ae4:	681b      	ldr	r3, [r3, #0]
 8043ae6:	4aae      	ldr	r2, [pc, #696]	; (8043da0 <UART_SetConfig+0x5c8>)
 8043ae8:	4293      	cmp	r3, r2
 8043aea:	f040 8097 	bne.w	8043c1c <UART_SetConfig+0x444>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8043aee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8043af2:	2b08      	cmp	r3, #8
 8043af4:	d823      	bhi.n	8043b3e <UART_SetConfig+0x366>
 8043af6:	a201      	add	r2, pc, #4	; (adr r2, 8043afc <UART_SetConfig+0x324>)
 8043af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8043afc:	08043b21 	.word	0x08043b21
 8043b00:	08043b3f 	.word	0x08043b3f
 8043b04:	08043b29 	.word	0x08043b29
 8043b08:	08043b3f 	.word	0x08043b3f
 8043b0c:	08043b2f 	.word	0x08043b2f
 8043b10:	08043b3f 	.word	0x08043b3f
 8043b14:	08043b3f 	.word	0x08043b3f
 8043b18:	08043b3f 	.word	0x08043b3f
 8043b1c:	08043b37 	.word	0x08043b37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8043b20:	f7fe fcf6 	bl	8042510 <HAL_RCC_GetPCLK1Freq>
 8043b24:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8043b26:	e010      	b.n	8043b4a <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8043b28:	4b9e      	ldr	r3, [pc, #632]	; (8043da4 <UART_SetConfig+0x5cc>)
 8043b2a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8043b2c:	e00d      	b.n	8043b4a <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8043b2e:	f7fe fc81 	bl	8042434 <HAL_RCC_GetSysClockFreq>
 8043b32:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8043b34:	e009      	b.n	8043b4a <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8043b36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8043b3a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8043b3c:	e005      	b.n	8043b4a <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 8043b3e:	2300      	movs	r3, #0
 8043b40:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8043b42:	2301      	movs	r3, #1
 8043b44:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8043b48:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8043b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8043b4c:	2b00      	cmp	r3, #0
 8043b4e:	f000 8130 	beq.w	8043db2 <UART_SetConfig+0x5da>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8043b52:	697b      	ldr	r3, [r7, #20]
 8043b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8043b56:	4a94      	ldr	r2, [pc, #592]	; (8043da8 <UART_SetConfig+0x5d0>)
 8043b58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8043b5c:	461a      	mov	r2, r3
 8043b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8043b60:	fbb3 f3f2 	udiv	r3, r3, r2
 8043b64:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8043b66:	697b      	ldr	r3, [r7, #20]
 8043b68:	685a      	ldr	r2, [r3, #4]
 8043b6a:	4613      	mov	r3, r2
 8043b6c:	005b      	lsls	r3, r3, #1
 8043b6e:	4413      	add	r3, r2
 8043b70:	69ba      	ldr	r2, [r7, #24]
 8043b72:	429a      	cmp	r2, r3
 8043b74:	d305      	bcc.n	8043b82 <UART_SetConfig+0x3aa>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8043b76:	697b      	ldr	r3, [r7, #20]
 8043b78:	685b      	ldr	r3, [r3, #4]
 8043b7a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8043b7c:	69ba      	ldr	r2, [r7, #24]
 8043b7e:	429a      	cmp	r2, r3
 8043b80:	d903      	bls.n	8043b8a <UART_SetConfig+0x3b2>
      {
        ret = HAL_ERROR;
 8043b82:	2301      	movs	r3, #1
 8043b84:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8043b88:	e113      	b.n	8043db2 <UART_SetConfig+0x5da>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8043b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8043b8c:	2200      	movs	r2, #0
 8043b8e:	60bb      	str	r3, [r7, #8]
 8043b90:	60fa      	str	r2, [r7, #12]
 8043b92:	697b      	ldr	r3, [r7, #20]
 8043b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8043b96:	4a84      	ldr	r2, [pc, #528]	; (8043da8 <UART_SetConfig+0x5d0>)
 8043b98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8043b9c:	b29b      	uxth	r3, r3
 8043b9e:	2200      	movs	r2, #0
 8043ba0:	603b      	str	r3, [r7, #0]
 8043ba2:	607a      	str	r2, [r7, #4]
 8043ba4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8043ba8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8043bac:	f7fc fb3c 	bl	8040228 <__aeabi_uldivmod>
 8043bb0:	4602      	mov	r2, r0
 8043bb2:	460b      	mov	r3, r1
 8043bb4:	4610      	mov	r0, r2
 8043bb6:	4619      	mov	r1, r3
 8043bb8:	f04f 0200 	mov.w	r2, #0
 8043bbc:	f04f 0300 	mov.w	r3, #0
 8043bc0:	020b      	lsls	r3, r1, #8
 8043bc2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8043bc6:	0202      	lsls	r2, r0, #8
 8043bc8:	6979      	ldr	r1, [r7, #20]
 8043bca:	6849      	ldr	r1, [r1, #4]
 8043bcc:	0849      	lsrs	r1, r1, #1
 8043bce:	2000      	movs	r0, #0
 8043bd0:	460c      	mov	r4, r1
 8043bd2:	4605      	mov	r5, r0
 8043bd4:	eb12 0804 	adds.w	r8, r2, r4
 8043bd8:	eb43 0905 	adc.w	r9, r3, r5
 8043bdc:	697b      	ldr	r3, [r7, #20]
 8043bde:	685b      	ldr	r3, [r3, #4]
 8043be0:	2200      	movs	r2, #0
 8043be2:	469a      	mov	sl, r3
 8043be4:	4693      	mov	fp, r2
 8043be6:	4652      	mov	r2, sl
 8043be8:	465b      	mov	r3, fp
 8043bea:	4640      	mov	r0, r8
 8043bec:	4649      	mov	r1, r9
 8043bee:	f7fc fb1b 	bl	8040228 <__aeabi_uldivmod>
 8043bf2:	4602      	mov	r2, r0
 8043bf4:	460b      	mov	r3, r1
 8043bf6:	4613      	mov	r3, r2
 8043bf8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8043bfa:	6a3b      	ldr	r3, [r7, #32]
 8043bfc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8043c00:	d308      	bcc.n	8043c14 <UART_SetConfig+0x43c>
 8043c02:	6a3b      	ldr	r3, [r7, #32]
 8043c04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8043c08:	d204      	bcs.n	8043c14 <UART_SetConfig+0x43c>
        {
          huart->Instance->BRR = usartdiv;
 8043c0a:	697b      	ldr	r3, [r7, #20]
 8043c0c:	681b      	ldr	r3, [r3, #0]
 8043c0e:	6a3a      	ldr	r2, [r7, #32]
 8043c10:	60da      	str	r2, [r3, #12]
 8043c12:	e0ce      	b.n	8043db2 <UART_SetConfig+0x5da>
        }
        else
        {
          ret = HAL_ERROR;
 8043c14:	2301      	movs	r3, #1
 8043c16:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8043c1a:	e0ca      	b.n	8043db2 <UART_SetConfig+0x5da>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8043c1c:	697b      	ldr	r3, [r7, #20]
 8043c1e:	69db      	ldr	r3, [r3, #28]
 8043c20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8043c24:	d167      	bne.n	8043cf6 <UART_SetConfig+0x51e>
  {
    switch (clocksource)
 8043c26:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8043c2a:	2b08      	cmp	r3, #8
 8043c2c:	d827      	bhi.n	8043c7e <UART_SetConfig+0x4a6>
 8043c2e:	a201      	add	r2, pc, #4	; (adr r2, 8043c34 <UART_SetConfig+0x45c>)
 8043c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8043c34:	08043c59 	.word	0x08043c59
 8043c38:	08043c61 	.word	0x08043c61
 8043c3c:	08043c69 	.word	0x08043c69
 8043c40:	08043c7f 	.word	0x08043c7f
 8043c44:	08043c6f 	.word	0x08043c6f
 8043c48:	08043c7f 	.word	0x08043c7f
 8043c4c:	08043c7f 	.word	0x08043c7f
 8043c50:	08043c7f 	.word	0x08043c7f
 8043c54:	08043c77 	.word	0x08043c77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8043c58:	f7fe fc5a 	bl	8042510 <HAL_RCC_GetPCLK1Freq>
 8043c5c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8043c5e:	e014      	b.n	8043c8a <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8043c60:	f7fe fc6c 	bl	804253c <HAL_RCC_GetPCLK2Freq>
 8043c64:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8043c66:	e010      	b.n	8043c8a <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8043c68:	4b4e      	ldr	r3, [pc, #312]	; (8043da4 <UART_SetConfig+0x5cc>)
 8043c6a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8043c6c:	e00d      	b.n	8043c8a <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8043c6e:	f7fe fbe1 	bl	8042434 <HAL_RCC_GetSysClockFreq>
 8043c72:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8043c74:	e009      	b.n	8043c8a <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8043c76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8043c7a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8043c7c:	e005      	b.n	8043c8a <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 8043c7e:	2300      	movs	r3, #0
 8043c80:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8043c82:	2301      	movs	r3, #1
 8043c84:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8043c88:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8043c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8043c8c:	2b00      	cmp	r3, #0
 8043c8e:	f000 8090 	beq.w	8043db2 <UART_SetConfig+0x5da>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8043c92:	697b      	ldr	r3, [r7, #20]
 8043c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8043c96:	4a44      	ldr	r2, [pc, #272]	; (8043da8 <UART_SetConfig+0x5d0>)
 8043c98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8043c9c:	461a      	mov	r2, r3
 8043c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8043ca0:	fbb3 f3f2 	udiv	r3, r3, r2
 8043ca4:	005a      	lsls	r2, r3, #1
 8043ca6:	697b      	ldr	r3, [r7, #20]
 8043ca8:	685b      	ldr	r3, [r3, #4]
 8043caa:	085b      	lsrs	r3, r3, #1
 8043cac:	441a      	add	r2, r3
 8043cae:	697b      	ldr	r3, [r7, #20]
 8043cb0:	685b      	ldr	r3, [r3, #4]
 8043cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8043cb6:	b29b      	uxth	r3, r3
 8043cb8:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8043cba:	6a3b      	ldr	r3, [r7, #32]
 8043cbc:	2b0f      	cmp	r3, #15
 8043cbe:	d916      	bls.n	8043cee <UART_SetConfig+0x516>
 8043cc0:	6a3b      	ldr	r3, [r7, #32]
 8043cc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8043cc6:	d212      	bcs.n	8043cee <UART_SetConfig+0x516>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8043cc8:	6a3b      	ldr	r3, [r7, #32]
 8043cca:	b29b      	uxth	r3, r3
 8043ccc:	f023 030f 	bic.w	r3, r3, #15
 8043cd0:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8043cd2:	6a3b      	ldr	r3, [r7, #32]
 8043cd4:	085b      	lsrs	r3, r3, #1
 8043cd6:	b29b      	uxth	r3, r3
 8043cd8:	f003 0307 	and.w	r3, r3, #7
 8043cdc:	b29a      	uxth	r2, r3
 8043cde:	8bfb      	ldrh	r3, [r7, #30]
 8043ce0:	4313      	orrs	r3, r2
 8043ce2:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8043ce4:	697b      	ldr	r3, [r7, #20]
 8043ce6:	681b      	ldr	r3, [r3, #0]
 8043ce8:	8bfa      	ldrh	r2, [r7, #30]
 8043cea:	60da      	str	r2, [r3, #12]
 8043cec:	e061      	b.n	8043db2 <UART_SetConfig+0x5da>
      }
      else
      {
        ret = HAL_ERROR;
 8043cee:	2301      	movs	r3, #1
 8043cf0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8043cf4:	e05d      	b.n	8043db2 <UART_SetConfig+0x5da>
      }
    }
  }
  else
  {
    switch (clocksource)
 8043cf6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8043cfa:	2b08      	cmp	r3, #8
 8043cfc:	d827      	bhi.n	8043d4e <UART_SetConfig+0x576>
 8043cfe:	a201      	add	r2, pc, #4	; (adr r2, 8043d04 <UART_SetConfig+0x52c>)
 8043d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8043d04:	08043d29 	.word	0x08043d29
 8043d08:	08043d31 	.word	0x08043d31
 8043d0c:	08043d39 	.word	0x08043d39
 8043d10:	08043d4f 	.word	0x08043d4f
 8043d14:	08043d3f 	.word	0x08043d3f
 8043d18:	08043d4f 	.word	0x08043d4f
 8043d1c:	08043d4f 	.word	0x08043d4f
 8043d20:	08043d4f 	.word	0x08043d4f
 8043d24:	08043d47 	.word	0x08043d47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8043d28:	f7fe fbf2 	bl	8042510 <HAL_RCC_GetPCLK1Freq>
 8043d2c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8043d2e:	e014      	b.n	8043d5a <UART_SetConfig+0x582>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8043d30:	f7fe fc04 	bl	804253c <HAL_RCC_GetPCLK2Freq>
 8043d34:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8043d36:	e010      	b.n	8043d5a <UART_SetConfig+0x582>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8043d38:	4b1a      	ldr	r3, [pc, #104]	; (8043da4 <UART_SetConfig+0x5cc>)
 8043d3a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8043d3c:	e00d      	b.n	8043d5a <UART_SetConfig+0x582>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8043d3e:	f7fe fb79 	bl	8042434 <HAL_RCC_GetSysClockFreq>
 8043d42:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8043d44:	e009      	b.n	8043d5a <UART_SetConfig+0x582>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8043d46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8043d4a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8043d4c:	e005      	b.n	8043d5a <UART_SetConfig+0x582>
      default:
        pclk = 0U;
 8043d4e:	2300      	movs	r3, #0
 8043d50:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8043d52:	2301      	movs	r3, #1
 8043d54:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8043d58:	bf00      	nop
    }

    if (pclk != 0U)
 8043d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8043d5c:	2b00      	cmp	r3, #0
 8043d5e:	d028      	beq.n	8043db2 <UART_SetConfig+0x5da>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8043d60:	697b      	ldr	r3, [r7, #20]
 8043d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8043d64:	4a10      	ldr	r2, [pc, #64]	; (8043da8 <UART_SetConfig+0x5d0>)
 8043d66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8043d6a:	461a      	mov	r2, r3
 8043d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8043d6e:	fbb3 f2f2 	udiv	r2, r3, r2
 8043d72:	697b      	ldr	r3, [r7, #20]
 8043d74:	685b      	ldr	r3, [r3, #4]
 8043d76:	085b      	lsrs	r3, r3, #1
 8043d78:	441a      	add	r2, r3
 8043d7a:	697b      	ldr	r3, [r7, #20]
 8043d7c:	685b      	ldr	r3, [r3, #4]
 8043d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8043d82:	b29b      	uxth	r3, r3
 8043d84:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8043d86:	6a3b      	ldr	r3, [r7, #32]
 8043d88:	2b0f      	cmp	r3, #15
 8043d8a:	d90f      	bls.n	8043dac <UART_SetConfig+0x5d4>
 8043d8c:	6a3b      	ldr	r3, [r7, #32]
 8043d8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8043d92:	d20b      	bcs.n	8043dac <UART_SetConfig+0x5d4>
      {
        huart->Instance->BRR = usartdiv;
 8043d94:	697b      	ldr	r3, [r7, #20]
 8043d96:	681b      	ldr	r3, [r3, #0]
 8043d98:	6a3a      	ldr	r2, [r7, #32]
 8043d9a:	60da      	str	r2, [r3, #12]
 8043d9c:	e009      	b.n	8043db2 <UART_SetConfig+0x5da>
 8043d9e:	bf00      	nop
 8043da0:	40008000 	.word	0x40008000
 8043da4:	00f42400 	.word	0x00f42400
 8043da8:	08044acc 	.word	0x08044acc
      }
      else
      {
        ret = HAL_ERROR;
 8043dac:	2301      	movs	r3, #1
 8043dae:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8043db2:	697b      	ldr	r3, [r7, #20]
 8043db4:	2201      	movs	r2, #1
 8043db6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8043dba:	697b      	ldr	r3, [r7, #20]
 8043dbc:	2201      	movs	r2, #1
 8043dbe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8043dc2:	697b      	ldr	r3, [r7, #20]
 8043dc4:	2200      	movs	r2, #0
 8043dc6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8043dc8:	697b      	ldr	r3, [r7, #20]
 8043dca:	2200      	movs	r2, #0
 8043dcc:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8043dce:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8043dd2:	4618      	mov	r0, r3
 8043dd4:	3730      	adds	r7, #48	; 0x30
 8043dd6:	46bd      	mov	sp, r7
 8043dd8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08043ddc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8043ddc:	b480      	push	{r7}
 8043dde:	b083      	sub	sp, #12
 8043de0:	af00      	add	r7, sp, #0
 8043de2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8043de4:	687b      	ldr	r3, [r7, #4]
 8043de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8043de8:	f003 0301 	and.w	r3, r3, #1
 8043dec:	2b00      	cmp	r3, #0
 8043dee:	d00a      	beq.n	8043e06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8043df0:	687b      	ldr	r3, [r7, #4]
 8043df2:	681b      	ldr	r3, [r3, #0]
 8043df4:	685b      	ldr	r3, [r3, #4]
 8043df6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8043dfa:	687b      	ldr	r3, [r7, #4]
 8043dfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8043dfe:	687b      	ldr	r3, [r7, #4]
 8043e00:	681b      	ldr	r3, [r3, #0]
 8043e02:	430a      	orrs	r2, r1
 8043e04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8043e06:	687b      	ldr	r3, [r7, #4]
 8043e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8043e0a:	f003 0302 	and.w	r3, r3, #2
 8043e0e:	2b00      	cmp	r3, #0
 8043e10:	d00a      	beq.n	8043e28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8043e12:	687b      	ldr	r3, [r7, #4]
 8043e14:	681b      	ldr	r3, [r3, #0]
 8043e16:	685b      	ldr	r3, [r3, #4]
 8043e18:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8043e1c:	687b      	ldr	r3, [r7, #4]
 8043e1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8043e20:	687b      	ldr	r3, [r7, #4]
 8043e22:	681b      	ldr	r3, [r3, #0]
 8043e24:	430a      	orrs	r2, r1
 8043e26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8043e28:	687b      	ldr	r3, [r7, #4]
 8043e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8043e2c:	f003 0304 	and.w	r3, r3, #4
 8043e30:	2b00      	cmp	r3, #0
 8043e32:	d00a      	beq.n	8043e4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8043e34:	687b      	ldr	r3, [r7, #4]
 8043e36:	681b      	ldr	r3, [r3, #0]
 8043e38:	685b      	ldr	r3, [r3, #4]
 8043e3a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8043e3e:	687b      	ldr	r3, [r7, #4]
 8043e40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8043e42:	687b      	ldr	r3, [r7, #4]
 8043e44:	681b      	ldr	r3, [r3, #0]
 8043e46:	430a      	orrs	r2, r1
 8043e48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8043e4a:	687b      	ldr	r3, [r7, #4]
 8043e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8043e4e:	f003 0308 	and.w	r3, r3, #8
 8043e52:	2b00      	cmp	r3, #0
 8043e54:	d00a      	beq.n	8043e6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8043e56:	687b      	ldr	r3, [r7, #4]
 8043e58:	681b      	ldr	r3, [r3, #0]
 8043e5a:	685b      	ldr	r3, [r3, #4]
 8043e5c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8043e60:	687b      	ldr	r3, [r7, #4]
 8043e62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8043e64:	687b      	ldr	r3, [r7, #4]
 8043e66:	681b      	ldr	r3, [r3, #0]
 8043e68:	430a      	orrs	r2, r1
 8043e6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8043e6c:	687b      	ldr	r3, [r7, #4]
 8043e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8043e70:	f003 0310 	and.w	r3, r3, #16
 8043e74:	2b00      	cmp	r3, #0
 8043e76:	d00a      	beq.n	8043e8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8043e78:	687b      	ldr	r3, [r7, #4]
 8043e7a:	681b      	ldr	r3, [r3, #0]
 8043e7c:	689b      	ldr	r3, [r3, #8]
 8043e7e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8043e82:	687b      	ldr	r3, [r7, #4]
 8043e84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8043e86:	687b      	ldr	r3, [r7, #4]
 8043e88:	681b      	ldr	r3, [r3, #0]
 8043e8a:	430a      	orrs	r2, r1
 8043e8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8043e8e:	687b      	ldr	r3, [r7, #4]
 8043e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8043e92:	f003 0320 	and.w	r3, r3, #32
 8043e96:	2b00      	cmp	r3, #0
 8043e98:	d00a      	beq.n	8043eb0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8043e9a:	687b      	ldr	r3, [r7, #4]
 8043e9c:	681b      	ldr	r3, [r3, #0]
 8043e9e:	689b      	ldr	r3, [r3, #8]
 8043ea0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8043ea4:	687b      	ldr	r3, [r7, #4]
 8043ea6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8043ea8:	687b      	ldr	r3, [r7, #4]
 8043eaa:	681b      	ldr	r3, [r3, #0]
 8043eac:	430a      	orrs	r2, r1
 8043eae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8043eb0:	687b      	ldr	r3, [r7, #4]
 8043eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8043eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8043eb8:	2b00      	cmp	r3, #0
 8043eba:	d01a      	beq.n	8043ef2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8043ebc:	687b      	ldr	r3, [r7, #4]
 8043ebe:	681b      	ldr	r3, [r3, #0]
 8043ec0:	685b      	ldr	r3, [r3, #4]
 8043ec2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8043ec6:	687b      	ldr	r3, [r7, #4]
 8043ec8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8043eca:	687b      	ldr	r3, [r7, #4]
 8043ecc:	681b      	ldr	r3, [r3, #0]
 8043ece:	430a      	orrs	r2, r1
 8043ed0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8043ed2:	687b      	ldr	r3, [r7, #4]
 8043ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8043ed6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8043eda:	d10a      	bne.n	8043ef2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8043edc:	687b      	ldr	r3, [r7, #4]
 8043ede:	681b      	ldr	r3, [r3, #0]
 8043ee0:	685b      	ldr	r3, [r3, #4]
 8043ee2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8043ee6:	687b      	ldr	r3, [r7, #4]
 8043ee8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8043eea:	687b      	ldr	r3, [r7, #4]
 8043eec:	681b      	ldr	r3, [r3, #0]
 8043eee:	430a      	orrs	r2, r1
 8043ef0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8043ef2:	687b      	ldr	r3, [r7, #4]
 8043ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8043ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8043efa:	2b00      	cmp	r3, #0
 8043efc:	d00a      	beq.n	8043f14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8043efe:	687b      	ldr	r3, [r7, #4]
 8043f00:	681b      	ldr	r3, [r3, #0]
 8043f02:	685b      	ldr	r3, [r3, #4]
 8043f04:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8043f08:	687b      	ldr	r3, [r7, #4]
 8043f0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8043f0c:	687b      	ldr	r3, [r7, #4]
 8043f0e:	681b      	ldr	r3, [r3, #0]
 8043f10:	430a      	orrs	r2, r1
 8043f12:	605a      	str	r2, [r3, #4]
  }
}
 8043f14:	bf00      	nop
 8043f16:	370c      	adds	r7, #12
 8043f18:	46bd      	mov	sp, r7
 8043f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043f1e:	4770      	bx	lr

08043f20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8043f20:	b580      	push	{r7, lr}
 8043f22:	b086      	sub	sp, #24
 8043f24:	af02      	add	r7, sp, #8
 8043f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8043f28:	687b      	ldr	r3, [r7, #4]
 8043f2a:	2200      	movs	r2, #0
 8043f2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8043f30:	f7fc ff7a 	bl	8040e28 <HAL_GetTick>
 8043f34:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8043f36:	687b      	ldr	r3, [r7, #4]
 8043f38:	681b      	ldr	r3, [r3, #0]
 8043f3a:	681b      	ldr	r3, [r3, #0]
 8043f3c:	f003 0308 	and.w	r3, r3, #8
 8043f40:	2b08      	cmp	r3, #8
 8043f42:	d10e      	bne.n	8043f62 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8043f44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8043f48:	9300      	str	r3, [sp, #0]
 8043f4a:	68fb      	ldr	r3, [r7, #12]
 8043f4c:	2200      	movs	r2, #0
 8043f4e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8043f52:	6878      	ldr	r0, [r7, #4]
 8043f54:	f000 f82c 	bl	8043fb0 <UART_WaitOnFlagUntilTimeout>
 8043f58:	4603      	mov	r3, r0
 8043f5a:	2b00      	cmp	r3, #0
 8043f5c:	d001      	beq.n	8043f62 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8043f5e:	2303      	movs	r3, #3
 8043f60:	e022      	b.n	8043fa8 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8043f62:	687b      	ldr	r3, [r7, #4]
 8043f64:	681b      	ldr	r3, [r3, #0]
 8043f66:	681b      	ldr	r3, [r3, #0]
 8043f68:	f003 0304 	and.w	r3, r3, #4
 8043f6c:	2b04      	cmp	r3, #4
 8043f6e:	d10e      	bne.n	8043f8e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8043f70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8043f74:	9300      	str	r3, [sp, #0]
 8043f76:	68fb      	ldr	r3, [r7, #12]
 8043f78:	2200      	movs	r2, #0
 8043f7a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8043f7e:	6878      	ldr	r0, [r7, #4]
 8043f80:	f000 f816 	bl	8043fb0 <UART_WaitOnFlagUntilTimeout>
 8043f84:	4603      	mov	r3, r0
 8043f86:	2b00      	cmp	r3, #0
 8043f88:	d001      	beq.n	8043f8e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8043f8a:	2303      	movs	r3, #3
 8043f8c:	e00c      	b.n	8043fa8 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8043f8e:	687b      	ldr	r3, [r7, #4]
 8043f90:	2220      	movs	r2, #32
 8043f92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8043f96:	687b      	ldr	r3, [r7, #4]
 8043f98:	2220      	movs	r2, #32
 8043f9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8043f9e:	687b      	ldr	r3, [r7, #4]
 8043fa0:	2200      	movs	r2, #0
 8043fa2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8043fa6:	2300      	movs	r3, #0
}
 8043fa8:	4618      	mov	r0, r3
 8043faa:	3710      	adds	r7, #16
 8043fac:	46bd      	mov	sp, r7
 8043fae:	bd80      	pop	{r7, pc}

08043fb0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8043fb0:	b580      	push	{r7, lr}
 8043fb2:	b084      	sub	sp, #16
 8043fb4:	af00      	add	r7, sp, #0
 8043fb6:	60f8      	str	r0, [r7, #12]
 8043fb8:	60b9      	str	r1, [r7, #8]
 8043fba:	603b      	str	r3, [r7, #0]
 8043fbc:	4613      	mov	r3, r2
 8043fbe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8043fc0:	e062      	b.n	8044088 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8043fc2:	69bb      	ldr	r3, [r7, #24]
 8043fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8043fc8:	d05e      	beq.n	8044088 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8043fca:	f7fc ff2d 	bl	8040e28 <HAL_GetTick>
 8043fce:	4602      	mov	r2, r0
 8043fd0:	683b      	ldr	r3, [r7, #0]
 8043fd2:	1ad3      	subs	r3, r2, r3
 8043fd4:	69ba      	ldr	r2, [r7, #24]
 8043fd6:	429a      	cmp	r2, r3
 8043fd8:	d302      	bcc.n	8043fe0 <UART_WaitOnFlagUntilTimeout+0x30>
 8043fda:	69bb      	ldr	r3, [r7, #24]
 8043fdc:	2b00      	cmp	r3, #0
 8043fde:	d11d      	bne.n	804401c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8043fe0:	68fb      	ldr	r3, [r7, #12]
 8043fe2:	681b      	ldr	r3, [r3, #0]
 8043fe4:	681a      	ldr	r2, [r3, #0]
 8043fe6:	68fb      	ldr	r3, [r7, #12]
 8043fe8:	681b      	ldr	r3, [r3, #0]
 8043fea:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8043fee:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8043ff0:	68fb      	ldr	r3, [r7, #12]
 8043ff2:	681b      	ldr	r3, [r3, #0]
 8043ff4:	689a      	ldr	r2, [r3, #8]
 8043ff6:	68fb      	ldr	r3, [r7, #12]
 8043ff8:	681b      	ldr	r3, [r3, #0]
 8043ffa:	f022 0201 	bic.w	r2, r2, #1
 8043ffe:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8044000:	68fb      	ldr	r3, [r7, #12]
 8044002:	2220      	movs	r2, #32
 8044004:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8044008:	68fb      	ldr	r3, [r7, #12]
 804400a:	2220      	movs	r2, #32
 804400c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8044010:	68fb      	ldr	r3, [r7, #12]
 8044012:	2200      	movs	r2, #0
 8044014:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8044018:	2303      	movs	r3, #3
 804401a:	e045      	b.n	80440a8 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 804401c:	68fb      	ldr	r3, [r7, #12]
 804401e:	681b      	ldr	r3, [r3, #0]
 8044020:	681b      	ldr	r3, [r3, #0]
 8044022:	f003 0304 	and.w	r3, r3, #4
 8044026:	2b00      	cmp	r3, #0
 8044028:	d02e      	beq.n	8044088 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 804402a:	68fb      	ldr	r3, [r7, #12]
 804402c:	681b      	ldr	r3, [r3, #0]
 804402e:	69db      	ldr	r3, [r3, #28]
 8044030:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8044034:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8044038:	d126      	bne.n	8044088 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 804403a:	68fb      	ldr	r3, [r7, #12]
 804403c:	681b      	ldr	r3, [r3, #0]
 804403e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8044042:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8044044:	68fb      	ldr	r3, [r7, #12]
 8044046:	681b      	ldr	r3, [r3, #0]
 8044048:	681a      	ldr	r2, [r3, #0]
 804404a:	68fb      	ldr	r3, [r7, #12]
 804404c:	681b      	ldr	r3, [r3, #0]
 804404e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8044052:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8044054:	68fb      	ldr	r3, [r7, #12]
 8044056:	681b      	ldr	r3, [r3, #0]
 8044058:	689a      	ldr	r2, [r3, #8]
 804405a:	68fb      	ldr	r3, [r7, #12]
 804405c:	681b      	ldr	r3, [r3, #0]
 804405e:	f022 0201 	bic.w	r2, r2, #1
 8044062:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8044064:	68fb      	ldr	r3, [r7, #12]
 8044066:	2220      	movs	r2, #32
 8044068:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 804406c:	68fb      	ldr	r3, [r7, #12]
 804406e:	2220      	movs	r2, #32
 8044070:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8044074:	68fb      	ldr	r3, [r7, #12]
 8044076:	2220      	movs	r2, #32
 8044078:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 804407c:	68fb      	ldr	r3, [r7, #12]
 804407e:	2200      	movs	r2, #0
 8044080:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8044084:	2303      	movs	r3, #3
 8044086:	e00f      	b.n	80440a8 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8044088:	68fb      	ldr	r3, [r7, #12]
 804408a:	681b      	ldr	r3, [r3, #0]
 804408c:	69da      	ldr	r2, [r3, #28]
 804408e:	68bb      	ldr	r3, [r7, #8]
 8044090:	4013      	ands	r3, r2
 8044092:	68ba      	ldr	r2, [r7, #8]
 8044094:	429a      	cmp	r2, r3
 8044096:	bf0c      	ite	eq
 8044098:	2301      	moveq	r3, #1
 804409a:	2300      	movne	r3, #0
 804409c:	b2db      	uxtb	r3, r3
 804409e:	461a      	mov	r2, r3
 80440a0:	79fb      	ldrb	r3, [r7, #7]
 80440a2:	429a      	cmp	r2, r3
 80440a4:	d08d      	beq.n	8043fc2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80440a6:	2300      	movs	r3, #0
}
 80440a8:	4618      	mov	r0, r3
 80440aa:	3710      	adds	r7, #16
 80440ac:	46bd      	mov	sp, r7
 80440ae:	bd80      	pop	{r7, pc}

080440b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80440b0:	b480      	push	{r7}
 80440b2:	b083      	sub	sp, #12
 80440b4:	af00      	add	r7, sp, #0
 80440b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80440b8:	687b      	ldr	r3, [r7, #4]
 80440ba:	681b      	ldr	r3, [r3, #0]
 80440bc:	681a      	ldr	r2, [r3, #0]
 80440be:	687b      	ldr	r3, [r7, #4]
 80440c0:	681b      	ldr	r3, [r3, #0]
 80440c2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80440c6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80440c8:	687b      	ldr	r3, [r7, #4]
 80440ca:	681b      	ldr	r3, [r3, #0]
 80440cc:	689b      	ldr	r3, [r3, #8]
 80440ce:	687a      	ldr	r2, [r7, #4]
 80440d0:	6812      	ldr	r2, [r2, #0]
 80440d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80440d6:	f023 0301 	bic.w	r3, r3, #1
 80440da:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80440dc:	687b      	ldr	r3, [r7, #4]
 80440de:	2220      	movs	r2, #32
 80440e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80440e4:	687b      	ldr	r3, [r7, #4]
 80440e6:	2200      	movs	r2, #0
 80440e8:	66da      	str	r2, [r3, #108]	; 0x6c
}
 80440ea:	bf00      	nop
 80440ec:	370c      	adds	r7, #12
 80440ee:	46bd      	mov	sp, r7
 80440f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80440f4:	4770      	bx	lr

080440f6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80440f6:	b580      	push	{r7, lr}
 80440f8:	b084      	sub	sp, #16
 80440fa:	af00      	add	r7, sp, #0
 80440fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80440fe:	687b      	ldr	r3, [r7, #4]
 8044100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8044102:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8044104:	68fb      	ldr	r3, [r7, #12]
 8044106:	2200      	movs	r2, #0
 8044108:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 804410c:	68fb      	ldr	r3, [r7, #12]
 804410e:	2200      	movs	r2, #0
 8044110:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8044114:	68f8      	ldr	r0, [r7, #12]
 8044116:	f7ff fb55 	bl	80437c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 804411a:	bf00      	nop
 804411c:	3710      	adds	r7, #16
 804411e:	46bd      	mov	sp, r7
 8044120:	bd80      	pop	{r7, pc}

08044122 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8044122:	b480      	push	{r7}
 8044124:	b083      	sub	sp, #12
 8044126:	af00      	add	r7, sp, #0
 8044128:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 804412a:	687b      	ldr	r3, [r7, #4]
 804412c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8044130:	2b21      	cmp	r3, #33	; 0x21
 8044132:	d12a      	bne.n	804418a <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 8044134:	687b      	ldr	r3, [r7, #4]
 8044136:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 804413a:	b29b      	uxth	r3, r3
 804413c:	2b00      	cmp	r3, #0
 804413e:	d110      	bne.n	8044162 <UART_TxISR_8BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8044140:	687b      	ldr	r3, [r7, #4]
 8044142:	681b      	ldr	r3, [r3, #0]
 8044144:	681a      	ldr	r2, [r3, #0]
 8044146:	687b      	ldr	r3, [r7, #4]
 8044148:	681b      	ldr	r3, [r3, #0]
 804414a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 804414e:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8044150:	687b      	ldr	r3, [r7, #4]
 8044152:	681b      	ldr	r3, [r3, #0]
 8044154:	681a      	ldr	r2, [r3, #0]
 8044156:	687b      	ldr	r3, [r7, #4]
 8044158:	681b      	ldr	r3, [r3, #0]
 804415a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 804415e:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8044160:	e013      	b.n	804418a <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8044162:	687b      	ldr	r3, [r7, #4]
 8044164:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8044166:	781a      	ldrb	r2, [r3, #0]
 8044168:	687b      	ldr	r3, [r7, #4]
 804416a:	681b      	ldr	r3, [r3, #0]
 804416c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 804416e:	687b      	ldr	r3, [r7, #4]
 8044170:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8044172:	1c5a      	adds	r2, r3, #1
 8044174:	687b      	ldr	r3, [r7, #4]
 8044176:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8044178:	687b      	ldr	r3, [r7, #4]
 804417a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 804417e:	b29b      	uxth	r3, r3
 8044180:	3b01      	subs	r3, #1
 8044182:	b29a      	uxth	r2, r3
 8044184:	687b      	ldr	r3, [r7, #4]
 8044186:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 804418a:	bf00      	nop
 804418c:	370c      	adds	r7, #12
 804418e:	46bd      	mov	sp, r7
 8044190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044194:	4770      	bx	lr

08044196 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8044196:	b480      	push	{r7}
 8044198:	b085      	sub	sp, #20
 804419a:	af00      	add	r7, sp, #0
 804419c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 804419e:	687b      	ldr	r3, [r7, #4]
 80441a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80441a4:	2b21      	cmp	r3, #33	; 0x21
 80441a6:	d12f      	bne.n	8044208 <UART_TxISR_16BIT+0x72>
  {
    if (huart->TxXferCount == 0U)
 80441a8:	687b      	ldr	r3, [r7, #4]
 80441aa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80441ae:	b29b      	uxth	r3, r3
 80441b0:	2b00      	cmp	r3, #0
 80441b2:	d110      	bne.n	80441d6 <UART_TxISR_16BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80441b4:	687b      	ldr	r3, [r7, #4]
 80441b6:	681b      	ldr	r3, [r3, #0]
 80441b8:	681a      	ldr	r2, [r3, #0]
 80441ba:	687b      	ldr	r3, [r7, #4]
 80441bc:	681b      	ldr	r3, [r3, #0]
 80441be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80441c2:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80441c4:	687b      	ldr	r3, [r7, #4]
 80441c6:	681b      	ldr	r3, [r3, #0]
 80441c8:	681a      	ldr	r2, [r3, #0]
 80441ca:	687b      	ldr	r3, [r7, #4]
 80441cc:	681b      	ldr	r3, [r3, #0]
 80441ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80441d2:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80441d4:	e018      	b.n	8044208 <UART_TxISR_16BIT+0x72>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80441d6:	687b      	ldr	r3, [r7, #4]
 80441d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80441da:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80441dc:	68fb      	ldr	r3, [r7, #12]
 80441de:	881b      	ldrh	r3, [r3, #0]
 80441e0:	461a      	mov	r2, r3
 80441e2:	687b      	ldr	r3, [r7, #4]
 80441e4:	681b      	ldr	r3, [r3, #0]
 80441e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80441ea:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80441ec:	687b      	ldr	r3, [r7, #4]
 80441ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80441f0:	1c9a      	adds	r2, r3, #2
 80441f2:	687b      	ldr	r3, [r7, #4]
 80441f4:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80441f6:	687b      	ldr	r3, [r7, #4]
 80441f8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80441fc:	b29b      	uxth	r3, r3
 80441fe:	3b01      	subs	r3, #1
 8044200:	b29a      	uxth	r2, r3
 8044202:	687b      	ldr	r3, [r7, #4]
 8044204:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8044208:	bf00      	nop
 804420a:	3714      	adds	r7, #20
 804420c:	46bd      	mov	sp, r7
 804420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044212:	4770      	bx	lr

08044214 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8044214:	b480      	push	{r7}
 8044216:	b085      	sub	sp, #20
 8044218:	af00      	add	r7, sp, #0
 804421a:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 804421c:	687b      	ldr	r3, [r7, #4]
 804421e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8044222:	2b21      	cmp	r3, #33	; 0x21
 8044224:	d13d      	bne.n	80442a2 <UART_TxISR_8BIT_FIFOEN+0x8e>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8044226:	687b      	ldr	r3, [r7, #4]
 8044228:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 804422c:	81fb      	strh	r3, [r7, #14]
 804422e:	e035      	b.n	804429c <UART_TxISR_8BIT_FIFOEN+0x88>
    {
      if (huart->TxXferCount == 0U)
 8044230:	687b      	ldr	r3, [r7, #4]
 8044232:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8044236:	b29b      	uxth	r3, r3
 8044238:	2b00      	cmp	r3, #0
 804423a:	d111      	bne.n	8044260 <UART_TxISR_8BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 804423c:	687b      	ldr	r3, [r7, #4]
 804423e:	681b      	ldr	r3, [r3, #0]
 8044240:	689a      	ldr	r2, [r3, #8]
 8044242:	687b      	ldr	r3, [r7, #4]
 8044244:	681b      	ldr	r3, [r3, #0]
 8044246:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 804424a:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 804424c:	687b      	ldr	r3, [r7, #4]
 804424e:	681b      	ldr	r3, [r3, #0]
 8044250:	681a      	ldr	r2, [r3, #0]
 8044252:	687b      	ldr	r3, [r7, #4]
 8044254:	681b      	ldr	r3, [r3, #0]
 8044256:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 804425a:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 804425c:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 804425e:	e020      	b.n	80442a2 <UART_TxISR_8BIT_FIFOEN+0x8e>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8044260:	687b      	ldr	r3, [r7, #4]
 8044262:	681b      	ldr	r3, [r3, #0]
 8044264:	69db      	ldr	r3, [r3, #28]
 8044266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 804426a:	2b00      	cmp	r3, #0
 804426c:	d013      	beq.n	8044296 <UART_TxISR_8BIT_FIFOEN+0x82>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 804426e:	687b      	ldr	r3, [r7, #4]
 8044270:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8044272:	781a      	ldrb	r2, [r3, #0]
 8044274:	687b      	ldr	r3, [r7, #4]
 8044276:	681b      	ldr	r3, [r3, #0]
 8044278:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 804427a:	687b      	ldr	r3, [r7, #4]
 804427c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 804427e:	1c5a      	adds	r2, r3, #1
 8044280:	687b      	ldr	r3, [r7, #4]
 8044282:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8044284:	687b      	ldr	r3, [r7, #4]
 8044286:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 804428a:	b29b      	uxth	r3, r3
 804428c:	3b01      	subs	r3, #1
 804428e:	b29a      	uxth	r2, r3
 8044290:	687b      	ldr	r3, [r7, #4]
 8044292:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8044296:	89fb      	ldrh	r3, [r7, #14]
 8044298:	3b01      	subs	r3, #1
 804429a:	81fb      	strh	r3, [r7, #14]
 804429c:	89fb      	ldrh	r3, [r7, #14]
 804429e:	2b00      	cmp	r3, #0
 80442a0:	d1c6      	bne.n	8044230 <UART_TxISR_8BIT_FIFOEN+0x1c>
}
 80442a2:	bf00      	nop
 80442a4:	3714      	adds	r7, #20
 80442a6:	46bd      	mov	sp, r7
 80442a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80442ac:	4770      	bx	lr

080442ae <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80442ae:	b480      	push	{r7}
 80442b0:	b085      	sub	sp, #20
 80442b2:	af00      	add	r7, sp, #0
 80442b4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80442b6:	687b      	ldr	r3, [r7, #4]
 80442b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80442bc:	2b21      	cmp	r3, #33	; 0x21
 80442be:	d142      	bne.n	8044346 <UART_TxISR_16BIT_FIFOEN+0x98>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80442c0:	687b      	ldr	r3, [r7, #4]
 80442c2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80442c6:	81fb      	strh	r3, [r7, #14]
 80442c8:	e03a      	b.n	8044340 <UART_TxISR_16BIT_FIFOEN+0x92>
    {
      if (huart->TxXferCount == 0U)
 80442ca:	687b      	ldr	r3, [r7, #4]
 80442cc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80442d0:	b29b      	uxth	r3, r3
 80442d2:	2b00      	cmp	r3, #0
 80442d4:	d111      	bne.n	80442fa <UART_TxISR_16BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80442d6:	687b      	ldr	r3, [r7, #4]
 80442d8:	681b      	ldr	r3, [r3, #0]
 80442da:	689a      	ldr	r2, [r3, #8]
 80442dc:	687b      	ldr	r3, [r7, #4]
 80442de:	681b      	ldr	r3, [r3, #0]
 80442e0:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80442e4:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80442e6:	687b      	ldr	r3, [r7, #4]
 80442e8:	681b      	ldr	r3, [r3, #0]
 80442ea:	681a      	ldr	r2, [r3, #0]
 80442ec:	687b      	ldr	r3, [r7, #4]
 80442ee:	681b      	ldr	r3, [r3, #0]
 80442f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80442f4:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 80442f6:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 80442f8:	e025      	b.n	8044346 <UART_TxISR_16BIT_FIFOEN+0x98>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80442fa:	687b      	ldr	r3, [r7, #4]
 80442fc:	681b      	ldr	r3, [r3, #0]
 80442fe:	69db      	ldr	r3, [r3, #28]
 8044300:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8044304:	2b00      	cmp	r3, #0
 8044306:	d018      	beq.n	804433a <UART_TxISR_16BIT_FIFOEN+0x8c>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 8044308:	687b      	ldr	r3, [r7, #4]
 804430a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 804430c:	60bb      	str	r3, [r7, #8]
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 804430e:	68bb      	ldr	r3, [r7, #8]
 8044310:	881b      	ldrh	r3, [r3, #0]
 8044312:	461a      	mov	r2, r3
 8044314:	687b      	ldr	r3, [r7, #4]
 8044316:	681b      	ldr	r3, [r3, #0]
 8044318:	f3c2 0208 	ubfx	r2, r2, #0, #9
 804431c:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 804431e:	687b      	ldr	r3, [r7, #4]
 8044320:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8044322:	1c9a      	adds	r2, r3, #2
 8044324:	687b      	ldr	r3, [r7, #4]
 8044326:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8044328:	687b      	ldr	r3, [r7, #4]
 804432a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 804432e:	b29b      	uxth	r3, r3
 8044330:	3b01      	subs	r3, #1
 8044332:	b29a      	uxth	r2, r3
 8044334:	687b      	ldr	r3, [r7, #4]
 8044336:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 804433a:	89fb      	ldrh	r3, [r7, #14]
 804433c:	3b01      	subs	r3, #1
 804433e:	81fb      	strh	r3, [r7, #14]
 8044340:	89fb      	ldrh	r3, [r7, #14]
 8044342:	2b00      	cmp	r3, #0
 8044344:	d1c1      	bne.n	80442ca <UART_TxISR_16BIT_FIFOEN+0x1c>
}
 8044346:	bf00      	nop
 8044348:	3714      	adds	r7, #20
 804434a:	46bd      	mov	sp, r7
 804434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044350:	4770      	bx	lr

08044352 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8044352:	b580      	push	{r7, lr}
 8044354:	b082      	sub	sp, #8
 8044356:	af00      	add	r7, sp, #0
 8044358:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 804435a:	687b      	ldr	r3, [r7, #4]
 804435c:	681b      	ldr	r3, [r3, #0]
 804435e:	681a      	ldr	r2, [r3, #0]
 8044360:	687b      	ldr	r3, [r7, #4]
 8044362:	681b      	ldr	r3, [r3, #0]
 8044364:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8044368:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 804436a:	687b      	ldr	r3, [r7, #4]
 804436c:	2220      	movs	r2, #32
 804436e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8044372:	687b      	ldr	r3, [r7, #4]
 8044374:	2200      	movs	r2, #0
 8044376:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8044378:	6878      	ldr	r0, [r7, #4]
 804437a:	f7ff fa19 	bl	80437b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 804437e:	bf00      	nop
 8044380:	3708      	adds	r7, #8
 8044382:	46bd      	mov	sp, r7
 8044384:	bd80      	pop	{r7, pc}

08044386 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8044386:	b580      	push	{r7, lr}
 8044388:	b084      	sub	sp, #16
 804438a:	af00      	add	r7, sp, #0
 804438c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 804438e:	687b      	ldr	r3, [r7, #4]
 8044390:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8044394:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8044396:	687b      	ldr	r3, [r7, #4]
 8044398:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 804439c:	2b22      	cmp	r3, #34	; 0x22
 804439e:	d13b      	bne.n	8044418 <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80443a0:	687b      	ldr	r3, [r7, #4]
 80443a2:	681b      	ldr	r3, [r3, #0]
 80443a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80443a6:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80443a8:	89bb      	ldrh	r3, [r7, #12]
 80443aa:	b2d9      	uxtb	r1, r3
 80443ac:	89fb      	ldrh	r3, [r7, #14]
 80443ae:	b2da      	uxtb	r2, r3
 80443b0:	687b      	ldr	r3, [r7, #4]
 80443b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80443b4:	400a      	ands	r2, r1
 80443b6:	b2d2      	uxtb	r2, r2
 80443b8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80443ba:	687b      	ldr	r3, [r7, #4]
 80443bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80443be:	1c5a      	adds	r2, r3, #1
 80443c0:	687b      	ldr	r3, [r7, #4]
 80443c2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80443c4:	687b      	ldr	r3, [r7, #4]
 80443c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80443ca:	b29b      	uxth	r3, r3
 80443cc:	3b01      	subs	r3, #1
 80443ce:	b29a      	uxth	r2, r3
 80443d0:	687b      	ldr	r3, [r7, #4]
 80443d2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80443d6:	687b      	ldr	r3, [r7, #4]
 80443d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80443dc:	b29b      	uxth	r3, r3
 80443de:	2b00      	cmp	r3, #0
 80443e0:	d122      	bne.n	8044428 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80443e2:	687b      	ldr	r3, [r7, #4]
 80443e4:	681b      	ldr	r3, [r3, #0]
 80443e6:	681a      	ldr	r2, [r3, #0]
 80443e8:	687b      	ldr	r3, [r7, #4]
 80443ea:	681b      	ldr	r3, [r3, #0]
 80443ec:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80443f0:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80443f2:	687b      	ldr	r3, [r7, #4]
 80443f4:	681b      	ldr	r3, [r3, #0]
 80443f6:	689a      	ldr	r2, [r3, #8]
 80443f8:	687b      	ldr	r3, [r7, #4]
 80443fa:	681b      	ldr	r3, [r3, #0]
 80443fc:	f022 0201 	bic.w	r2, r2, #1
 8044400:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8044402:	687b      	ldr	r3, [r7, #4]
 8044404:	2220      	movs	r2, #32
 8044406:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 804440a:	687b      	ldr	r3, [r7, #4]
 804440c:	2200      	movs	r2, #0
 804440e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8044410:	6878      	ldr	r0, [r7, #4]
 8044412:	f7fc fc4d 	bl	8040cb0 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8044416:	e007      	b.n	8044428 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8044418:	687b      	ldr	r3, [r7, #4]
 804441a:	681b      	ldr	r3, [r3, #0]
 804441c:	699a      	ldr	r2, [r3, #24]
 804441e:	687b      	ldr	r3, [r7, #4]
 8044420:	681b      	ldr	r3, [r3, #0]
 8044422:	f042 0208 	orr.w	r2, r2, #8
 8044426:	619a      	str	r2, [r3, #24]
}
 8044428:	bf00      	nop
 804442a:	3710      	adds	r7, #16
 804442c:	46bd      	mov	sp, r7
 804442e:	bd80      	pop	{r7, pc}

08044430 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8044430:	b580      	push	{r7, lr}
 8044432:	b084      	sub	sp, #16
 8044434:	af00      	add	r7, sp, #0
 8044436:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8044438:	687b      	ldr	r3, [r7, #4]
 804443a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 804443e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8044440:	687b      	ldr	r3, [r7, #4]
 8044442:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8044446:	2b22      	cmp	r3, #34	; 0x22
 8044448:	d13b      	bne.n	80444c2 <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 804444a:	687b      	ldr	r3, [r7, #4]
 804444c:	681b      	ldr	r3, [r3, #0]
 804444e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8044450:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8044452:	687b      	ldr	r3, [r7, #4]
 8044454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8044456:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8044458:	89ba      	ldrh	r2, [r7, #12]
 804445a:	89fb      	ldrh	r3, [r7, #14]
 804445c:	4013      	ands	r3, r2
 804445e:	b29a      	uxth	r2, r3
 8044460:	68bb      	ldr	r3, [r7, #8]
 8044462:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8044464:	687b      	ldr	r3, [r7, #4]
 8044466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8044468:	1c9a      	adds	r2, r3, #2
 804446a:	687b      	ldr	r3, [r7, #4]
 804446c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 804446e:	687b      	ldr	r3, [r7, #4]
 8044470:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8044474:	b29b      	uxth	r3, r3
 8044476:	3b01      	subs	r3, #1
 8044478:	b29a      	uxth	r2, r3
 804447a:	687b      	ldr	r3, [r7, #4]
 804447c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8044480:	687b      	ldr	r3, [r7, #4]
 8044482:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8044486:	b29b      	uxth	r3, r3
 8044488:	2b00      	cmp	r3, #0
 804448a:	d122      	bne.n	80444d2 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 804448c:	687b      	ldr	r3, [r7, #4]
 804448e:	681b      	ldr	r3, [r3, #0]
 8044490:	681a      	ldr	r2, [r3, #0]
 8044492:	687b      	ldr	r3, [r7, #4]
 8044494:	681b      	ldr	r3, [r3, #0]
 8044496:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 804449a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 804449c:	687b      	ldr	r3, [r7, #4]
 804449e:	681b      	ldr	r3, [r3, #0]
 80444a0:	689a      	ldr	r2, [r3, #8]
 80444a2:	687b      	ldr	r3, [r7, #4]
 80444a4:	681b      	ldr	r3, [r3, #0]
 80444a6:	f022 0201 	bic.w	r2, r2, #1
 80444aa:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80444ac:	687b      	ldr	r3, [r7, #4]
 80444ae:	2220      	movs	r2, #32
 80444b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80444b4:	687b      	ldr	r3, [r7, #4]
 80444b6:	2200      	movs	r2, #0
 80444b8:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80444ba:	6878      	ldr	r0, [r7, #4]
 80444bc:	f7fc fbf8 	bl	8040cb0 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80444c0:	e007      	b.n	80444d2 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80444c2:	687b      	ldr	r3, [r7, #4]
 80444c4:	681b      	ldr	r3, [r3, #0]
 80444c6:	699a      	ldr	r2, [r3, #24]
 80444c8:	687b      	ldr	r3, [r7, #4]
 80444ca:	681b      	ldr	r3, [r3, #0]
 80444cc:	f042 0208 	orr.w	r2, r2, #8
 80444d0:	619a      	str	r2, [r3, #24]
}
 80444d2:	bf00      	nop
 80444d4:	3710      	adds	r7, #16
 80444d6:	46bd      	mov	sp, r7
 80444d8:	bd80      	pop	{r7, pc}
	...

080444dc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80444dc:	b580      	push	{r7, lr}
 80444de:	b084      	sub	sp, #16
 80444e0:	af00      	add	r7, sp, #0
 80444e2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80444e4:	687b      	ldr	r3, [r7, #4]
 80444e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80444ea:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80444ec:	687b      	ldr	r3, [r7, #4]
 80444ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80444f2:	2b22      	cmp	r3, #34	; 0x22
 80444f4:	d168      	bne.n	80445c8 <UART_RxISR_8BIT_FIFOEN+0xec>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80444f6:	687b      	ldr	r3, [r7, #4]
 80444f8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80444fc:	81fb      	strh	r3, [r7, #14]
 80444fe:	e03f      	b.n	8044580 <UART_RxISR_8BIT_FIFOEN+0xa4>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8044500:	687b      	ldr	r3, [r7, #4]
 8044502:	681b      	ldr	r3, [r3, #0]
 8044504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8044506:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8044508:	893b      	ldrh	r3, [r7, #8]
 804450a:	b2d9      	uxtb	r1, r3
 804450c:	89bb      	ldrh	r3, [r7, #12]
 804450e:	b2da      	uxtb	r2, r3
 8044510:	687b      	ldr	r3, [r7, #4]
 8044512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8044514:	400a      	ands	r2, r1
 8044516:	b2d2      	uxtb	r2, r2
 8044518:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 804451a:	687b      	ldr	r3, [r7, #4]
 804451c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804451e:	1c5a      	adds	r2, r3, #1
 8044520:	687b      	ldr	r3, [r7, #4]
 8044522:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8044524:	687b      	ldr	r3, [r7, #4]
 8044526:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 804452a:	b29b      	uxth	r3, r3
 804452c:	3b01      	subs	r3, #1
 804452e:	b29a      	uxth	r2, r3
 8044530:	687b      	ldr	r3, [r7, #4]
 8044532:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 8044536:	687b      	ldr	r3, [r7, #4]
 8044538:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 804453c:	b29b      	uxth	r3, r3
 804453e:	2b00      	cmp	r3, #0
 8044540:	d11b      	bne.n	804457a <UART_RxISR_8BIT_FIFOEN+0x9e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8044542:	687b      	ldr	r3, [r7, #4]
 8044544:	681b      	ldr	r3, [r3, #0]
 8044546:	681a      	ldr	r2, [r3, #0]
 8044548:	687b      	ldr	r3, [r7, #4]
 804454a:	681b      	ldr	r3, [r3, #0]
 804454c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8044550:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8044552:	687b      	ldr	r3, [r7, #4]
 8044554:	681b      	ldr	r3, [r3, #0]
 8044556:	689b      	ldr	r3, [r3, #8]
 8044558:	687a      	ldr	r2, [r7, #4]
 804455a:	6812      	ldr	r2, [r2, #0]
 804455c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8044560:	f023 0301 	bic.w	r3, r3, #1
 8044564:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8044566:	687b      	ldr	r3, [r7, #4]
 8044568:	2220      	movs	r2, #32
 804456a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 804456e:	687b      	ldr	r3, [r7, #4]
 8044570:	2200      	movs	r2, #0
 8044572:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8044574:	6878      	ldr	r0, [r7, #4]
 8044576:	f7fc fb9b 	bl	8040cb0 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 804457a:	89fb      	ldrh	r3, [r7, #14]
 804457c:	3b01      	subs	r3, #1
 804457e:	81fb      	strh	r3, [r7, #14]
 8044580:	89fb      	ldrh	r3, [r7, #14]
 8044582:	2b00      	cmp	r3, #0
 8044584:	d1bc      	bne.n	8044500 <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8044586:	687b      	ldr	r3, [r7, #4]
 8044588:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 804458c:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 804458e:	897b      	ldrh	r3, [r7, #10]
 8044590:	2b00      	cmp	r3, #0
 8044592:	d021      	beq.n	80445d8 <UART_RxISR_8BIT_FIFOEN+0xfc>
 8044594:	687b      	ldr	r3, [r7, #4]
 8044596:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 804459a:	897a      	ldrh	r2, [r7, #10]
 804459c:	429a      	cmp	r2, r3
 804459e:	d21b      	bcs.n	80445d8 <UART_RxISR_8BIT_FIFOEN+0xfc>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80445a0:	687b      	ldr	r3, [r7, #4]
 80445a2:	681b      	ldr	r3, [r3, #0]
 80445a4:	689a      	ldr	r2, [r3, #8]
 80445a6:	687b      	ldr	r3, [r7, #4]
 80445a8:	681b      	ldr	r3, [r3, #0]
 80445aa:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80445ae:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80445b0:	687b      	ldr	r3, [r7, #4]
 80445b2:	4a0b      	ldr	r2, [pc, #44]	; (80445e0 <UART_RxISR_8BIT_FIFOEN+0x104>)
 80445b4:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80445b6:	687b      	ldr	r3, [r7, #4]
 80445b8:	681b      	ldr	r3, [r3, #0]
 80445ba:	681a      	ldr	r2, [r3, #0]
 80445bc:	687b      	ldr	r3, [r7, #4]
 80445be:	681b      	ldr	r3, [r3, #0]
 80445c0:	f042 0220 	orr.w	r2, r2, #32
 80445c4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80445c6:	e007      	b.n	80445d8 <UART_RxISR_8BIT_FIFOEN+0xfc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80445c8:	687b      	ldr	r3, [r7, #4]
 80445ca:	681b      	ldr	r3, [r3, #0]
 80445cc:	699a      	ldr	r2, [r3, #24]
 80445ce:	687b      	ldr	r3, [r7, #4]
 80445d0:	681b      	ldr	r3, [r3, #0]
 80445d2:	f042 0208 	orr.w	r2, r2, #8
 80445d6:	619a      	str	r2, [r3, #24]
}
 80445d8:	bf00      	nop
 80445da:	3710      	adds	r7, #16
 80445dc:	46bd      	mov	sp, r7
 80445de:	bd80      	pop	{r7, pc}
 80445e0:	08044387 	.word	0x08044387

080445e4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80445e4:	b580      	push	{r7, lr}
 80445e6:	b086      	sub	sp, #24
 80445e8:	af00      	add	r7, sp, #0
 80445ea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80445ec:	687b      	ldr	r3, [r7, #4]
 80445ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80445f2:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80445f4:	687b      	ldr	r3, [r7, #4]
 80445f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80445fa:	2b22      	cmp	r3, #34	; 0x22
 80445fc:	d168      	bne.n	80446d0 <UART_RxISR_16BIT_FIFOEN+0xec>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80445fe:	687b      	ldr	r3, [r7, #4]
 8044600:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8044604:	82fb      	strh	r3, [r7, #22]
 8044606:	e03f      	b.n	8044688 <UART_RxISR_16BIT_FIFOEN+0xa4>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8044608:	687b      	ldr	r3, [r7, #4]
 804460a:	681b      	ldr	r3, [r3, #0]
 804460c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804460e:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8044610:	687b      	ldr	r3, [r7, #4]
 8044612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8044614:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 8044616:	8a3a      	ldrh	r2, [r7, #16]
 8044618:	8abb      	ldrh	r3, [r7, #20]
 804461a:	4013      	ands	r3, r2
 804461c:	b29a      	uxth	r2, r3
 804461e:	68fb      	ldr	r3, [r7, #12]
 8044620:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8044622:	687b      	ldr	r3, [r7, #4]
 8044624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8044626:	1c9a      	adds	r2, r3, #2
 8044628:	687b      	ldr	r3, [r7, #4]
 804462a:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 804462c:	687b      	ldr	r3, [r7, #4]
 804462e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8044632:	b29b      	uxth	r3, r3
 8044634:	3b01      	subs	r3, #1
 8044636:	b29a      	uxth	r2, r3
 8044638:	687b      	ldr	r3, [r7, #4]
 804463a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 804463e:	687b      	ldr	r3, [r7, #4]
 8044640:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8044644:	b29b      	uxth	r3, r3
 8044646:	2b00      	cmp	r3, #0
 8044648:	d11b      	bne.n	8044682 <UART_RxISR_16BIT_FIFOEN+0x9e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 804464a:	687b      	ldr	r3, [r7, #4]
 804464c:	681b      	ldr	r3, [r3, #0]
 804464e:	681a      	ldr	r2, [r3, #0]
 8044650:	687b      	ldr	r3, [r7, #4]
 8044652:	681b      	ldr	r3, [r3, #0]
 8044654:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8044658:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 804465a:	687b      	ldr	r3, [r7, #4]
 804465c:	681b      	ldr	r3, [r3, #0]
 804465e:	689b      	ldr	r3, [r3, #8]
 8044660:	687a      	ldr	r2, [r7, #4]
 8044662:	6812      	ldr	r2, [r2, #0]
 8044664:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8044668:	f023 0301 	bic.w	r3, r3, #1
 804466c:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 804466e:	687b      	ldr	r3, [r7, #4]
 8044670:	2220      	movs	r2, #32
 8044672:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8044676:	687b      	ldr	r3, [r7, #4]
 8044678:	2200      	movs	r2, #0
 804467a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 804467c:	6878      	ldr	r0, [r7, #4]
 804467e:	f7fc fb17 	bl	8040cb0 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8044682:	8afb      	ldrh	r3, [r7, #22]
 8044684:	3b01      	subs	r3, #1
 8044686:	82fb      	strh	r3, [r7, #22]
 8044688:	8afb      	ldrh	r3, [r7, #22]
 804468a:	2b00      	cmp	r3, #0
 804468c:	d1bc      	bne.n	8044608 <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 804468e:	687b      	ldr	r3, [r7, #4]
 8044690:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8044694:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8044696:	8a7b      	ldrh	r3, [r7, #18]
 8044698:	2b00      	cmp	r3, #0
 804469a:	d021      	beq.n	80446e0 <UART_RxISR_16BIT_FIFOEN+0xfc>
 804469c:	687b      	ldr	r3, [r7, #4]
 804469e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80446a2:	8a7a      	ldrh	r2, [r7, #18]
 80446a4:	429a      	cmp	r2, r3
 80446a6:	d21b      	bcs.n	80446e0 <UART_RxISR_16BIT_FIFOEN+0xfc>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80446a8:	687b      	ldr	r3, [r7, #4]
 80446aa:	681b      	ldr	r3, [r3, #0]
 80446ac:	689a      	ldr	r2, [r3, #8]
 80446ae:	687b      	ldr	r3, [r7, #4]
 80446b0:	681b      	ldr	r3, [r3, #0]
 80446b2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80446b6:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80446b8:	687b      	ldr	r3, [r7, #4]
 80446ba:	4a0b      	ldr	r2, [pc, #44]	; (80446e8 <UART_RxISR_16BIT_FIFOEN+0x104>)
 80446bc:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80446be:	687b      	ldr	r3, [r7, #4]
 80446c0:	681b      	ldr	r3, [r3, #0]
 80446c2:	681a      	ldr	r2, [r3, #0]
 80446c4:	687b      	ldr	r3, [r7, #4]
 80446c6:	681b      	ldr	r3, [r3, #0]
 80446c8:	f042 0220 	orr.w	r2, r2, #32
 80446cc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80446ce:	e007      	b.n	80446e0 <UART_RxISR_16BIT_FIFOEN+0xfc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80446d0:	687b      	ldr	r3, [r7, #4]
 80446d2:	681b      	ldr	r3, [r3, #0]
 80446d4:	699a      	ldr	r2, [r3, #24]
 80446d6:	687b      	ldr	r3, [r7, #4]
 80446d8:	681b      	ldr	r3, [r3, #0]
 80446da:	f042 0208 	orr.w	r2, r2, #8
 80446de:	619a      	str	r2, [r3, #24]
}
 80446e0:	bf00      	nop
 80446e2:	3718      	adds	r7, #24
 80446e4:	46bd      	mov	sp, r7
 80446e6:	bd80      	pop	{r7, pc}
 80446e8:	08044431 	.word	0x08044431

080446ec <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80446ec:	b480      	push	{r7}
 80446ee:	b083      	sub	sp, #12
 80446f0:	af00      	add	r7, sp, #0
 80446f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80446f4:	bf00      	nop
 80446f6:	370c      	adds	r7, #12
 80446f8:	46bd      	mov	sp, r7
 80446fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80446fe:	4770      	bx	lr

08044700 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8044700:	b480      	push	{r7}
 8044702:	b083      	sub	sp, #12
 8044704:	af00      	add	r7, sp, #0
 8044706:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8044708:	bf00      	nop
 804470a:	370c      	adds	r7, #12
 804470c:	46bd      	mov	sp, r7
 804470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044712:	4770      	bx	lr

08044714 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8044714:	b480      	push	{r7}
 8044716:	b083      	sub	sp, #12
 8044718:	af00      	add	r7, sp, #0
 804471a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 804471c:	bf00      	nop
 804471e:	370c      	adds	r7, #12
 8044720:	46bd      	mov	sp, r7
 8044722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044726:	4770      	bx	lr

08044728 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8044728:	b480      	push	{r7}
 804472a:	b085      	sub	sp, #20
 804472c:	af00      	add	r7, sp, #0
 804472e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8044730:	687b      	ldr	r3, [r7, #4]
 8044732:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8044736:	2b01      	cmp	r3, #1
 8044738:	d101      	bne.n	804473e <HAL_UARTEx_DisableFifoMode+0x16>
 804473a:	2302      	movs	r3, #2
 804473c:	e027      	b.n	804478e <HAL_UARTEx_DisableFifoMode+0x66>
 804473e:	687b      	ldr	r3, [r7, #4]
 8044740:	2201      	movs	r2, #1
 8044742:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8044746:	687b      	ldr	r3, [r7, #4]
 8044748:	2224      	movs	r2, #36	; 0x24
 804474a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 804474e:	687b      	ldr	r3, [r7, #4]
 8044750:	681b      	ldr	r3, [r3, #0]
 8044752:	681b      	ldr	r3, [r3, #0]
 8044754:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8044756:	687b      	ldr	r3, [r7, #4]
 8044758:	681b      	ldr	r3, [r3, #0]
 804475a:	681a      	ldr	r2, [r3, #0]
 804475c:	687b      	ldr	r3, [r7, #4]
 804475e:	681b      	ldr	r3, [r3, #0]
 8044760:	f022 0201 	bic.w	r2, r2, #1
 8044764:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8044766:	68fb      	ldr	r3, [r7, #12]
 8044768:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 804476c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 804476e:	687b      	ldr	r3, [r7, #4]
 8044770:	2200      	movs	r2, #0
 8044772:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8044774:	687b      	ldr	r3, [r7, #4]
 8044776:	681b      	ldr	r3, [r3, #0]
 8044778:	68fa      	ldr	r2, [r7, #12]
 804477a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 804477c:	687b      	ldr	r3, [r7, #4]
 804477e:	2220      	movs	r2, #32
 8044780:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8044784:	687b      	ldr	r3, [r7, #4]
 8044786:	2200      	movs	r2, #0
 8044788:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 804478c:	2300      	movs	r3, #0
}
 804478e:	4618      	mov	r0, r3
 8044790:	3714      	adds	r7, #20
 8044792:	46bd      	mov	sp, r7
 8044794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044798:	4770      	bx	lr

0804479a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 804479a:	b580      	push	{r7, lr}
 804479c:	b084      	sub	sp, #16
 804479e:	af00      	add	r7, sp, #0
 80447a0:	6078      	str	r0, [r7, #4]
 80447a2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80447a4:	687b      	ldr	r3, [r7, #4]
 80447a6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80447aa:	2b01      	cmp	r3, #1
 80447ac:	d101      	bne.n	80447b2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80447ae:	2302      	movs	r3, #2
 80447b0:	e02d      	b.n	804480e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80447b2:	687b      	ldr	r3, [r7, #4]
 80447b4:	2201      	movs	r2, #1
 80447b6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80447ba:	687b      	ldr	r3, [r7, #4]
 80447bc:	2224      	movs	r2, #36	; 0x24
 80447be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80447c2:	687b      	ldr	r3, [r7, #4]
 80447c4:	681b      	ldr	r3, [r3, #0]
 80447c6:	681b      	ldr	r3, [r3, #0]
 80447c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80447ca:	687b      	ldr	r3, [r7, #4]
 80447cc:	681b      	ldr	r3, [r3, #0]
 80447ce:	681a      	ldr	r2, [r3, #0]
 80447d0:	687b      	ldr	r3, [r7, #4]
 80447d2:	681b      	ldr	r3, [r3, #0]
 80447d4:	f022 0201 	bic.w	r2, r2, #1
 80447d8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80447da:	687b      	ldr	r3, [r7, #4]
 80447dc:	681b      	ldr	r3, [r3, #0]
 80447de:	689b      	ldr	r3, [r3, #8]
 80447e0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80447e4:	687b      	ldr	r3, [r7, #4]
 80447e6:	681b      	ldr	r3, [r3, #0]
 80447e8:	683a      	ldr	r2, [r7, #0]
 80447ea:	430a      	orrs	r2, r1
 80447ec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80447ee:	6878      	ldr	r0, [r7, #4]
 80447f0:	f000 f850 	bl	8044894 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80447f4:	687b      	ldr	r3, [r7, #4]
 80447f6:	681b      	ldr	r3, [r3, #0]
 80447f8:	68fa      	ldr	r2, [r7, #12]
 80447fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80447fc:	687b      	ldr	r3, [r7, #4]
 80447fe:	2220      	movs	r2, #32
 8044800:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8044804:	687b      	ldr	r3, [r7, #4]
 8044806:	2200      	movs	r2, #0
 8044808:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 804480c:	2300      	movs	r3, #0
}
 804480e:	4618      	mov	r0, r3
 8044810:	3710      	adds	r7, #16
 8044812:	46bd      	mov	sp, r7
 8044814:	bd80      	pop	{r7, pc}

08044816 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8044816:	b580      	push	{r7, lr}
 8044818:	b084      	sub	sp, #16
 804481a:	af00      	add	r7, sp, #0
 804481c:	6078      	str	r0, [r7, #4]
 804481e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8044820:	687b      	ldr	r3, [r7, #4]
 8044822:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8044826:	2b01      	cmp	r3, #1
 8044828:	d101      	bne.n	804482e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 804482a:	2302      	movs	r3, #2
 804482c:	e02d      	b.n	804488a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 804482e:	687b      	ldr	r3, [r7, #4]
 8044830:	2201      	movs	r2, #1
 8044832:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8044836:	687b      	ldr	r3, [r7, #4]
 8044838:	2224      	movs	r2, #36	; 0x24
 804483a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 804483e:	687b      	ldr	r3, [r7, #4]
 8044840:	681b      	ldr	r3, [r3, #0]
 8044842:	681b      	ldr	r3, [r3, #0]
 8044844:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8044846:	687b      	ldr	r3, [r7, #4]
 8044848:	681b      	ldr	r3, [r3, #0]
 804484a:	681a      	ldr	r2, [r3, #0]
 804484c:	687b      	ldr	r3, [r7, #4]
 804484e:	681b      	ldr	r3, [r3, #0]
 8044850:	f022 0201 	bic.w	r2, r2, #1
 8044854:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8044856:	687b      	ldr	r3, [r7, #4]
 8044858:	681b      	ldr	r3, [r3, #0]
 804485a:	689b      	ldr	r3, [r3, #8]
 804485c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8044860:	687b      	ldr	r3, [r7, #4]
 8044862:	681b      	ldr	r3, [r3, #0]
 8044864:	683a      	ldr	r2, [r7, #0]
 8044866:	430a      	orrs	r2, r1
 8044868:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 804486a:	6878      	ldr	r0, [r7, #4]
 804486c:	f000 f812 	bl	8044894 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8044870:	687b      	ldr	r3, [r7, #4]
 8044872:	681b      	ldr	r3, [r3, #0]
 8044874:	68fa      	ldr	r2, [r7, #12]
 8044876:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8044878:	687b      	ldr	r3, [r7, #4]
 804487a:	2220      	movs	r2, #32
 804487c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8044880:	687b      	ldr	r3, [r7, #4]
 8044882:	2200      	movs	r2, #0
 8044884:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8044888:	2300      	movs	r3, #0
}
 804488a:	4618      	mov	r0, r3
 804488c:	3710      	adds	r7, #16
 804488e:	46bd      	mov	sp, r7
 8044890:	bd80      	pop	{r7, pc}
	...

08044894 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8044894:	b480      	push	{r7}
 8044896:	b089      	sub	sp, #36	; 0x24
 8044898:	af00      	add	r7, sp, #0
 804489a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 804489c:	4a2d      	ldr	r2, [pc, #180]	; (8044954 <UARTEx_SetNbDataToProcess+0xc0>)
 804489e:	f107 0314 	add.w	r3, r7, #20
 80448a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80448a6:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80448aa:	4a2b      	ldr	r2, [pc, #172]	; (8044958 <UARTEx_SetNbDataToProcess+0xc4>)
 80448ac:	f107 030c 	add.w	r3, r7, #12
 80448b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80448b4:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80448b8:	687b      	ldr	r3, [r7, #4]
 80448ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80448bc:	2b00      	cmp	r3, #0
 80448be:	d108      	bne.n	80448d2 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 80448c0:	687b      	ldr	r3, [r7, #4]
 80448c2:	2201      	movs	r2, #1
 80448c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80448c8:	687b      	ldr	r3, [r7, #4]
 80448ca:	2201      	movs	r2, #1
 80448cc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80448d0:	e039      	b.n	8044946 <UARTEx_SetNbDataToProcess+0xb2>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80448d2:	2308      	movs	r3, #8
 80448d4:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80448d6:	2308      	movs	r3, #8
 80448d8:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80448da:	687b      	ldr	r3, [r7, #4]
 80448dc:	681b      	ldr	r3, [r3, #0]
 80448de:	689b      	ldr	r3, [r3, #8]
 80448e0:	0e5b      	lsrs	r3, r3, #25
 80448e2:	b2db      	uxtb	r3, r3
 80448e4:	f003 0307 	and.w	r3, r3, #7
 80448e8:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80448ea:	687b      	ldr	r3, [r7, #4]
 80448ec:	681b      	ldr	r3, [r3, #0]
 80448ee:	689b      	ldr	r3, [r3, #8]
 80448f0:	0f5b      	lsrs	r3, r3, #29
 80448f2:	b2db      	uxtb	r3, r3
 80448f4:	f003 0307 	and.w	r3, r3, #7
 80448f8:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80448fa:	7fbb      	ldrb	r3, [r7, #30]
 80448fc:	7f3a      	ldrb	r2, [r7, #28]
 80448fe:	3220      	adds	r2, #32
 8044900:	443a      	add	r2, r7
 8044902:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8044906:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 804490a:	7f3a      	ldrb	r2, [r7, #28]
 804490c:	3220      	adds	r2, #32
 804490e:	443a      	add	r2, r7
 8044910:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8044914:	fb93 f3f2 	sdiv	r3, r3, r2
 8044918:	b29a      	uxth	r2, r3
 804491a:	687b      	ldr	r3, [r7, #4]
 804491c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8044920:	7ffb      	ldrb	r3, [r7, #31]
 8044922:	7f7a      	ldrb	r2, [r7, #29]
 8044924:	3220      	adds	r2, #32
 8044926:	443a      	add	r2, r7
 8044928:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 804492c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8044930:	7f7a      	ldrb	r2, [r7, #29]
 8044932:	3220      	adds	r2, #32
 8044934:	443a      	add	r2, r7
 8044936:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 804493a:	fb93 f3f2 	sdiv	r3, r3, r2
 804493e:	b29a      	uxth	r2, r3
 8044940:	687b      	ldr	r3, [r7, #4]
 8044942:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8044946:	bf00      	nop
 8044948:	3724      	adds	r7, #36	; 0x24
 804494a:	46bd      	mov	sp, r7
 804494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044950:	4770      	bx	lr
 8044952:	bf00      	nop
 8044954:	08044aa4 	.word	0x08044aa4
 8044958:	08044aac 	.word	0x08044aac

0804495c <__libc_init_array>:
 804495c:	b570      	push	{r4, r5, r6, lr}
 804495e:	4d0d      	ldr	r5, [pc, #52]	; (8044994 <__libc_init_array+0x38>)
 8044960:	4c0d      	ldr	r4, [pc, #52]	; (8044998 <__libc_init_array+0x3c>)
 8044962:	1b64      	subs	r4, r4, r5
 8044964:	10a4      	asrs	r4, r4, #2
 8044966:	2600      	movs	r6, #0
 8044968:	42a6      	cmp	r6, r4
 804496a:	d109      	bne.n	8044980 <__libc_init_array+0x24>
 804496c:	4d0b      	ldr	r5, [pc, #44]	; (804499c <__libc_init_array+0x40>)
 804496e:	4c0c      	ldr	r4, [pc, #48]	; (80449a0 <__libc_init_array+0x44>)
 8044970:	f000 f820 	bl	80449b4 <_init>
 8044974:	1b64      	subs	r4, r4, r5
 8044976:	10a4      	asrs	r4, r4, #2
 8044978:	2600      	movs	r6, #0
 804497a:	42a6      	cmp	r6, r4
 804497c:	d105      	bne.n	804498a <__libc_init_array+0x2e>
 804497e:	bd70      	pop	{r4, r5, r6, pc}
 8044980:	f855 3b04 	ldr.w	r3, [r5], #4
 8044984:	4798      	blx	r3
 8044986:	3601      	adds	r6, #1
 8044988:	e7ee      	b.n	8044968 <__libc_init_array+0xc>
 804498a:	f855 3b04 	ldr.w	r3, [r5], #4
 804498e:	4798      	blx	r3
 8044990:	3601      	adds	r6, #1
 8044992:	e7f2      	b.n	804497a <__libc_init_array+0x1e>
 8044994:	08044aec 	.word	0x08044aec
 8044998:	08044aec 	.word	0x08044aec
 804499c:	08044aec 	.word	0x08044aec
 80449a0:	08044af0 	.word	0x08044af0

080449a4 <memset>:
 80449a4:	4402      	add	r2, r0
 80449a6:	4603      	mov	r3, r0
 80449a8:	4293      	cmp	r3, r2
 80449aa:	d100      	bne.n	80449ae <memset+0xa>
 80449ac:	4770      	bx	lr
 80449ae:	f803 1b01 	strb.w	r1, [r3], #1
 80449b2:	e7f9      	b.n	80449a8 <memset+0x4>

080449b4 <_init>:
 80449b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80449b6:	bf00      	nop
 80449b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80449ba:	bc08      	pop	{r3}
 80449bc:	469e      	mov	lr, r3
 80449be:	4770      	bx	lr

080449c0 <_fini>:
 80449c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80449c2:	bf00      	nop
 80449c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80449c6:	bc08      	pop	{r3}
 80449c8:	469e      	mov	lr, r3
 80449ca:	4770      	bx	lr
