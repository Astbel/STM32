
UART_Hello.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08040000  08040000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b38  080401d8  080401d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08043d10  08043d10  00013d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08043df8  08043df8  0002002c  2**0
                  CONTENTS
  4 .ARM          00000008  08043df8  08043df8  00013df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08043e00  08043e00  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08043e00  08043e00  00013e00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08043e04  08043e04  00013e04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08043e08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  2000002c  08043e34  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000154  08043e34  00020154  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001104b  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000284b  00000000  00000000  000310a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f0  00000000  00000000  000338f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fc8  00000000  00000000  000349e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025eda  00000000  00000000  000359b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001223a  00000000  00000000  0005b88a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000faacb  00000000  00000000  0006dac4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016858f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004730  00000000  00000000  001685e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080401d8 <__do_global_dtors_aux>:
 80401d8:	b510      	push	{r4, lr}
 80401da:	4c05      	ldr	r4, [pc, #20]	; (80401f0 <__do_global_dtors_aux+0x18>)
 80401dc:	7823      	ldrb	r3, [r4, #0]
 80401de:	b933      	cbnz	r3, 80401ee <__do_global_dtors_aux+0x16>
 80401e0:	4b04      	ldr	r3, [pc, #16]	; (80401f4 <__do_global_dtors_aux+0x1c>)
 80401e2:	b113      	cbz	r3, 80401ea <__do_global_dtors_aux+0x12>
 80401e4:	4804      	ldr	r0, [pc, #16]	; (80401f8 <__do_global_dtors_aux+0x20>)
 80401e6:	f3af 8000 	nop.w
 80401ea:	2301      	movs	r3, #1
 80401ec:	7023      	strb	r3, [r4, #0]
 80401ee:	bd10      	pop	{r4, pc}
 80401f0:	2000002c 	.word	0x2000002c
 80401f4:	00000000 	.word	0x00000000
 80401f8:	08043cf8 	.word	0x08043cf8

080401fc <frame_dummy>:
 80401fc:	b508      	push	{r3, lr}
 80401fe:	4b03      	ldr	r3, [pc, #12]	; (804020c <frame_dummy+0x10>)
 8040200:	b11b      	cbz	r3, 804020a <frame_dummy+0xe>
 8040202:	4903      	ldr	r1, [pc, #12]	; (8040210 <frame_dummy+0x14>)
 8040204:	4803      	ldr	r0, [pc, #12]	; (8040214 <frame_dummy+0x18>)
 8040206:	f3af 8000 	nop.w
 804020a:	bd08      	pop	{r3, pc}
 804020c:	00000000 	.word	0x00000000
 8040210:	20000030 	.word	0x20000030
 8040214:	08043cf8 	.word	0x08043cf8

08040218 <strlen>:
 8040218:	4603      	mov	r3, r0
 804021a:	f813 2b01 	ldrb.w	r2, [r3], #1
 804021e:	2a00      	cmp	r2, #0
 8040220:	d1fb      	bne.n	804021a <strlen+0x2>
 8040222:	1a18      	subs	r0, r3, r0
 8040224:	3801      	subs	r0, #1
 8040226:	4770      	bx	lr

08040228 <__aeabi_uldivmod>:
 8040228:	b953      	cbnz	r3, 8040240 <__aeabi_uldivmod+0x18>
 804022a:	b94a      	cbnz	r2, 8040240 <__aeabi_uldivmod+0x18>
 804022c:	2900      	cmp	r1, #0
 804022e:	bf08      	it	eq
 8040230:	2800      	cmpeq	r0, #0
 8040232:	bf1c      	itt	ne
 8040234:	f04f 31ff 	movne.w	r1, #4294967295
 8040238:	f04f 30ff 	movne.w	r0, #4294967295
 804023c:	f000 b974 	b.w	8040528 <__aeabi_idiv0>
 8040240:	f1ad 0c08 	sub.w	ip, sp, #8
 8040244:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8040248:	f000 f806 	bl	8040258 <__udivmoddi4>
 804024c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8040250:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8040254:	b004      	add	sp, #16
 8040256:	4770      	bx	lr

08040258 <__udivmoddi4>:
 8040258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 804025c:	9d08      	ldr	r5, [sp, #32]
 804025e:	4604      	mov	r4, r0
 8040260:	468e      	mov	lr, r1
 8040262:	2b00      	cmp	r3, #0
 8040264:	d14d      	bne.n	8040302 <__udivmoddi4+0xaa>
 8040266:	428a      	cmp	r2, r1
 8040268:	4694      	mov	ip, r2
 804026a:	d969      	bls.n	8040340 <__udivmoddi4+0xe8>
 804026c:	fab2 f282 	clz	r2, r2
 8040270:	b152      	cbz	r2, 8040288 <__udivmoddi4+0x30>
 8040272:	fa01 f302 	lsl.w	r3, r1, r2
 8040276:	f1c2 0120 	rsb	r1, r2, #32
 804027a:	fa20 f101 	lsr.w	r1, r0, r1
 804027e:	fa0c fc02 	lsl.w	ip, ip, r2
 8040282:	ea41 0e03 	orr.w	lr, r1, r3
 8040286:	4094      	lsls	r4, r2
 8040288:	ea4f 481c 	mov.w	r8, ip, lsr #16
 804028c:	0c21      	lsrs	r1, r4, #16
 804028e:	fbbe f6f8 	udiv	r6, lr, r8
 8040292:	fa1f f78c 	uxth.w	r7, ip
 8040296:	fb08 e316 	mls	r3, r8, r6, lr
 804029a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 804029e:	fb06 f107 	mul.w	r1, r6, r7
 80402a2:	4299      	cmp	r1, r3
 80402a4:	d90a      	bls.n	80402bc <__udivmoddi4+0x64>
 80402a6:	eb1c 0303 	adds.w	r3, ip, r3
 80402aa:	f106 30ff 	add.w	r0, r6, #4294967295
 80402ae:	f080 811f 	bcs.w	80404f0 <__udivmoddi4+0x298>
 80402b2:	4299      	cmp	r1, r3
 80402b4:	f240 811c 	bls.w	80404f0 <__udivmoddi4+0x298>
 80402b8:	3e02      	subs	r6, #2
 80402ba:	4463      	add	r3, ip
 80402bc:	1a5b      	subs	r3, r3, r1
 80402be:	b2a4      	uxth	r4, r4
 80402c0:	fbb3 f0f8 	udiv	r0, r3, r8
 80402c4:	fb08 3310 	mls	r3, r8, r0, r3
 80402c8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80402cc:	fb00 f707 	mul.w	r7, r0, r7
 80402d0:	42a7      	cmp	r7, r4
 80402d2:	d90a      	bls.n	80402ea <__udivmoddi4+0x92>
 80402d4:	eb1c 0404 	adds.w	r4, ip, r4
 80402d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80402dc:	f080 810a 	bcs.w	80404f4 <__udivmoddi4+0x29c>
 80402e0:	42a7      	cmp	r7, r4
 80402e2:	f240 8107 	bls.w	80404f4 <__udivmoddi4+0x29c>
 80402e6:	4464      	add	r4, ip
 80402e8:	3802      	subs	r0, #2
 80402ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80402ee:	1be4      	subs	r4, r4, r7
 80402f0:	2600      	movs	r6, #0
 80402f2:	b11d      	cbz	r5, 80402fc <__udivmoddi4+0xa4>
 80402f4:	40d4      	lsrs	r4, r2
 80402f6:	2300      	movs	r3, #0
 80402f8:	e9c5 4300 	strd	r4, r3, [r5]
 80402fc:	4631      	mov	r1, r6
 80402fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8040302:	428b      	cmp	r3, r1
 8040304:	d909      	bls.n	804031a <__udivmoddi4+0xc2>
 8040306:	2d00      	cmp	r5, #0
 8040308:	f000 80ef 	beq.w	80404ea <__udivmoddi4+0x292>
 804030c:	2600      	movs	r6, #0
 804030e:	e9c5 0100 	strd	r0, r1, [r5]
 8040312:	4630      	mov	r0, r6
 8040314:	4631      	mov	r1, r6
 8040316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 804031a:	fab3 f683 	clz	r6, r3
 804031e:	2e00      	cmp	r6, #0
 8040320:	d14a      	bne.n	80403b8 <__udivmoddi4+0x160>
 8040322:	428b      	cmp	r3, r1
 8040324:	d302      	bcc.n	804032c <__udivmoddi4+0xd4>
 8040326:	4282      	cmp	r2, r0
 8040328:	f200 80f9 	bhi.w	804051e <__udivmoddi4+0x2c6>
 804032c:	1a84      	subs	r4, r0, r2
 804032e:	eb61 0303 	sbc.w	r3, r1, r3
 8040332:	2001      	movs	r0, #1
 8040334:	469e      	mov	lr, r3
 8040336:	2d00      	cmp	r5, #0
 8040338:	d0e0      	beq.n	80402fc <__udivmoddi4+0xa4>
 804033a:	e9c5 4e00 	strd	r4, lr, [r5]
 804033e:	e7dd      	b.n	80402fc <__udivmoddi4+0xa4>
 8040340:	b902      	cbnz	r2, 8040344 <__udivmoddi4+0xec>
 8040342:	deff      	udf	#255	; 0xff
 8040344:	fab2 f282 	clz	r2, r2
 8040348:	2a00      	cmp	r2, #0
 804034a:	f040 8092 	bne.w	8040472 <__udivmoddi4+0x21a>
 804034e:	eba1 010c 	sub.w	r1, r1, ip
 8040352:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8040356:	fa1f fe8c 	uxth.w	lr, ip
 804035a:	2601      	movs	r6, #1
 804035c:	0c20      	lsrs	r0, r4, #16
 804035e:	fbb1 f3f7 	udiv	r3, r1, r7
 8040362:	fb07 1113 	mls	r1, r7, r3, r1
 8040366:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 804036a:	fb0e f003 	mul.w	r0, lr, r3
 804036e:	4288      	cmp	r0, r1
 8040370:	d908      	bls.n	8040384 <__udivmoddi4+0x12c>
 8040372:	eb1c 0101 	adds.w	r1, ip, r1
 8040376:	f103 38ff 	add.w	r8, r3, #4294967295
 804037a:	d202      	bcs.n	8040382 <__udivmoddi4+0x12a>
 804037c:	4288      	cmp	r0, r1
 804037e:	f200 80cb 	bhi.w	8040518 <__udivmoddi4+0x2c0>
 8040382:	4643      	mov	r3, r8
 8040384:	1a09      	subs	r1, r1, r0
 8040386:	b2a4      	uxth	r4, r4
 8040388:	fbb1 f0f7 	udiv	r0, r1, r7
 804038c:	fb07 1110 	mls	r1, r7, r0, r1
 8040390:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8040394:	fb0e fe00 	mul.w	lr, lr, r0
 8040398:	45a6      	cmp	lr, r4
 804039a:	d908      	bls.n	80403ae <__udivmoddi4+0x156>
 804039c:	eb1c 0404 	adds.w	r4, ip, r4
 80403a0:	f100 31ff 	add.w	r1, r0, #4294967295
 80403a4:	d202      	bcs.n	80403ac <__udivmoddi4+0x154>
 80403a6:	45a6      	cmp	lr, r4
 80403a8:	f200 80bb 	bhi.w	8040522 <__udivmoddi4+0x2ca>
 80403ac:	4608      	mov	r0, r1
 80403ae:	eba4 040e 	sub.w	r4, r4, lr
 80403b2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80403b6:	e79c      	b.n	80402f2 <__udivmoddi4+0x9a>
 80403b8:	f1c6 0720 	rsb	r7, r6, #32
 80403bc:	40b3      	lsls	r3, r6
 80403be:	fa22 fc07 	lsr.w	ip, r2, r7
 80403c2:	ea4c 0c03 	orr.w	ip, ip, r3
 80403c6:	fa20 f407 	lsr.w	r4, r0, r7
 80403ca:	fa01 f306 	lsl.w	r3, r1, r6
 80403ce:	431c      	orrs	r4, r3
 80403d0:	40f9      	lsrs	r1, r7
 80403d2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80403d6:	fa00 f306 	lsl.w	r3, r0, r6
 80403da:	fbb1 f8f9 	udiv	r8, r1, r9
 80403de:	0c20      	lsrs	r0, r4, #16
 80403e0:	fa1f fe8c 	uxth.w	lr, ip
 80403e4:	fb09 1118 	mls	r1, r9, r8, r1
 80403e8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80403ec:	fb08 f00e 	mul.w	r0, r8, lr
 80403f0:	4288      	cmp	r0, r1
 80403f2:	fa02 f206 	lsl.w	r2, r2, r6
 80403f6:	d90b      	bls.n	8040410 <__udivmoddi4+0x1b8>
 80403f8:	eb1c 0101 	adds.w	r1, ip, r1
 80403fc:	f108 3aff 	add.w	sl, r8, #4294967295
 8040400:	f080 8088 	bcs.w	8040514 <__udivmoddi4+0x2bc>
 8040404:	4288      	cmp	r0, r1
 8040406:	f240 8085 	bls.w	8040514 <__udivmoddi4+0x2bc>
 804040a:	f1a8 0802 	sub.w	r8, r8, #2
 804040e:	4461      	add	r1, ip
 8040410:	1a09      	subs	r1, r1, r0
 8040412:	b2a4      	uxth	r4, r4
 8040414:	fbb1 f0f9 	udiv	r0, r1, r9
 8040418:	fb09 1110 	mls	r1, r9, r0, r1
 804041c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8040420:	fb00 fe0e 	mul.w	lr, r0, lr
 8040424:	458e      	cmp	lr, r1
 8040426:	d908      	bls.n	804043a <__udivmoddi4+0x1e2>
 8040428:	eb1c 0101 	adds.w	r1, ip, r1
 804042c:	f100 34ff 	add.w	r4, r0, #4294967295
 8040430:	d26c      	bcs.n	804050c <__udivmoddi4+0x2b4>
 8040432:	458e      	cmp	lr, r1
 8040434:	d96a      	bls.n	804050c <__udivmoddi4+0x2b4>
 8040436:	3802      	subs	r0, #2
 8040438:	4461      	add	r1, ip
 804043a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 804043e:	fba0 9402 	umull	r9, r4, r0, r2
 8040442:	eba1 010e 	sub.w	r1, r1, lr
 8040446:	42a1      	cmp	r1, r4
 8040448:	46c8      	mov	r8, r9
 804044a:	46a6      	mov	lr, r4
 804044c:	d356      	bcc.n	80404fc <__udivmoddi4+0x2a4>
 804044e:	d053      	beq.n	80404f8 <__udivmoddi4+0x2a0>
 8040450:	b15d      	cbz	r5, 804046a <__udivmoddi4+0x212>
 8040452:	ebb3 0208 	subs.w	r2, r3, r8
 8040456:	eb61 010e 	sbc.w	r1, r1, lr
 804045a:	fa01 f707 	lsl.w	r7, r1, r7
 804045e:	fa22 f306 	lsr.w	r3, r2, r6
 8040462:	40f1      	lsrs	r1, r6
 8040464:	431f      	orrs	r7, r3
 8040466:	e9c5 7100 	strd	r7, r1, [r5]
 804046a:	2600      	movs	r6, #0
 804046c:	4631      	mov	r1, r6
 804046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8040472:	f1c2 0320 	rsb	r3, r2, #32
 8040476:	40d8      	lsrs	r0, r3
 8040478:	fa0c fc02 	lsl.w	ip, ip, r2
 804047c:	fa21 f303 	lsr.w	r3, r1, r3
 8040480:	4091      	lsls	r1, r2
 8040482:	4301      	orrs	r1, r0
 8040484:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8040488:	fa1f fe8c 	uxth.w	lr, ip
 804048c:	fbb3 f0f7 	udiv	r0, r3, r7
 8040490:	fb07 3610 	mls	r6, r7, r0, r3
 8040494:	0c0b      	lsrs	r3, r1, #16
 8040496:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 804049a:	fb00 f60e 	mul.w	r6, r0, lr
 804049e:	429e      	cmp	r6, r3
 80404a0:	fa04 f402 	lsl.w	r4, r4, r2
 80404a4:	d908      	bls.n	80404b8 <__udivmoddi4+0x260>
 80404a6:	eb1c 0303 	adds.w	r3, ip, r3
 80404aa:	f100 38ff 	add.w	r8, r0, #4294967295
 80404ae:	d22f      	bcs.n	8040510 <__udivmoddi4+0x2b8>
 80404b0:	429e      	cmp	r6, r3
 80404b2:	d92d      	bls.n	8040510 <__udivmoddi4+0x2b8>
 80404b4:	3802      	subs	r0, #2
 80404b6:	4463      	add	r3, ip
 80404b8:	1b9b      	subs	r3, r3, r6
 80404ba:	b289      	uxth	r1, r1
 80404bc:	fbb3 f6f7 	udiv	r6, r3, r7
 80404c0:	fb07 3316 	mls	r3, r7, r6, r3
 80404c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80404c8:	fb06 f30e 	mul.w	r3, r6, lr
 80404cc:	428b      	cmp	r3, r1
 80404ce:	d908      	bls.n	80404e2 <__udivmoddi4+0x28a>
 80404d0:	eb1c 0101 	adds.w	r1, ip, r1
 80404d4:	f106 38ff 	add.w	r8, r6, #4294967295
 80404d8:	d216      	bcs.n	8040508 <__udivmoddi4+0x2b0>
 80404da:	428b      	cmp	r3, r1
 80404dc:	d914      	bls.n	8040508 <__udivmoddi4+0x2b0>
 80404de:	3e02      	subs	r6, #2
 80404e0:	4461      	add	r1, ip
 80404e2:	1ac9      	subs	r1, r1, r3
 80404e4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80404e8:	e738      	b.n	804035c <__udivmoddi4+0x104>
 80404ea:	462e      	mov	r6, r5
 80404ec:	4628      	mov	r0, r5
 80404ee:	e705      	b.n	80402fc <__udivmoddi4+0xa4>
 80404f0:	4606      	mov	r6, r0
 80404f2:	e6e3      	b.n	80402bc <__udivmoddi4+0x64>
 80404f4:	4618      	mov	r0, r3
 80404f6:	e6f8      	b.n	80402ea <__udivmoddi4+0x92>
 80404f8:	454b      	cmp	r3, r9
 80404fa:	d2a9      	bcs.n	8040450 <__udivmoddi4+0x1f8>
 80404fc:	ebb9 0802 	subs.w	r8, r9, r2
 8040500:	eb64 0e0c 	sbc.w	lr, r4, ip
 8040504:	3801      	subs	r0, #1
 8040506:	e7a3      	b.n	8040450 <__udivmoddi4+0x1f8>
 8040508:	4646      	mov	r6, r8
 804050a:	e7ea      	b.n	80404e2 <__udivmoddi4+0x28a>
 804050c:	4620      	mov	r0, r4
 804050e:	e794      	b.n	804043a <__udivmoddi4+0x1e2>
 8040510:	4640      	mov	r0, r8
 8040512:	e7d1      	b.n	80404b8 <__udivmoddi4+0x260>
 8040514:	46d0      	mov	r8, sl
 8040516:	e77b      	b.n	8040410 <__udivmoddi4+0x1b8>
 8040518:	3b02      	subs	r3, #2
 804051a:	4461      	add	r1, ip
 804051c:	e732      	b.n	8040384 <__udivmoddi4+0x12c>
 804051e:	4630      	mov	r0, r6
 8040520:	e709      	b.n	8040336 <__udivmoddi4+0xde>
 8040522:	4464      	add	r4, ip
 8040524:	3802      	subs	r0, #2
 8040526:	e742      	b.n	80403ae <__udivmoddi4+0x156>

08040528 <__aeabi_idiv0>:
 8040528:	4770      	bx	lr
 804052a:	bf00      	nop
 804052c:	0000      	movs	r0, r0
	...

08040530 <Flash_Data>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/

void Flash_Data(void)
{
 8040530:	b580      	push	{r7, lr}
 8040532:	af00      	add	r7, sp, #0
    fail_cnt =0;
 8040534:	4b4a      	ldr	r3, [pc, #296]	; (8040660 <Flash_Data+0x130>)
 8040536:	2200      	movs	r2, #0
 8040538:	801a      	strh	r2, [r3, #0]
    uart_send_msg("Start write data to flash memory\r\n");
 804053a:	484a      	ldr	r0, [pc, #296]	; (8040664 <Flash_Data+0x134>)
 804053c:	f000 fb6a 	bl	8040c14 <uart_send_msg>
    /* Unlock the Flash to enable the flash control register access *************/
    HAL_FLASH_Unlock();
 8040540:	f000 fd80 	bl	8041044 <HAL_FLASH_Unlock>
   
    /* Clear OPTVERR bit set on virgin samples */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8040544:	4b48      	ldr	r3, [pc, #288]	; (8040668 <Flash_Data+0x138>)
 8040546:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 804054a:	611a      	str	r2, [r3, #16]

     /* Get the 1st page to erase */
  FirstPage = GetPage(FLASH_USER_START_ADDR);
 804054c:	4847      	ldr	r0, [pc, #284]	; (804066c <Flash_Data+0x13c>)
 804054e:	f000 f8a9 	bl	80406a4 <GetPage>
 8040552:	4603      	mov	r3, r0
 8040554:	4a46      	ldr	r2, [pc, #280]	; (8040670 <Flash_Data+0x140>)
 8040556:	6013      	str	r3, [r2, #0]

  /* Get the number of pages to erase from 1st page */
  NbOfPages = GetPage(FLASH_USER_END_ADDR) - FirstPage + 1;
 8040558:	4846      	ldr	r0, [pc, #280]	; (8040674 <Flash_Data+0x144>)
 804055a:	f000 f8a3 	bl	80406a4 <GetPage>
 804055e:	4602      	mov	r2, r0
 8040560:	4b43      	ldr	r3, [pc, #268]	; (8040670 <Flash_Data+0x140>)
 8040562:	681b      	ldr	r3, [r3, #0]
 8040564:	1ad3      	subs	r3, r2, r3
 8040566:	3301      	adds	r3, #1
 8040568:	4a43      	ldr	r2, [pc, #268]	; (8040678 <Flash_Data+0x148>)
 804056a:	6013      	str	r3, [r2, #0]

  /* Get the bank */
  BankNumber = GetBank(FLASH_USER_START_ADDR);
 804056c:	483f      	ldr	r0, [pc, #252]	; (804066c <Flash_Data+0x13c>)
 804056e:	f000 f8d9 	bl	8040724 <GetBank>
 8040572:	4603      	mov	r3, r0
 8040574:	4a41      	ldr	r2, [pc, #260]	; (804067c <Flash_Data+0x14c>)
 8040576:	6013      	str	r3, [r2, #0]

  /* Fill EraseInit structure*/
  EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 8040578:	4b41      	ldr	r3, [pc, #260]	; (8040680 <Flash_Data+0x150>)
 804057a:	2200      	movs	r2, #0
 804057c:	601a      	str	r2, [r3, #0]
  EraseInitStruct.Banks       = BankNumber;
 804057e:	4b3f      	ldr	r3, [pc, #252]	; (804067c <Flash_Data+0x14c>)
 8040580:	681b      	ldr	r3, [r3, #0]
 8040582:	4a3f      	ldr	r2, [pc, #252]	; (8040680 <Flash_Data+0x150>)
 8040584:	6053      	str	r3, [r2, #4]
  EraseInitStruct.Page        = FirstPage;
 8040586:	4b3a      	ldr	r3, [pc, #232]	; (8040670 <Flash_Data+0x140>)
 8040588:	681b      	ldr	r3, [r3, #0]
 804058a:	4a3d      	ldr	r2, [pc, #244]	; (8040680 <Flash_Data+0x150>)
 804058c:	6093      	str	r3, [r2, #8]
  EraseInitStruct.NbPages     = NbOfPages;
 804058e:	4b3a      	ldr	r3, [pc, #232]	; (8040678 <Flash_Data+0x148>)
 8040590:	681b      	ldr	r3, [r3, #0]
 8040592:	4a3b      	ldr	r2, [pc, #236]	; (8040680 <Flash_Data+0x150>)
 8040594:	60d3      	str	r3, [r2, #12]
  /* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
     you have to make sure that these data are rewritten before they are accessed during code
     execution. If this cannot be done safely, it is recommended to flush the caches by setting the
     DCRST and ICRST bits in the FLASH_CR register. */
    if (HAL_FLASHEx_Erase(&EraseInitStruct, &PageError) != HAL_OK)
 8040596:	493b      	ldr	r1, [pc, #236]	; (8040684 <Flash_Data+0x154>)
 8040598:	4839      	ldr	r0, [pc, #228]	; (8040680 <Flash_Data+0x150>)
 804059a:	f000 fe3f 	bl	804121c <HAL_FLASHEx_Erase>
 804059e:	4603      	mov	r3, r0
 80405a0:	2b00      	cmp	r3, #0
 80405a2:	d003      	beq.n	80405ac <Flash_Data+0x7c>
    */
    /* Infinite loop */
        while (1)
        {
            /* Make LED2 blink (100ms on, 2s off) to indicate error in Erase operation */
            uart_send_msg("Erasing Flash memory\r\n");
 80405a4:	4838      	ldr	r0, [pc, #224]	; (8040688 <Flash_Data+0x158>)
 80405a6:	f000 fb35 	bl	8040c14 <uart_send_msg>
 80405aa:	e7fb      	b.n	80405a4 <Flash_Data+0x74>
        }
    }
    /* Program the user Flash area word by word
    (area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/
    Address = FLASH_USER_START_ADDR;
 80405ac:	4b37      	ldr	r3, [pc, #220]	; (804068c <Flash_Data+0x15c>)
 80405ae:	4a2f      	ldr	r2, [pc, #188]	; (804066c <Flash_Data+0x13c>)
 80405b0:	601a      	str	r2, [r3, #0]

    while (Address < FLASH_USER_END_ADDR)
 80405b2:	e014      	b.n	80405de <Flash_Data+0xae>
    {
        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, DATA_64) == HAL_OK)
 80405b4:	4b35      	ldr	r3, [pc, #212]	; (804068c <Flash_Data+0x15c>)
 80405b6:	6819      	ldr	r1, [r3, #0]
 80405b8:	a327      	add	r3, pc, #156	; (adr r3, 8040658 <Flash_Data+0x128>)
 80405ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80405be:	2000      	movs	r0, #0
 80405c0:	f000 fcea 	bl	8040f98 <HAL_FLASH_Program>
 80405c4:	4603      	mov	r3, r0
 80405c6:	2b00      	cmp	r3, #0
 80405c8:	d105      	bne.n	80405d6 <Flash_Data+0xa6>
        {
            Address = Address + 8;  /* increment to next double word*/
 80405ca:	4b30      	ldr	r3, [pc, #192]	; (804068c <Flash_Data+0x15c>)
 80405cc:	681b      	ldr	r3, [r3, #0]
 80405ce:	3308      	adds	r3, #8
 80405d0:	4a2e      	ldr	r2, [pc, #184]	; (804068c <Flash_Data+0x15c>)
 80405d2:	6013      	str	r3, [r2, #0]
 80405d4:	e003      	b.n	80405de <Flash_Data+0xae>
            /* Error occurred while writing data in Flash memory.
            User can add here some code to deal with this error */
            while (1)
            {
                /* Make LED2 blink (100ms on, 2s off) to indicate error in Write operation */
                uart_send_msg("fail writing data\r\n");
 80405d6:	482e      	ldr	r0, [pc, #184]	; (8040690 <Flash_Data+0x160>)
 80405d8:	f000 fb1c 	bl	8040c14 <uart_send_msg>
 80405dc:	e7fb      	b.n	80405d6 <Flash_Data+0xa6>
    while (Address < FLASH_USER_END_ADDR)
 80405de:	4b2b      	ldr	r3, [pc, #172]	; (804068c <Flash_Data+0x15c>)
 80405e0:	681b      	ldr	r3, [r3, #0]
 80405e2:	4a24      	ldr	r2, [pc, #144]	; (8040674 <Flash_Data+0x144>)
 80405e4:	4293      	cmp	r3, r2
 80405e6:	d3e5      	bcc.n	80405b4 <Flash_Data+0x84>
          
        }
    }
     /* Lock the Flash to disable the flash control register access (recommended
     to protect the FLASH memory against possible unwanted operation) *********/
    HAL_FLASH_Lock();
 80405e8:	f000 fd4e 	bl	8041088 <HAL_FLASH_Lock>

  /* Check if the programmed data is OK
      MemoryProgramStatus = 0: data programmed correctly
      MemoryProgramStatus != 0: number of words not programmed correctly ******/
    Address = FLASH_USER_START_ADDR;
 80405ec:	4b27      	ldr	r3, [pc, #156]	; (804068c <Flash_Data+0x15c>)
 80405ee:	4a1f      	ldr	r2, [pc, #124]	; (804066c <Flash_Data+0x13c>)
 80405f0:	601a      	str	r2, [r3, #0]
     MemoryProgramStatus = 0x0;
 80405f2:	4b28      	ldr	r3, [pc, #160]	; (8040694 <Flash_Data+0x164>)
 80405f4:	2200      	movs	r2, #0
 80405f6:	601a      	str	r2, [r3, #0]

    while (Address < FLASH_USER_END_ADDR)
 80405f8:	e014      	b.n	8040624 <Flash_Data+0xf4>
    {
        data32 = *(__IO uint32_t *)Address;
 80405fa:	4b24      	ldr	r3, [pc, #144]	; (804068c <Flash_Data+0x15c>)
 80405fc:	681b      	ldr	r3, [r3, #0]
 80405fe:	681b      	ldr	r3, [r3, #0]
 8040600:	4a25      	ldr	r2, [pc, #148]	; (8040698 <Flash_Data+0x168>)
 8040602:	6013      	str	r3, [r2, #0]

        if (data32 != DATA_32)
 8040604:	4b24      	ldr	r3, [pc, #144]	; (8040698 <Flash_Data+0x168>)
 8040606:	681b      	ldr	r3, [r3, #0]
 8040608:	f246 6266 	movw	r2, #26214	; 0x6666
 804060c:	4293      	cmp	r3, r2
 804060e:	d004      	beq.n	804061a <Flash_Data+0xea>
        {
            MemoryProgramStatus++;
 8040610:	4b20      	ldr	r3, [pc, #128]	; (8040694 <Flash_Data+0x164>)
 8040612:	681b      	ldr	r3, [r3, #0]
 8040614:	3301      	adds	r3, #1
 8040616:	4a1f      	ldr	r2, [pc, #124]	; (8040694 <Flash_Data+0x164>)
 8040618:	6013      	str	r3, [r2, #0]
        }
        Address = Address + 4;
 804061a:	4b1c      	ldr	r3, [pc, #112]	; (804068c <Flash_Data+0x15c>)
 804061c:	681b      	ldr	r3, [r3, #0]
 804061e:	3304      	adds	r3, #4
 8040620:	4a1a      	ldr	r2, [pc, #104]	; (804068c <Flash_Data+0x15c>)
 8040622:	6013      	str	r3, [r2, #0]
    while (Address < FLASH_USER_END_ADDR)
 8040624:	4b19      	ldr	r3, [pc, #100]	; (804068c <Flash_Data+0x15c>)
 8040626:	681b      	ldr	r3, [r3, #0]
 8040628:	4a12      	ldr	r2, [pc, #72]	; (8040674 <Flash_Data+0x144>)
 804062a:	4293      	cmp	r3, r2
 804062c:	d3e5      	bcc.n	80405fa <Flash_Data+0xca>
    }

     /*Check if there is an issue to program data*/
    if (MemoryProgramStatus == 0)
 804062e:	4b19      	ldr	r3, [pc, #100]	; (8040694 <Flash_Data+0x164>)
 8040630:	681b      	ldr	r3, [r3, #0]
 8040632:	2b00      	cmp	r3, #0
 8040634:	d103      	bne.n	804063e <Flash_Data+0x10e>
    {
        /* No error detected. Switch on LED2*/
        uart_send_msg("Done with Flash memory !!!\r\n");
 8040636:	4819      	ldr	r0, [pc, #100]	; (804069c <Flash_Data+0x16c>)
 8040638:	f000 faec 	bl	8040c14 <uart_send_msg>
            uart_send_msg("Error with flash memory\r\n");
            fail_cnt++;
        }
    }
  
}
 804063c:	e009      	b.n	8040652 <Flash_Data+0x122>
            uart_send_msg("Error with flash memory\r\n");
 804063e:	4818      	ldr	r0, [pc, #96]	; (80406a0 <Flash_Data+0x170>)
 8040640:	f000 fae8 	bl	8040c14 <uart_send_msg>
            fail_cnt++;
 8040644:	4b06      	ldr	r3, [pc, #24]	; (8040660 <Flash_Data+0x130>)
 8040646:	881b      	ldrh	r3, [r3, #0]
 8040648:	3301      	adds	r3, #1
 804064a:	b29a      	uxth	r2, r3
 804064c:	4b04      	ldr	r3, [pc, #16]	; (8040660 <Flash_Data+0x130>)
 804064e:	801a      	strh	r2, [r3, #0]
            uart_send_msg("Error with flash memory\r\n");
 8040650:	e7f5      	b.n	804063e <Flash_Data+0x10e>
}
 8040652:	bd80      	pop	{r7, pc}
 8040654:	f3af 8000 	nop.w
 8040658:	12345678 	.word	0x12345678
 804065c:	12345678 	.word	0x12345678
 8040660:	20000064 	.word	0x20000064
 8040664:	08043d10 	.word	0x08043d10
 8040668:	40022000 	.word	0x40022000
 804066c:	08002000 	.word	0x08002000
 8040670:	20000048 	.word	0x20000048
 8040674:	0803ffff 	.word	0x0803ffff
 8040678:	2000004c 	.word	0x2000004c
 804067c:	20000050 	.word	0x20000050
 8040680:	20000068 	.word	0x20000068
 8040684:	20000058 	.word	0x20000058
 8040688:	08043d34 	.word	0x08043d34
 804068c:	20000054 	.word	0x20000054
 8040690:	08043d4c 	.word	0x08043d4c
 8040694:	2000005c 	.word	0x2000005c
 8040698:	20000060 	.word	0x20000060
 804069c:	08043d60 	.word	0x08043d60
 80406a0:	08043d80 	.word	0x08043d80

080406a4 <GetPage>:
  * @brief  Gets the page of a given address
  * @param  Addr: Address of the FLASH Memory
  * @retval The page of a given address
  */
static uint32_t GetPage(uint32_t Addr)
{
 80406a4:	b480      	push	{r7}
 80406a6:	b085      	sub	sp, #20
 80406a8:	af00      	add	r7, sp, #0
 80406aa:	6078      	str	r0, [r7, #4]
  uint32_t page = 0;
 80406ac:	2300      	movs	r3, #0
 80406ae:	60fb      	str	r3, [r7, #12]

  if (Addr < (FLASH_BASE + FLASH_BANK_SIZE))
 80406b0:	4b19      	ldr	r3, [pc, #100]	; (8040718 <GetPage+0x74>)
 80406b2:	881b      	ldrh	r3, [r3, #0]
 80406b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80406b8:	4293      	cmp	r3, r2
 80406ba:	d008      	beq.n	80406ce <GetPage+0x2a>
 80406bc:	4b16      	ldr	r3, [pc, #88]	; (8040718 <GetPage+0x74>)
 80406be:	681b      	ldr	r3, [r3, #0]
 80406c0:	029b      	lsls	r3, r3, #10
 80406c2:	085a      	lsrs	r2, r3, #1
 80406c4:	4b15      	ldr	r3, [pc, #84]	; (804071c <GetPage+0x78>)
 80406c6:	4013      	ands	r3, r2
 80406c8:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80406cc:	e000      	b.n	80406d0 <GetPage+0x2c>
 80406ce:	4b14      	ldr	r3, [pc, #80]	; (8040720 <GetPage+0x7c>)
 80406d0:	687a      	ldr	r2, [r7, #4]
 80406d2:	4293      	cmp	r3, r2
 80406d4:	d905      	bls.n	80406e2 <GetPage+0x3e>
  {
    /* Bank 1 */
    page = (Addr - FLASH_BASE) / FLASH_PAGE_SIZE;
 80406d6:	687b      	ldr	r3, [r7, #4]
 80406d8:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 80406dc:	0adb      	lsrs	r3, r3, #11
 80406de:	60fb      	str	r3, [r7, #12]
 80406e0:	e013      	b.n	804070a <GetPage+0x66>
  }
  else
  {
    /* Bank 2 */
    page = (Addr - (FLASH_BASE + FLASH_BANK_SIZE)) / FLASH_PAGE_SIZE;
 80406e2:	4b0d      	ldr	r3, [pc, #52]	; (8040718 <GetPage+0x74>)
 80406e4:	881b      	ldrh	r3, [r3, #0]
 80406e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80406ea:	4293      	cmp	r3, r2
 80406ec:	d008      	beq.n	8040700 <GetPage+0x5c>
 80406ee:	4b0a      	ldr	r3, [pc, #40]	; (8040718 <GetPage+0x74>)
 80406f0:	681b      	ldr	r3, [r3, #0]
 80406f2:	029b      	lsls	r3, r3, #10
 80406f4:	085a      	lsrs	r2, r3, #1
 80406f6:	4b09      	ldr	r3, [pc, #36]	; (804071c <GetPage+0x78>)
 80406f8:	4013      	ands	r3, r2
 80406fa:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80406fe:	e000      	b.n	8040702 <GetPage+0x5e>
 8040700:	4b07      	ldr	r3, [pc, #28]	; (8040720 <GetPage+0x7c>)
 8040702:	687a      	ldr	r2, [r7, #4]
 8040704:	1ad3      	subs	r3, r2, r3
 8040706:	0adb      	lsrs	r3, r3, #11
 8040708:	60fb      	str	r3, [r7, #12]
  }

  return page;
 804070a:	68fb      	ldr	r3, [r7, #12]
}
 804070c:	4618      	mov	r0, r3
 804070e:	3714      	adds	r7, #20
 8040710:	46bd      	mov	sp, r7
 8040712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040716:	4770      	bx	lr
 8040718:	1fff75e0 	.word	0x1fff75e0
 804071c:	01fffe00 	.word	0x01fffe00
 8040720:	08040000 	.word	0x08040000

08040724 <GetBank>:
  * @brief  Gets the bank of a given address
  * @param  Addr: Address of the FLASH Memory
  * @retval The bank of a given address
  */
static uint32_t GetBank(uint32_t Addr)
{
 8040724:	b480      	push	{r7}
 8040726:	b083      	sub	sp, #12
 8040728:	af00      	add	r7, sp, #0
 804072a:	6078      	str	r0, [r7, #4]
  return FLASH_BANK_1;
 804072c:	2301      	movs	r3, #1
}
 804072e:	4618      	mov	r0, r3
 8040730:	370c      	adds	r7, #12
 8040732:	46bd      	mov	sp, r7
 8040734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040738:	4770      	bx	lr
	...

0804073c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 804073c:	b580      	push	{r7, lr}
 804073e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8040740:	f000 faa9 	bl	8040c96 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8040744:	f000 f814 	bl	8040770 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8040748:	f000 f8ec 	bl	8040924 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 804074c:	f000 f89e 	bl	804088c <MX_USART1_UART_Init>
  MX_TIM16_Init();
 8040750:	f000 f876 	bl	8040840 <MX_TIM16_Init>

  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim16);
 8040754:	4804      	ldr	r0, [pc, #16]	; (8040768 <main+0x2c>)
 8040756:	f002 f929 	bl	80429ac <HAL_TIM_Base_Start_IT>
  uart_send_msg("Hello from user app\r\n");
 804075a:	4804      	ldr	r0, [pc, #16]	; (804076c <main+0x30>)
 804075c:	f000 fa5a 	bl	8040c14 <uart_send_msg>
  /* USER CODE END 2 */
 Flash_Data();
 8040760:	f7ff fee6 	bl	8040530 <Flash_Data>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8040764:	e7fe      	b.n	8040764 <main+0x28>
 8040766:	bf00      	nop
 8040768:	20000078 	.word	0x20000078
 804076c:	08043d9c 	.word	0x08043d9c

08040770 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8040770:	b580      	push	{r7, lr}
 8040772:	b0a8      	sub	sp, #160	; 0xa0
 8040774:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8040776:	f107 0368 	add.w	r3, r7, #104	; 0x68
 804077a:	2238      	movs	r2, #56	; 0x38
 804077c:	2100      	movs	r1, #0
 804077e:	4618      	mov	r0, r3
 8040780:	f003 fab2 	bl	8043ce8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8040784:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8040788:	2200      	movs	r2, #0
 804078a:	601a      	str	r2, [r3, #0]
 804078c:	605a      	str	r2, [r3, #4]
 804078e:	609a      	str	r2, [r3, #8]
 8040790:	60da      	str	r2, [r3, #12]
 8040792:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8040794:	463b      	mov	r3, r7
 8040796:	2254      	movs	r2, #84	; 0x54
 8040798:	2100      	movs	r1, #0
 804079a:	4618      	mov	r0, r3
 804079c:	f003 faa4 	bl	8043ce8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80407a0:	2000      	movs	r0, #0
 80407a2:	f001 f875 	bl	8041890 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80407a6:	2302      	movs	r3, #2
 80407a8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80407aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80407ae:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80407b0:	2340      	movs	r3, #64	; 0x40
 80407b2:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80407b4:	2302      	movs	r3, #2
 80407b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80407ba:	2302      	movs	r3, #2
 80407bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80407c0:	2301      	movs	r3, #1
 80407c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 20;
 80407c6:	2314      	movs	r3, #20
 80407c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80407cc:	2302      	movs	r3, #2
 80407ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80407d2:	2302      	movs	r3, #2
 80407d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80407d8:	2302      	movs	r3, #2
 80407da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80407de:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80407e2:	4618      	mov	r0, r3
 80407e4:	f001 f908 	bl	80419f8 <HAL_RCC_OscConfig>
 80407e8:	4603      	mov	r3, r0
 80407ea:	2b00      	cmp	r3, #0
 80407ec:	d001      	beq.n	80407f2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80407ee:	f000 f92b 	bl	8040a48 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80407f2:	230f      	movs	r3, #15
 80407f4:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80407f6:	2303      	movs	r3, #3
 80407f8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80407fa:	2300      	movs	r3, #0
 80407fc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80407fe:	2300      	movs	r3, #0
 8040800:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8040802:	2300      	movs	r3, #0
 8040804:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8040806:	f107 0354 	add.w	r3, r7, #84	; 0x54
 804080a:	2104      	movs	r1, #4
 804080c:	4618      	mov	r0, r3
 804080e:	f001 fc0b 	bl	8042028 <HAL_RCC_ClockConfig>
 8040812:	4603      	mov	r3, r0
 8040814:	2b00      	cmp	r3, #0
 8040816:	d001      	beq.n	804081c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8040818:	f000 f916 	bl	8040a48 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 804081c:	2301      	movs	r3, #1
 804081e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8040820:	2300      	movs	r3, #0
 8040822:	607b      	str	r3, [r7, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8040824:	463b      	mov	r3, r7
 8040826:	4618      	mov	r0, r3
 8040828:	f001 fe1a 	bl	8042460 <HAL_RCCEx_PeriphCLKConfig>
 804082c:	4603      	mov	r3, r0
 804082e:	2b00      	cmp	r3, #0
 8040830:	d001      	beq.n	8040836 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8040832:	f000 f909 	bl	8040a48 <Error_Handler>
  }
}
 8040836:	bf00      	nop
 8040838:	37a0      	adds	r7, #160	; 0xa0
 804083a:	46bd      	mov	sp, r7
 804083c:	bd80      	pop	{r7, pc}
	...

08040840 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8040840:	b580      	push	{r7, lr}
 8040842:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8040844:	4b0f      	ldr	r3, [pc, #60]	; (8040884 <MX_TIM16_Init+0x44>)
 8040846:	4a10      	ldr	r2, [pc, #64]	; (8040888 <MX_TIM16_Init+0x48>)
 8040848:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 160;
 804084a:	4b0e      	ldr	r3, [pc, #56]	; (8040884 <MX_TIM16_Init+0x44>)
 804084c:	22a0      	movs	r2, #160	; 0xa0
 804084e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8040850:	4b0c      	ldr	r3, [pc, #48]	; (8040884 <MX_TIM16_Init+0x44>)
 8040852:	2200      	movs	r2, #0
 8040854:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8040856:	4b0b      	ldr	r3, [pc, #44]	; (8040884 <MX_TIM16_Init+0x44>)
 8040858:	f64f 72ff 	movw	r2, #65535	; 0xffff
 804085c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 804085e:	4b09      	ldr	r3, [pc, #36]	; (8040884 <MX_TIM16_Init+0x44>)
 8040860:	2200      	movs	r2, #0
 8040862:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8040864:	4b07      	ldr	r3, [pc, #28]	; (8040884 <MX_TIM16_Init+0x44>)
 8040866:	2200      	movs	r2, #0
 8040868:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 804086a:	4b06      	ldr	r3, [pc, #24]	; (8040884 <MX_TIM16_Init+0x44>)
 804086c:	2200      	movs	r2, #0
 804086e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8040870:	4804      	ldr	r0, [pc, #16]	; (8040884 <MX_TIM16_Init+0x44>)
 8040872:	f002 f843 	bl	80428fc <HAL_TIM_Base_Init>
 8040876:	4603      	mov	r3, r0
 8040878:	2b00      	cmp	r3, #0
 804087a:	d001      	beq.n	8040880 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 804087c:	f000 f8e4 	bl	8040a48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8040880:	bf00      	nop
 8040882:	bd80      	pop	{r7, pc}
 8040884:	20000078 	.word	0x20000078
 8040888:	40014400 	.word	0x40014400

0804088c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 804088c:	b580      	push	{r7, lr}
 804088e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8040890:	4b22      	ldr	r3, [pc, #136]	; (804091c <MX_USART1_UART_Init+0x90>)
 8040892:	4a23      	ldr	r2, [pc, #140]	; (8040920 <MX_USART1_UART_Init+0x94>)
 8040894:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8040896:	4b21      	ldr	r3, [pc, #132]	; (804091c <MX_USART1_UART_Init+0x90>)
 8040898:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 804089c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 804089e:	4b1f      	ldr	r3, [pc, #124]	; (804091c <MX_USART1_UART_Init+0x90>)
 80408a0:	2200      	movs	r2, #0
 80408a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80408a4:	4b1d      	ldr	r3, [pc, #116]	; (804091c <MX_USART1_UART_Init+0x90>)
 80408a6:	2200      	movs	r2, #0
 80408a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80408aa:	4b1c      	ldr	r3, [pc, #112]	; (804091c <MX_USART1_UART_Init+0x90>)
 80408ac:	2200      	movs	r2, #0
 80408ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80408b0:	4b1a      	ldr	r3, [pc, #104]	; (804091c <MX_USART1_UART_Init+0x90>)
 80408b2:	220c      	movs	r2, #12
 80408b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80408b6:	4b19      	ldr	r3, [pc, #100]	; (804091c <MX_USART1_UART_Init+0x90>)
 80408b8:	2200      	movs	r2, #0
 80408ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80408bc:	4b17      	ldr	r3, [pc, #92]	; (804091c <MX_USART1_UART_Init+0x90>)
 80408be:	2200      	movs	r2, #0
 80408c0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80408c2:	4b16      	ldr	r3, [pc, #88]	; (804091c <MX_USART1_UART_Init+0x90>)
 80408c4:	2200      	movs	r2, #0
 80408c6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80408c8:	4b14      	ldr	r3, [pc, #80]	; (804091c <MX_USART1_UART_Init+0x90>)
 80408ca:	2200      	movs	r2, #0
 80408cc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80408ce:	4b13      	ldr	r3, [pc, #76]	; (804091c <MX_USART1_UART_Init+0x90>)
 80408d0:	2200      	movs	r2, #0
 80408d2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80408d4:	4811      	ldr	r0, [pc, #68]	; (804091c <MX_USART1_UART_Init+0x90>)
 80408d6:	f002 fb77 	bl	8042fc8 <HAL_UART_Init>
 80408da:	4603      	mov	r3, r0
 80408dc:	2b00      	cmp	r3, #0
 80408de:	d001      	beq.n	80408e4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80408e0:	f000 f8b2 	bl	8040a48 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80408e4:	2100      	movs	r1, #0
 80408e6:	480d      	ldr	r0, [pc, #52]	; (804091c <MX_USART1_UART_Init+0x90>)
 80408e8:	f003 f8f9 	bl	8043ade <HAL_UARTEx_SetTxFifoThreshold>
 80408ec:	4603      	mov	r3, r0
 80408ee:	2b00      	cmp	r3, #0
 80408f0:	d001      	beq.n	80408f6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80408f2:	f000 f8a9 	bl	8040a48 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80408f6:	2100      	movs	r1, #0
 80408f8:	4808      	ldr	r0, [pc, #32]	; (804091c <MX_USART1_UART_Init+0x90>)
 80408fa:	f003 f92e 	bl	8043b5a <HAL_UARTEx_SetRxFifoThreshold>
 80408fe:	4603      	mov	r3, r0
 8040900:	2b00      	cmp	r3, #0
 8040902:	d001      	beq.n	8040908 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8040904:	f000 f8a0 	bl	8040a48 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8040908:	4804      	ldr	r0, [pc, #16]	; (804091c <MX_USART1_UART_Init+0x90>)
 804090a:	f003 f8af 	bl	8043a6c <HAL_UARTEx_DisableFifoMode>
 804090e:	4603      	mov	r3, r0
 8040910:	2b00      	cmp	r3, #0
 8040912:	d001      	beq.n	8040918 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8040914:	f000 f898 	bl	8040a48 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8040918:	bf00      	nop
 804091a:	bd80      	pop	{r7, pc}
 804091c:	200000c4 	.word	0x200000c4
 8040920:	40013800 	.word	0x40013800

08040924 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8040924:	b580      	push	{r7, lr}
 8040926:	b08a      	sub	sp, #40	; 0x28
 8040928:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 804092a:	f107 0314 	add.w	r3, r7, #20
 804092e:	2200      	movs	r2, #0
 8040930:	601a      	str	r2, [r3, #0]
 8040932:	605a      	str	r2, [r3, #4]
 8040934:	609a      	str	r2, [r3, #8]
 8040936:	60da      	str	r2, [r3, #12]
 8040938:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 804093a:	4b37      	ldr	r3, [pc, #220]	; (8040a18 <MX_GPIO_Init+0xf4>)
 804093c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 804093e:	4a36      	ldr	r2, [pc, #216]	; (8040a18 <MX_GPIO_Init+0xf4>)
 8040940:	f043 0304 	orr.w	r3, r3, #4
 8040944:	64d3      	str	r3, [r2, #76]	; 0x4c
 8040946:	4b34      	ldr	r3, [pc, #208]	; (8040a18 <MX_GPIO_Init+0xf4>)
 8040948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 804094a:	f003 0304 	and.w	r3, r3, #4
 804094e:	613b      	str	r3, [r7, #16]
 8040950:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8040952:	4b31      	ldr	r3, [pc, #196]	; (8040a18 <MX_GPIO_Init+0xf4>)
 8040954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040956:	4a30      	ldr	r2, [pc, #192]	; (8040a18 <MX_GPIO_Init+0xf4>)
 8040958:	f043 0320 	orr.w	r3, r3, #32
 804095c:	64d3      	str	r3, [r2, #76]	; 0x4c
 804095e:	4b2e      	ldr	r3, [pc, #184]	; (8040a18 <MX_GPIO_Init+0xf4>)
 8040960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040962:	f003 0320 	and.w	r3, r3, #32
 8040966:	60fb      	str	r3, [r7, #12]
 8040968:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 804096a:	4b2b      	ldr	r3, [pc, #172]	; (8040a18 <MX_GPIO_Init+0xf4>)
 804096c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 804096e:	4a2a      	ldr	r2, [pc, #168]	; (8040a18 <MX_GPIO_Init+0xf4>)
 8040970:	f043 0301 	orr.w	r3, r3, #1
 8040974:	64d3      	str	r3, [r2, #76]	; 0x4c
 8040976:	4b28      	ldr	r3, [pc, #160]	; (8040a18 <MX_GPIO_Init+0xf4>)
 8040978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 804097a:	f003 0301 	and.w	r3, r3, #1
 804097e:	60bb      	str	r3, [r7, #8]
 8040980:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8040982:	4b25      	ldr	r3, [pc, #148]	; (8040a18 <MX_GPIO_Init+0xf4>)
 8040984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040986:	4a24      	ldr	r2, [pc, #144]	; (8040a18 <MX_GPIO_Init+0xf4>)
 8040988:	f043 0302 	orr.w	r3, r3, #2
 804098c:	64d3      	str	r3, [r2, #76]	; 0x4c
 804098e:	4b22      	ldr	r3, [pc, #136]	; (8040a18 <MX_GPIO_Init+0xf4>)
 8040990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040992:	f003 0302 	and.w	r3, r3, #2
 8040996:	607b      	str	r3, [r7, #4]
 8040998:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 804099a:	2200      	movs	r2, #0
 804099c:	2120      	movs	r1, #32
 804099e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80409a2:	f000 ff1f 	bl	80417e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80409a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80409aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80409ac:	4b1b      	ldr	r3, [pc, #108]	; (8040a1c <MX_GPIO_Init+0xf8>)
 80409ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80409b0:	2300      	movs	r3, #0
 80409b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80409b4:	f107 0314 	add.w	r3, r7, #20
 80409b8:	4619      	mov	r1, r3
 80409ba:	4819      	ldr	r0, [pc, #100]	; (8040a20 <MX_GPIO_Init+0xfc>)
 80409bc:	f000 fd90 	bl	80414e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPUART1_TX_Pin LPUART1_RX_Pin */
  GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80409c0:	230c      	movs	r3, #12
 80409c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80409c4:	2302      	movs	r3, #2
 80409c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80409c8:	2300      	movs	r3, #0
 80409ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80409cc:	2300      	movs	r3, #0
 80409ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80409d0:	230c      	movs	r3, #12
 80409d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80409d4:	f107 0314 	add.w	r3, r7, #20
 80409d8:	4619      	mov	r1, r3
 80409da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80409de:	f000 fd7f 	bl	80414e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80409e2:	2320      	movs	r3, #32
 80409e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80409e6:	2301      	movs	r3, #1
 80409e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80409ea:	2300      	movs	r3, #0
 80409ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80409ee:	2300      	movs	r3, #0
 80409f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80409f2:	f107 0314 	add.w	r3, r7, #20
 80409f6:	4619      	mov	r1, r3
 80409f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80409fc:	f000 fd70 	bl	80414e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8040a00:	2200      	movs	r2, #0
 8040a02:	2100      	movs	r1, #0
 8040a04:	2028      	movs	r0, #40	; 0x28
 8040a06:	f000 fa92 	bl	8040f2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8040a0a:	2028      	movs	r0, #40	; 0x28
 8040a0c:	f000 faa9 	bl	8040f62 <HAL_NVIC_EnableIRQ>

}
 8040a10:	bf00      	nop
 8040a12:	3728      	adds	r7, #40	; 0x28
 8040a14:	46bd      	mov	sp, r7
 8040a16:	bd80      	pop	{r7, pc}
 8040a18:	40021000 	.word	0x40021000
 8040a1c:	10110000 	.word	0x10110000
 8040a20:	48000800 	.word	0x48000800

08040a24 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8040a24:	b580      	push	{r7, lr}
 8040a26:	b082      	sub	sp, #8
 8040a28:	af00      	add	r7, sp, #0
 8040a2a:	6078      	str	r0, [r7, #4]
	// toggle LED
	 HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8040a2c:	2120      	movs	r1, #32
 8040a2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8040a32:	f000 feef 	bl	8041814 <HAL_GPIO_TogglePin>
	 uart_send_msg(".");
 8040a36:	4803      	ldr	r0, [pc, #12]	; (8040a44 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8040a38:	f000 f8ec 	bl	8040c14 <uart_send_msg>
}
 8040a3c:	bf00      	nop
 8040a3e:	3708      	adds	r7, #8
 8040a40:	46bd      	mov	sp, r7
 8040a42:	bd80      	pop	{r7, pc}
 8040a44:	08043db4 	.word	0x08043db4

08040a48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8040a48:	b480      	push	{r7}
 8040a4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8040a4c:	b672      	cpsid	i
}
 8040a4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8040a50:	e7fe      	b.n	8040a50 <Error_Handler+0x8>
	...

08040a54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8040a54:	b580      	push	{r7, lr}
 8040a56:	b082      	sub	sp, #8
 8040a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8040a5a:	4b0f      	ldr	r3, [pc, #60]	; (8040a98 <HAL_MspInit+0x44>)
 8040a5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8040a5e:	4a0e      	ldr	r2, [pc, #56]	; (8040a98 <HAL_MspInit+0x44>)
 8040a60:	f043 0301 	orr.w	r3, r3, #1
 8040a64:	6613      	str	r3, [r2, #96]	; 0x60
 8040a66:	4b0c      	ldr	r3, [pc, #48]	; (8040a98 <HAL_MspInit+0x44>)
 8040a68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8040a6a:	f003 0301 	and.w	r3, r3, #1
 8040a6e:	607b      	str	r3, [r7, #4]
 8040a70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8040a72:	4b09      	ldr	r3, [pc, #36]	; (8040a98 <HAL_MspInit+0x44>)
 8040a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8040a76:	4a08      	ldr	r2, [pc, #32]	; (8040a98 <HAL_MspInit+0x44>)
 8040a78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8040a7c:	6593      	str	r3, [r2, #88]	; 0x58
 8040a7e:	4b06      	ldr	r3, [pc, #24]	; (8040a98 <HAL_MspInit+0x44>)
 8040a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8040a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8040a86:	603b      	str	r3, [r7, #0]
 8040a88:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8040a8a:	f000 ffa5 	bl	80419d8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8040a8e:	bf00      	nop
 8040a90:	3708      	adds	r7, #8
 8040a92:	46bd      	mov	sp, r7
 8040a94:	bd80      	pop	{r7, pc}
 8040a96:	bf00      	nop
 8040a98:	40021000 	.word	0x40021000

08040a9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8040a9c:	b580      	push	{r7, lr}
 8040a9e:	b084      	sub	sp, #16
 8040aa0:	af00      	add	r7, sp, #0
 8040aa2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8040aa4:	687b      	ldr	r3, [r7, #4]
 8040aa6:	681b      	ldr	r3, [r3, #0]
 8040aa8:	4a0d      	ldr	r2, [pc, #52]	; (8040ae0 <HAL_TIM_Base_MspInit+0x44>)
 8040aaa:	4293      	cmp	r3, r2
 8040aac:	d113      	bne.n	8040ad6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8040aae:	4b0d      	ldr	r3, [pc, #52]	; (8040ae4 <HAL_TIM_Base_MspInit+0x48>)
 8040ab0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8040ab2:	4a0c      	ldr	r2, [pc, #48]	; (8040ae4 <HAL_TIM_Base_MspInit+0x48>)
 8040ab4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8040ab8:	6613      	str	r3, [r2, #96]	; 0x60
 8040aba:	4b0a      	ldr	r3, [pc, #40]	; (8040ae4 <HAL_TIM_Base_MspInit+0x48>)
 8040abc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8040abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8040ac2:	60fb      	str	r3, [r7, #12]
 8040ac4:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8040ac6:	2200      	movs	r2, #0
 8040ac8:	2100      	movs	r1, #0
 8040aca:	2019      	movs	r0, #25
 8040acc:	f000 fa2f 	bl	8040f2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8040ad0:	2019      	movs	r0, #25
 8040ad2:	f000 fa46 	bl	8040f62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8040ad6:	bf00      	nop
 8040ad8:	3710      	adds	r7, #16
 8040ada:	46bd      	mov	sp, r7
 8040adc:	bd80      	pop	{r7, pc}
 8040ade:	bf00      	nop
 8040ae0:	40014400 	.word	0x40014400
 8040ae4:	40021000 	.word	0x40021000

08040ae8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8040ae8:	b580      	push	{r7, lr}
 8040aea:	b08a      	sub	sp, #40	; 0x28
 8040aec:	af00      	add	r7, sp, #0
 8040aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8040af0:	f107 0314 	add.w	r3, r7, #20
 8040af4:	2200      	movs	r2, #0
 8040af6:	601a      	str	r2, [r3, #0]
 8040af8:	605a      	str	r2, [r3, #4]
 8040afa:	609a      	str	r2, [r3, #8]
 8040afc:	60da      	str	r2, [r3, #12]
 8040afe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8040b00:	687b      	ldr	r3, [r7, #4]
 8040b02:	681b      	ldr	r3, [r3, #0]
 8040b04:	4a17      	ldr	r2, [pc, #92]	; (8040b64 <HAL_UART_MspInit+0x7c>)
 8040b06:	4293      	cmp	r3, r2
 8040b08:	d127      	bne.n	8040b5a <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8040b0a:	4b17      	ldr	r3, [pc, #92]	; (8040b68 <HAL_UART_MspInit+0x80>)
 8040b0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8040b0e:	4a16      	ldr	r2, [pc, #88]	; (8040b68 <HAL_UART_MspInit+0x80>)
 8040b10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8040b14:	6613      	str	r3, [r2, #96]	; 0x60
 8040b16:	4b14      	ldr	r3, [pc, #80]	; (8040b68 <HAL_UART_MspInit+0x80>)
 8040b18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8040b1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8040b1e:	613b      	str	r3, [r7, #16]
 8040b20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8040b22:	4b11      	ldr	r3, [pc, #68]	; (8040b68 <HAL_UART_MspInit+0x80>)
 8040b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040b26:	4a10      	ldr	r2, [pc, #64]	; (8040b68 <HAL_UART_MspInit+0x80>)
 8040b28:	f043 0304 	orr.w	r3, r3, #4
 8040b2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8040b2e:	4b0e      	ldr	r3, [pc, #56]	; (8040b68 <HAL_UART_MspInit+0x80>)
 8040b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040b32:	f003 0304 	and.w	r3, r3, #4
 8040b36:	60fb      	str	r3, [r7, #12]
 8040b38:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8040b3a:	2330      	movs	r3, #48	; 0x30
 8040b3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8040b3e:	2302      	movs	r3, #2
 8040b40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040b42:	2300      	movs	r3, #0
 8040b44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8040b46:	2300      	movs	r3, #0
 8040b48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8040b4a:	2307      	movs	r3, #7
 8040b4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8040b4e:	f107 0314 	add.w	r3, r7, #20
 8040b52:	4619      	mov	r1, r3
 8040b54:	4805      	ldr	r0, [pc, #20]	; (8040b6c <HAL_UART_MspInit+0x84>)
 8040b56:	f000 fcc3 	bl	80414e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8040b5a:	bf00      	nop
 8040b5c:	3728      	adds	r7, #40	; 0x28
 8040b5e:	46bd      	mov	sp, r7
 8040b60:	bd80      	pop	{r7, pc}
 8040b62:	bf00      	nop
 8040b64:	40013800 	.word	0x40013800
 8040b68:	40021000 	.word	0x40021000
 8040b6c:	48000800 	.word	0x48000800

08040b70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8040b70:	b480      	push	{r7}
 8040b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8040b74:	e7fe      	b.n	8040b74 <NMI_Handler+0x4>

08040b76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8040b76:	b480      	push	{r7}
 8040b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8040b7a:	e7fe      	b.n	8040b7a <HardFault_Handler+0x4>

08040b7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8040b7c:	b480      	push	{r7}
 8040b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8040b80:	e7fe      	b.n	8040b80 <MemManage_Handler+0x4>

08040b82 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8040b82:	b480      	push	{r7}
 8040b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8040b86:	e7fe      	b.n	8040b86 <BusFault_Handler+0x4>

08040b88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8040b88:	b480      	push	{r7}
 8040b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8040b8c:	e7fe      	b.n	8040b8c <UsageFault_Handler+0x4>

08040b8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8040b8e:	b480      	push	{r7}
 8040b90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8040b92:	bf00      	nop
 8040b94:	46bd      	mov	sp, r7
 8040b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040b9a:	4770      	bx	lr

08040b9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8040b9c:	b480      	push	{r7}
 8040b9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8040ba0:	bf00      	nop
 8040ba2:	46bd      	mov	sp, r7
 8040ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040ba8:	4770      	bx	lr

08040baa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8040baa:	b480      	push	{r7}
 8040bac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8040bae:	bf00      	nop
 8040bb0:	46bd      	mov	sp, r7
 8040bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040bb6:	4770      	bx	lr

08040bb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8040bb8:	b580      	push	{r7, lr}
 8040bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8040bbc:	f000 f8be 	bl	8040d3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8040bc0:	bf00      	nop
 8040bc2:	bd80      	pop	{r7, pc}

08040bc4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8040bc4:	b580      	push	{r7, lr}
 8040bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8040bc8:	4802      	ldr	r0, [pc, #8]	; (8040bd4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8040bca:	f001 ff67 	bl	8042a9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8040bce:	bf00      	nop
 8040bd0:	bd80      	pop	{r7, pc}
 8040bd2:	bf00      	nop
 8040bd4:	20000078 	.word	0x20000078

08040bd8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8040bd8:	b580      	push	{r7, lr}
 8040bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8040bdc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8040be0:	f000 fe32 	bl	8041848 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8040be4:	bf00      	nop
 8040be6:	bd80      	pop	{r7, pc}

08040be8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8040be8:	b480      	push	{r7}
 8040bea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8040bec:	4b07      	ldr	r3, [pc, #28]	; (8040c0c <SystemInit+0x24>)
 8040bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8040bf2:	4a06      	ldr	r2, [pc, #24]	; (8040c0c <SystemInit+0x24>)
 8040bf4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8040bf8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8040bfc:	4b03      	ldr	r3, [pc, #12]	; (8040c0c <SystemInit+0x24>)
 8040bfe:	4a04      	ldr	r2, [pc, #16]	; (8040c10 <SystemInit+0x28>)
 8040c00:	609a      	str	r2, [r3, #8]
#endif
}
 8040c02:	bf00      	nop
 8040c04:	46bd      	mov	sp, r7
 8040c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040c0a:	4770      	bx	lr
 8040c0c:	e000ed00 	.word	0xe000ed00
 8040c10:	08040000 	.word	0x08040000

08040c14 <uart_send_msg>:
  * @brief	Sends a message through UART
  * @param	user_data
  * @retval	status
  */
HAL_StatusTypeDef uart_send_msg(char *user_data)
{
 8040c14:	b580      	push	{r7, lr}
 8040c16:	b084      	sub	sp, #16
 8040c18:	af00      	add	r7, sp, #0
 8040c1a:	6078      	str	r0, [r7, #4]
	// do nothing
	return HAL_OK;
#else
	HAL_StatusTypeDef Status;
	Status = HAL_UART_Transmit(&huart1, (uint8_t*)user_data,
			strlen(user_data), UART_DELAY);
 8040c1c:	6878      	ldr	r0, [r7, #4]
 8040c1e:	f7ff fafb 	bl	8040218 <strlen>
 8040c22:	4603      	mov	r3, r0
	Status = HAL_UART_Transmit(&huart1, (uint8_t*)user_data,
 8040c24:	b29a      	uxth	r2, r3
 8040c26:	2364      	movs	r3, #100	; 0x64
 8040c28:	6879      	ldr	r1, [r7, #4]
 8040c2a:	4805      	ldr	r0, [pc, #20]	; (8040c40 <uart_send_msg+0x2c>)
 8040c2c:	f002 fa1c 	bl	8043068 <HAL_UART_Transmit>
 8040c30:	4603      	mov	r3, r0
 8040c32:	73fb      	strb	r3, [r7, #15]

	return Status;
 8040c34:	7bfb      	ldrb	r3, [r7, #15]
#endif
}
 8040c36:	4618      	mov	r0, r3
 8040c38:	3710      	adds	r7, #16
 8040c3a:	46bd      	mov	sp, r7
 8040c3c:	bd80      	pop	{r7, pc}
 8040c3e:	bf00      	nop
 8040c40:	200000c4 	.word	0x200000c4

08040c44 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8040c44:	480d      	ldr	r0, [pc, #52]	; (8040c7c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8040c46:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8040c48:	480d      	ldr	r0, [pc, #52]	; (8040c80 <LoopForever+0x6>)
  ldr r1, =_edata
 8040c4a:	490e      	ldr	r1, [pc, #56]	; (8040c84 <LoopForever+0xa>)
  ldr r2, =_sidata
 8040c4c:	4a0e      	ldr	r2, [pc, #56]	; (8040c88 <LoopForever+0xe>)
  movs r3, #0
 8040c4e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8040c50:	e002      	b.n	8040c58 <LoopCopyDataInit>

08040c52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8040c52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8040c54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8040c56:	3304      	adds	r3, #4

08040c58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8040c58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8040c5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8040c5c:	d3f9      	bcc.n	8040c52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8040c5e:	4a0b      	ldr	r2, [pc, #44]	; (8040c8c <LoopForever+0x12>)
  ldr r4, =_ebss
 8040c60:	4c0b      	ldr	r4, [pc, #44]	; (8040c90 <LoopForever+0x16>)
  movs r3, #0
 8040c62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8040c64:	e001      	b.n	8040c6a <LoopFillZerobss>

08040c66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8040c66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8040c68:	3204      	adds	r2, #4

08040c6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8040c6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8040c6c:	d3fb      	bcc.n	8040c66 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8040c6e:	f7ff ffbb 	bl	8040be8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8040c72:	f003 f815 	bl	8043ca0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8040c76:	f7ff fd61 	bl	804073c <main>

08040c7a <LoopForever>:

LoopForever:
    b LoopForever
 8040c7a:	e7fe      	b.n	8040c7a <LoopForever>
  ldr   r0, =_estack
 8040c7c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8040c80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8040c84:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8040c88:	08043e08 	.word	0x08043e08
  ldr r2, =_sbss
 8040c8c:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8040c90:	20000154 	.word	0x20000154

08040c94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8040c94:	e7fe      	b.n	8040c94 <ADC1_2_IRQHandler>

08040c96 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8040c96:	b580      	push	{r7, lr}
 8040c98:	b082      	sub	sp, #8
 8040c9a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8040c9c:	2300      	movs	r3, #0
 8040c9e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8040ca0:	2003      	movs	r0, #3
 8040ca2:	f000 f939 	bl	8040f18 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8040ca6:	2000      	movs	r0, #0
 8040ca8:	f000 f80e 	bl	8040cc8 <HAL_InitTick>
 8040cac:	4603      	mov	r3, r0
 8040cae:	2b00      	cmp	r3, #0
 8040cb0:	d002      	beq.n	8040cb8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8040cb2:	2301      	movs	r3, #1
 8040cb4:	71fb      	strb	r3, [r7, #7]
 8040cb6:	e001      	b.n	8040cbc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8040cb8:	f7ff fecc 	bl	8040a54 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8040cbc:	79fb      	ldrb	r3, [r7, #7]

}
 8040cbe:	4618      	mov	r0, r3
 8040cc0:	3708      	adds	r7, #8
 8040cc2:	46bd      	mov	sp, r7
 8040cc4:	bd80      	pop	{r7, pc}
	...

08040cc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8040cc8:	b580      	push	{r7, lr}
 8040cca:	b084      	sub	sp, #16
 8040ccc:	af00      	add	r7, sp, #0
 8040cce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8040cd0:	2300      	movs	r3, #0
 8040cd2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8040cd4:	4b16      	ldr	r3, [pc, #88]	; (8040d30 <HAL_InitTick+0x68>)
 8040cd6:	681b      	ldr	r3, [r3, #0]
 8040cd8:	2b00      	cmp	r3, #0
 8040cda:	d022      	beq.n	8040d22 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8040cdc:	4b15      	ldr	r3, [pc, #84]	; (8040d34 <HAL_InitTick+0x6c>)
 8040cde:	681a      	ldr	r2, [r3, #0]
 8040ce0:	4b13      	ldr	r3, [pc, #76]	; (8040d30 <HAL_InitTick+0x68>)
 8040ce2:	681b      	ldr	r3, [r3, #0]
 8040ce4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8040ce8:	fbb1 f3f3 	udiv	r3, r1, r3
 8040cec:	fbb2 f3f3 	udiv	r3, r2, r3
 8040cf0:	4618      	mov	r0, r3
 8040cf2:	f000 f944 	bl	8040f7e <HAL_SYSTICK_Config>
 8040cf6:	4603      	mov	r3, r0
 8040cf8:	2b00      	cmp	r3, #0
 8040cfa:	d10f      	bne.n	8040d1c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8040cfc:	687b      	ldr	r3, [r7, #4]
 8040cfe:	2b0f      	cmp	r3, #15
 8040d00:	d809      	bhi.n	8040d16 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8040d02:	2200      	movs	r2, #0
 8040d04:	6879      	ldr	r1, [r7, #4]
 8040d06:	f04f 30ff 	mov.w	r0, #4294967295
 8040d0a:	f000 f910 	bl	8040f2e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8040d0e:	4a0a      	ldr	r2, [pc, #40]	; (8040d38 <HAL_InitTick+0x70>)
 8040d10:	687b      	ldr	r3, [r7, #4]
 8040d12:	6013      	str	r3, [r2, #0]
 8040d14:	e007      	b.n	8040d26 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8040d16:	2301      	movs	r3, #1
 8040d18:	73fb      	strb	r3, [r7, #15]
 8040d1a:	e004      	b.n	8040d26 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8040d1c:	2301      	movs	r3, #1
 8040d1e:	73fb      	strb	r3, [r7, #15]
 8040d20:	e001      	b.n	8040d26 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8040d22:	2301      	movs	r3, #1
 8040d24:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8040d26:	7bfb      	ldrb	r3, [r7, #15]
}
 8040d28:	4618      	mov	r0, r3
 8040d2a:	3710      	adds	r7, #16
 8040d2c:	46bd      	mov	sp, r7
 8040d2e:	bd80      	pop	{r7, pc}
 8040d30:	20000008 	.word	0x20000008
 8040d34:	20000000 	.word	0x20000000
 8040d38:	20000004 	.word	0x20000004

08040d3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8040d3c:	b480      	push	{r7}
 8040d3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8040d40:	4b05      	ldr	r3, [pc, #20]	; (8040d58 <HAL_IncTick+0x1c>)
 8040d42:	681a      	ldr	r2, [r3, #0]
 8040d44:	4b05      	ldr	r3, [pc, #20]	; (8040d5c <HAL_IncTick+0x20>)
 8040d46:	681b      	ldr	r3, [r3, #0]
 8040d48:	4413      	add	r3, r2
 8040d4a:	4a03      	ldr	r2, [pc, #12]	; (8040d58 <HAL_IncTick+0x1c>)
 8040d4c:	6013      	str	r3, [r2, #0]
}
 8040d4e:	bf00      	nop
 8040d50:	46bd      	mov	sp, r7
 8040d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040d56:	4770      	bx	lr
 8040d58:	20000150 	.word	0x20000150
 8040d5c:	20000008 	.word	0x20000008

08040d60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8040d60:	b480      	push	{r7}
 8040d62:	af00      	add	r7, sp, #0
  return uwTick;
 8040d64:	4b03      	ldr	r3, [pc, #12]	; (8040d74 <HAL_GetTick+0x14>)
 8040d66:	681b      	ldr	r3, [r3, #0]
}
 8040d68:	4618      	mov	r0, r3
 8040d6a:	46bd      	mov	sp, r7
 8040d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040d70:	4770      	bx	lr
 8040d72:	bf00      	nop
 8040d74:	20000150 	.word	0x20000150

08040d78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8040d78:	b480      	push	{r7}
 8040d7a:	b085      	sub	sp, #20
 8040d7c:	af00      	add	r7, sp, #0
 8040d7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8040d80:	687b      	ldr	r3, [r7, #4]
 8040d82:	f003 0307 	and.w	r3, r3, #7
 8040d86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8040d88:	4b0c      	ldr	r3, [pc, #48]	; (8040dbc <__NVIC_SetPriorityGrouping+0x44>)
 8040d8a:	68db      	ldr	r3, [r3, #12]
 8040d8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8040d8e:	68ba      	ldr	r2, [r7, #8]
 8040d90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8040d94:	4013      	ands	r3, r2
 8040d96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8040d98:	68fb      	ldr	r3, [r7, #12]
 8040d9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8040d9c:	68bb      	ldr	r3, [r7, #8]
 8040d9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8040da0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8040da4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8040da8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8040daa:	4a04      	ldr	r2, [pc, #16]	; (8040dbc <__NVIC_SetPriorityGrouping+0x44>)
 8040dac:	68bb      	ldr	r3, [r7, #8]
 8040dae:	60d3      	str	r3, [r2, #12]
}
 8040db0:	bf00      	nop
 8040db2:	3714      	adds	r7, #20
 8040db4:	46bd      	mov	sp, r7
 8040db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040dba:	4770      	bx	lr
 8040dbc:	e000ed00 	.word	0xe000ed00

08040dc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8040dc0:	b480      	push	{r7}
 8040dc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8040dc4:	4b04      	ldr	r3, [pc, #16]	; (8040dd8 <__NVIC_GetPriorityGrouping+0x18>)
 8040dc6:	68db      	ldr	r3, [r3, #12]
 8040dc8:	0a1b      	lsrs	r3, r3, #8
 8040dca:	f003 0307 	and.w	r3, r3, #7
}
 8040dce:	4618      	mov	r0, r3
 8040dd0:	46bd      	mov	sp, r7
 8040dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040dd6:	4770      	bx	lr
 8040dd8:	e000ed00 	.word	0xe000ed00

08040ddc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8040ddc:	b480      	push	{r7}
 8040dde:	b083      	sub	sp, #12
 8040de0:	af00      	add	r7, sp, #0
 8040de2:	4603      	mov	r3, r0
 8040de4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8040de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040dea:	2b00      	cmp	r3, #0
 8040dec:	db0b      	blt.n	8040e06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8040dee:	79fb      	ldrb	r3, [r7, #7]
 8040df0:	f003 021f 	and.w	r2, r3, #31
 8040df4:	4907      	ldr	r1, [pc, #28]	; (8040e14 <__NVIC_EnableIRQ+0x38>)
 8040df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040dfa:	095b      	lsrs	r3, r3, #5
 8040dfc:	2001      	movs	r0, #1
 8040dfe:	fa00 f202 	lsl.w	r2, r0, r2
 8040e02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8040e06:	bf00      	nop
 8040e08:	370c      	adds	r7, #12
 8040e0a:	46bd      	mov	sp, r7
 8040e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040e10:	4770      	bx	lr
 8040e12:	bf00      	nop
 8040e14:	e000e100 	.word	0xe000e100

08040e18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8040e18:	b480      	push	{r7}
 8040e1a:	b083      	sub	sp, #12
 8040e1c:	af00      	add	r7, sp, #0
 8040e1e:	4603      	mov	r3, r0
 8040e20:	6039      	str	r1, [r7, #0]
 8040e22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8040e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040e28:	2b00      	cmp	r3, #0
 8040e2a:	db0a      	blt.n	8040e42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8040e2c:	683b      	ldr	r3, [r7, #0]
 8040e2e:	b2da      	uxtb	r2, r3
 8040e30:	490c      	ldr	r1, [pc, #48]	; (8040e64 <__NVIC_SetPriority+0x4c>)
 8040e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040e36:	0112      	lsls	r2, r2, #4
 8040e38:	b2d2      	uxtb	r2, r2
 8040e3a:	440b      	add	r3, r1
 8040e3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8040e40:	e00a      	b.n	8040e58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8040e42:	683b      	ldr	r3, [r7, #0]
 8040e44:	b2da      	uxtb	r2, r3
 8040e46:	4908      	ldr	r1, [pc, #32]	; (8040e68 <__NVIC_SetPriority+0x50>)
 8040e48:	79fb      	ldrb	r3, [r7, #7]
 8040e4a:	f003 030f 	and.w	r3, r3, #15
 8040e4e:	3b04      	subs	r3, #4
 8040e50:	0112      	lsls	r2, r2, #4
 8040e52:	b2d2      	uxtb	r2, r2
 8040e54:	440b      	add	r3, r1
 8040e56:	761a      	strb	r2, [r3, #24]
}
 8040e58:	bf00      	nop
 8040e5a:	370c      	adds	r7, #12
 8040e5c:	46bd      	mov	sp, r7
 8040e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040e62:	4770      	bx	lr
 8040e64:	e000e100 	.word	0xe000e100
 8040e68:	e000ed00 	.word	0xe000ed00

08040e6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8040e6c:	b480      	push	{r7}
 8040e6e:	b089      	sub	sp, #36	; 0x24
 8040e70:	af00      	add	r7, sp, #0
 8040e72:	60f8      	str	r0, [r7, #12]
 8040e74:	60b9      	str	r1, [r7, #8]
 8040e76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8040e78:	68fb      	ldr	r3, [r7, #12]
 8040e7a:	f003 0307 	and.w	r3, r3, #7
 8040e7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8040e80:	69fb      	ldr	r3, [r7, #28]
 8040e82:	f1c3 0307 	rsb	r3, r3, #7
 8040e86:	2b04      	cmp	r3, #4
 8040e88:	bf28      	it	cs
 8040e8a:	2304      	movcs	r3, #4
 8040e8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8040e8e:	69fb      	ldr	r3, [r7, #28]
 8040e90:	3304      	adds	r3, #4
 8040e92:	2b06      	cmp	r3, #6
 8040e94:	d902      	bls.n	8040e9c <NVIC_EncodePriority+0x30>
 8040e96:	69fb      	ldr	r3, [r7, #28]
 8040e98:	3b03      	subs	r3, #3
 8040e9a:	e000      	b.n	8040e9e <NVIC_EncodePriority+0x32>
 8040e9c:	2300      	movs	r3, #0
 8040e9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8040ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8040ea4:	69bb      	ldr	r3, [r7, #24]
 8040ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8040eaa:	43da      	mvns	r2, r3
 8040eac:	68bb      	ldr	r3, [r7, #8]
 8040eae:	401a      	ands	r2, r3
 8040eb0:	697b      	ldr	r3, [r7, #20]
 8040eb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8040eb4:	f04f 31ff 	mov.w	r1, #4294967295
 8040eb8:	697b      	ldr	r3, [r7, #20]
 8040eba:	fa01 f303 	lsl.w	r3, r1, r3
 8040ebe:	43d9      	mvns	r1, r3
 8040ec0:	687b      	ldr	r3, [r7, #4]
 8040ec2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8040ec4:	4313      	orrs	r3, r2
         );
}
 8040ec6:	4618      	mov	r0, r3
 8040ec8:	3724      	adds	r7, #36	; 0x24
 8040eca:	46bd      	mov	sp, r7
 8040ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040ed0:	4770      	bx	lr
	...

08040ed4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8040ed4:	b580      	push	{r7, lr}
 8040ed6:	b082      	sub	sp, #8
 8040ed8:	af00      	add	r7, sp, #0
 8040eda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8040edc:	687b      	ldr	r3, [r7, #4]
 8040ede:	3b01      	subs	r3, #1
 8040ee0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8040ee4:	d301      	bcc.n	8040eea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8040ee6:	2301      	movs	r3, #1
 8040ee8:	e00f      	b.n	8040f0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8040eea:	4a0a      	ldr	r2, [pc, #40]	; (8040f14 <SysTick_Config+0x40>)
 8040eec:	687b      	ldr	r3, [r7, #4]
 8040eee:	3b01      	subs	r3, #1
 8040ef0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8040ef2:	210f      	movs	r1, #15
 8040ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8040ef8:	f7ff ff8e 	bl	8040e18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8040efc:	4b05      	ldr	r3, [pc, #20]	; (8040f14 <SysTick_Config+0x40>)
 8040efe:	2200      	movs	r2, #0
 8040f00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8040f02:	4b04      	ldr	r3, [pc, #16]	; (8040f14 <SysTick_Config+0x40>)
 8040f04:	2207      	movs	r2, #7
 8040f06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8040f08:	2300      	movs	r3, #0
}
 8040f0a:	4618      	mov	r0, r3
 8040f0c:	3708      	adds	r7, #8
 8040f0e:	46bd      	mov	sp, r7
 8040f10:	bd80      	pop	{r7, pc}
 8040f12:	bf00      	nop
 8040f14:	e000e010 	.word	0xe000e010

08040f18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8040f18:	b580      	push	{r7, lr}
 8040f1a:	b082      	sub	sp, #8
 8040f1c:	af00      	add	r7, sp, #0
 8040f1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8040f20:	6878      	ldr	r0, [r7, #4]
 8040f22:	f7ff ff29 	bl	8040d78 <__NVIC_SetPriorityGrouping>
}
 8040f26:	bf00      	nop
 8040f28:	3708      	adds	r7, #8
 8040f2a:	46bd      	mov	sp, r7
 8040f2c:	bd80      	pop	{r7, pc}

08040f2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8040f2e:	b580      	push	{r7, lr}
 8040f30:	b086      	sub	sp, #24
 8040f32:	af00      	add	r7, sp, #0
 8040f34:	4603      	mov	r3, r0
 8040f36:	60b9      	str	r1, [r7, #8]
 8040f38:	607a      	str	r2, [r7, #4]
 8040f3a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8040f3c:	f7ff ff40 	bl	8040dc0 <__NVIC_GetPriorityGrouping>
 8040f40:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8040f42:	687a      	ldr	r2, [r7, #4]
 8040f44:	68b9      	ldr	r1, [r7, #8]
 8040f46:	6978      	ldr	r0, [r7, #20]
 8040f48:	f7ff ff90 	bl	8040e6c <NVIC_EncodePriority>
 8040f4c:	4602      	mov	r2, r0
 8040f4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8040f52:	4611      	mov	r1, r2
 8040f54:	4618      	mov	r0, r3
 8040f56:	f7ff ff5f 	bl	8040e18 <__NVIC_SetPriority>
}
 8040f5a:	bf00      	nop
 8040f5c:	3718      	adds	r7, #24
 8040f5e:	46bd      	mov	sp, r7
 8040f60:	bd80      	pop	{r7, pc}

08040f62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8040f62:	b580      	push	{r7, lr}
 8040f64:	b082      	sub	sp, #8
 8040f66:	af00      	add	r7, sp, #0
 8040f68:	4603      	mov	r3, r0
 8040f6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8040f6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040f70:	4618      	mov	r0, r3
 8040f72:	f7ff ff33 	bl	8040ddc <__NVIC_EnableIRQ>
}
 8040f76:	bf00      	nop
 8040f78:	3708      	adds	r7, #8
 8040f7a:	46bd      	mov	sp, r7
 8040f7c:	bd80      	pop	{r7, pc}

08040f7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8040f7e:	b580      	push	{r7, lr}
 8040f80:	b082      	sub	sp, #8
 8040f82:	af00      	add	r7, sp, #0
 8040f84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8040f86:	6878      	ldr	r0, [r7, #4]
 8040f88:	f7ff ffa4 	bl	8040ed4 <SysTick_Config>
 8040f8c:	4603      	mov	r3, r0
}
 8040f8e:	4618      	mov	r0, r3
 8040f90:	3708      	adds	r7, #8
 8040f92:	46bd      	mov	sp, r7
 8040f94:	bd80      	pop	{r7, pc}
	...

08040f98 <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8040f98:	b580      	push	{r7, lr}
 8040f9a:	b086      	sub	sp, #24
 8040f9c:	af00      	add	r7, sp, #0
 8040f9e:	60f8      	str	r0, [r7, #12]
 8040fa0:	60b9      	str	r1, [r7, #8]
 8040fa2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8040fa6:	2300      	movs	r3, #0
 8040fa8:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8040faa:	4b24      	ldr	r3, [pc, #144]	; (804103c <HAL_FLASH_Program+0xa4>)
 8040fac:	781b      	ldrb	r3, [r3, #0]
 8040fae:	2b01      	cmp	r3, #1
 8040fb0:	d101      	bne.n	8040fb6 <HAL_FLASH_Program+0x1e>
 8040fb2:	2302      	movs	r3, #2
 8040fb4:	e03e      	b.n	8041034 <HAL_FLASH_Program+0x9c>
 8040fb6:	4b21      	ldr	r3, [pc, #132]	; (804103c <HAL_FLASH_Program+0xa4>)
 8040fb8:	2201      	movs	r2, #1
 8040fba:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8040fbc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8040fc0:	f000 f87c 	bl	80410bc <FLASH_WaitForLastOperation>
 8040fc4:	4603      	mov	r3, r0
 8040fc6:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8040fc8:	7dfb      	ldrb	r3, [r7, #23]
 8040fca:	2b00      	cmp	r3, #0
 8040fcc:	d12e      	bne.n	804102c <HAL_FLASH_Program+0x94>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8040fce:	4b1b      	ldr	r3, [pc, #108]	; (804103c <HAL_FLASH_Program+0xa4>)
 8040fd0:	2200      	movs	r2, #0
 8040fd2:	605a      	str	r2, [r3, #4]

    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8040fd4:	68fb      	ldr	r3, [r7, #12]
 8040fd6:	2b00      	cmp	r3, #0
 8040fd8:	d107      	bne.n	8040fea <HAL_FLASH_Program+0x52>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8040fda:	e9d7 2300 	ldrd	r2, r3, [r7]
 8040fde:	68b8      	ldr	r0, [r7, #8]
 8040fe0:	f000 f8c0 	bl	8041164 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8040fe4:	2301      	movs	r3, #1
 8040fe6:	613b      	str	r3, [r7, #16]
 8040fe8:	e010      	b.n	804100c <HAL_FLASH_Program+0x74>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8040fea:	68fb      	ldr	r3, [r7, #12]
 8040fec:	2b01      	cmp	r3, #1
 8040fee:	d002      	beq.n	8040ff6 <HAL_FLASH_Program+0x5e>
 8040ff0:	68fb      	ldr	r3, [r7, #12]
 8040ff2:	2b02      	cmp	r3, #2
 8040ff4:	d10a      	bne.n	804100c <HAL_FLASH_Program+0x74>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8040ff6:	683b      	ldr	r3, [r7, #0]
 8040ff8:	4619      	mov	r1, r3
 8040ffa:	68b8      	ldr	r0, [r7, #8]
 8040ffc:	f000 f8d8 	bl	80411b0 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8041000:	68fb      	ldr	r3, [r7, #12]
 8041002:	2b02      	cmp	r3, #2
 8041004:	d102      	bne.n	804100c <HAL_FLASH_Program+0x74>
      {
        prog_bit = FLASH_CR_FSTPG;
 8041006:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 804100a:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 804100c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8041010:	f000 f854 	bl	80410bc <FLASH_WaitForLastOperation>
 8041014:	4603      	mov	r3, r0
 8041016:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8041018:	693b      	ldr	r3, [r7, #16]
 804101a:	2b00      	cmp	r3, #0
 804101c:	d006      	beq.n	804102c <HAL_FLASH_Program+0x94>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 804101e:	4b08      	ldr	r3, [pc, #32]	; (8041040 <HAL_FLASH_Program+0xa8>)
 8041020:	695a      	ldr	r2, [r3, #20]
 8041022:	693b      	ldr	r3, [r7, #16]
 8041024:	43db      	mvns	r3, r3
 8041026:	4906      	ldr	r1, [pc, #24]	; (8041040 <HAL_FLASH_Program+0xa8>)
 8041028:	4013      	ands	r3, r2
 804102a:	614b      	str	r3, [r1, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 804102c:	4b03      	ldr	r3, [pc, #12]	; (804103c <HAL_FLASH_Program+0xa4>)
 804102e:	2200      	movs	r2, #0
 8041030:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8041032:	7dfb      	ldrb	r3, [r7, #23]
}
 8041034:	4618      	mov	r0, r3
 8041036:	3718      	adds	r7, #24
 8041038:	46bd      	mov	sp, r7
 804103a:	bd80      	pop	{r7, pc}
 804103c:	2000000c 	.word	0x2000000c
 8041040:	40022000 	.word	0x40022000

08041044 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8041044:	b480      	push	{r7}
 8041046:	b083      	sub	sp, #12
 8041048:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 804104a:	2300      	movs	r3, #0
 804104c:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 804104e:	4b0b      	ldr	r3, [pc, #44]	; (804107c <HAL_FLASH_Unlock+0x38>)
 8041050:	695b      	ldr	r3, [r3, #20]
 8041052:	2b00      	cmp	r3, #0
 8041054:	da0b      	bge.n	804106e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8041056:	4b09      	ldr	r3, [pc, #36]	; (804107c <HAL_FLASH_Unlock+0x38>)
 8041058:	4a09      	ldr	r2, [pc, #36]	; (8041080 <HAL_FLASH_Unlock+0x3c>)
 804105a:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 804105c:	4b07      	ldr	r3, [pc, #28]	; (804107c <HAL_FLASH_Unlock+0x38>)
 804105e:	4a09      	ldr	r2, [pc, #36]	; (8041084 <HAL_FLASH_Unlock+0x40>)
 8041060:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8041062:	4b06      	ldr	r3, [pc, #24]	; (804107c <HAL_FLASH_Unlock+0x38>)
 8041064:	695b      	ldr	r3, [r3, #20]
 8041066:	2b00      	cmp	r3, #0
 8041068:	da01      	bge.n	804106e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 804106a:	2301      	movs	r3, #1
 804106c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 804106e:	79fb      	ldrb	r3, [r7, #7]
}
 8041070:	4618      	mov	r0, r3
 8041072:	370c      	adds	r7, #12
 8041074:	46bd      	mov	sp, r7
 8041076:	f85d 7b04 	ldr.w	r7, [sp], #4
 804107a:	4770      	bx	lr
 804107c:	40022000 	.word	0x40022000
 8041080:	45670123 	.word	0x45670123
 8041084:	cdef89ab 	.word	0xcdef89ab

08041088 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8041088:	b480      	push	{r7}
 804108a:	b083      	sub	sp, #12
 804108c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 804108e:	2301      	movs	r3, #1
 8041090:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8041092:	4b09      	ldr	r3, [pc, #36]	; (80410b8 <HAL_FLASH_Lock+0x30>)
 8041094:	695b      	ldr	r3, [r3, #20]
 8041096:	4a08      	ldr	r2, [pc, #32]	; (80410b8 <HAL_FLASH_Lock+0x30>)
 8041098:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 804109c:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 804109e:	4b06      	ldr	r3, [pc, #24]	; (80410b8 <HAL_FLASH_Lock+0x30>)
 80410a0:	695b      	ldr	r3, [r3, #20]
 80410a2:	2b00      	cmp	r3, #0
 80410a4:	da01      	bge.n	80410aa <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 80410a6:	2300      	movs	r3, #0
 80410a8:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80410aa:	79fb      	ldrb	r3, [r7, #7]
}
 80410ac:	4618      	mov	r0, r3
 80410ae:	370c      	adds	r7, #12
 80410b0:	46bd      	mov	sp, r7
 80410b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80410b6:	4770      	bx	lr
 80410b8:	40022000 	.word	0x40022000

080410bc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80410bc:	b580      	push	{r7, lr}
 80410be:	b084      	sub	sp, #16
 80410c0:	af00      	add	r7, sp, #0
 80410c2:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 80410c4:	f7ff fe4c 	bl	8040d60 <HAL_GetTick>
 80410c8:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80410ca:	e009      	b.n	80410e0 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 80410cc:	f7ff fe48 	bl	8040d60 <HAL_GetTick>
 80410d0:	4602      	mov	r2, r0
 80410d2:	68fb      	ldr	r3, [r7, #12]
 80410d4:	1ad3      	subs	r3, r2, r3
 80410d6:	687a      	ldr	r2, [r7, #4]
 80410d8:	429a      	cmp	r2, r3
 80410da:	d201      	bcs.n	80410e0 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 80410dc:	2303      	movs	r3, #3
 80410de:	e038      	b.n	8041152 <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80410e0:	4b1e      	ldr	r3, [pc, #120]	; (804115c <FLASH_WaitForLastOperation+0xa0>)
 80410e2:	691b      	ldr	r3, [r3, #16]
 80410e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80410e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80410ec:	d0ee      	beq.n	80410cc <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 80410ee:	4b1b      	ldr	r3, [pc, #108]	; (804115c <FLASH_WaitForLastOperation+0xa0>)
 80410f0:	691a      	ldr	r2, [r3, #16]
 80410f2:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 80410f6:	4013      	ands	r3, r2
 80410f8:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 80410fa:	68bb      	ldr	r3, [r7, #8]
 80410fc:	2b00      	cmp	r3, #0
 80410fe:	d01e      	beq.n	804113e <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 8041100:	4b17      	ldr	r3, [pc, #92]	; (8041160 <FLASH_WaitForLastOperation+0xa4>)
 8041102:	685a      	ldr	r2, [r3, #4]
 8041104:	68bb      	ldr	r3, [r7, #8]
 8041106:	4313      	orrs	r3, r2
 8041108:	4a15      	ldr	r2, [pc, #84]	; (8041160 <FLASH_WaitForLastOperation+0xa4>)
 804110a:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 804110c:	68bb      	ldr	r3, [r7, #8]
 804110e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8041112:	2b00      	cmp	r3, #0
 8041114:	d007      	beq.n	8041126 <FLASH_WaitForLastOperation+0x6a>
 8041116:	4b11      	ldr	r3, [pc, #68]	; (804115c <FLASH_WaitForLastOperation+0xa0>)
 8041118:	699a      	ldr	r2, [r3, #24]
 804111a:	68bb      	ldr	r3, [r7, #8]
 804111c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8041120:	490e      	ldr	r1, [pc, #56]	; (804115c <FLASH_WaitForLastOperation+0xa0>)
 8041122:	4313      	orrs	r3, r2
 8041124:	618b      	str	r3, [r1, #24]
 8041126:	68bb      	ldr	r3, [r7, #8]
 8041128:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 804112c:	2b00      	cmp	r3, #0
 804112e:	d004      	beq.n	804113a <FLASH_WaitForLastOperation+0x7e>
 8041130:	4a0a      	ldr	r2, [pc, #40]	; (804115c <FLASH_WaitForLastOperation+0xa0>)
 8041132:	68bb      	ldr	r3, [r7, #8]
 8041134:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8041138:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 804113a:	2301      	movs	r3, #1
 804113c:	e009      	b.n	8041152 <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 804113e:	4b07      	ldr	r3, [pc, #28]	; (804115c <FLASH_WaitForLastOperation+0xa0>)
 8041140:	691b      	ldr	r3, [r3, #16]
 8041142:	f003 0301 	and.w	r3, r3, #1
 8041146:	2b01      	cmp	r3, #1
 8041148:	d102      	bne.n	8041150 <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 804114a:	4b04      	ldr	r3, [pc, #16]	; (804115c <FLASH_WaitForLastOperation+0xa0>)
 804114c:	2201      	movs	r2, #1
 804114e:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8041150:	2300      	movs	r3, #0
}
 8041152:	4618      	mov	r0, r3
 8041154:	3710      	adds	r7, #16
 8041156:	46bd      	mov	sp, r7
 8041158:	bd80      	pop	{r7, pc}
 804115a:	bf00      	nop
 804115c:	40022000 	.word	0x40022000
 8041160:	2000000c 	.word	0x2000000c

08041164 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8041164:	b480      	push	{r7}
 8041166:	b085      	sub	sp, #20
 8041168:	af00      	add	r7, sp, #0
 804116a:	60f8      	str	r0, [r7, #12]
 804116c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8041170:	4b0e      	ldr	r3, [pc, #56]	; (80411ac <FLASH_Program_DoubleWord+0x48>)
 8041172:	695b      	ldr	r3, [r3, #20]
 8041174:	4a0d      	ldr	r2, [pc, #52]	; (80411ac <FLASH_Program_DoubleWord+0x48>)
 8041176:	f043 0301 	orr.w	r3, r3, #1
 804117a:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 804117c:	68fb      	ldr	r3, [r7, #12]
 804117e:	683a      	ldr	r2, [r7, #0]
 8041180:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8041182:	f3bf 8f6f 	isb	sy
}
 8041186:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8041188:	e9d7 0100 	ldrd	r0, r1, [r7]
 804118c:	f04f 0200 	mov.w	r2, #0
 8041190:	f04f 0300 	mov.w	r3, #0
 8041194:	000a      	movs	r2, r1
 8041196:	2300      	movs	r3, #0
 8041198:	68f9      	ldr	r1, [r7, #12]
 804119a:	3104      	adds	r1, #4
 804119c:	4613      	mov	r3, r2
 804119e:	600b      	str	r3, [r1, #0]
}
 80411a0:	bf00      	nop
 80411a2:	3714      	adds	r7, #20
 80411a4:	46bd      	mov	sp, r7
 80411a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80411aa:	4770      	bx	lr
 80411ac:	40022000 	.word	0x40022000

080411b0 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 80411b0:	b480      	push	{r7}
 80411b2:	b089      	sub	sp, #36	; 0x24
 80411b4:	af00      	add	r7, sp, #0
 80411b6:	6078      	str	r0, [r7, #4]
 80411b8:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 80411ba:	2340      	movs	r3, #64	; 0x40
 80411bc:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 80411be:	687b      	ldr	r3, [r7, #4]
 80411c0:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 80411c2:	683b      	ldr	r3, [r7, #0]
 80411c4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80411c6:	4b14      	ldr	r3, [pc, #80]	; (8041218 <FLASH_Program_Fast+0x68>)
 80411c8:	695b      	ldr	r3, [r3, #20]
 80411ca:	4a13      	ldr	r2, [pc, #76]	; (8041218 <FLASH_Program_Fast+0x68>)
 80411cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80411d0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80411d2:	f3ef 8310 	mrs	r3, PRIMASK
 80411d6:	60fb      	str	r3, [r7, #12]
  return(result);
 80411d8:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 80411da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80411dc:	b672      	cpsid	i
}
 80411de:	bf00      	nop
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 80411e0:	697b      	ldr	r3, [r7, #20]
 80411e2:	681a      	ldr	r2, [r3, #0]
 80411e4:	69bb      	ldr	r3, [r7, #24]
 80411e6:	601a      	str	r2, [r3, #0]
    dest_addr++;
 80411e8:	69bb      	ldr	r3, [r7, #24]
 80411ea:	3304      	adds	r3, #4
 80411ec:	61bb      	str	r3, [r7, #24]
    src_addr++;
 80411ee:	697b      	ldr	r3, [r7, #20]
 80411f0:	3304      	adds	r3, #4
 80411f2:	617b      	str	r3, [r7, #20]
    row_index--;
 80411f4:	7ffb      	ldrb	r3, [r7, #31]
 80411f6:	3b01      	subs	r3, #1
 80411f8:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 80411fa:	7ffb      	ldrb	r3, [r7, #31]
 80411fc:	2b00      	cmp	r3, #0
 80411fe:	d1ef      	bne.n	80411e0 <FLASH_Program_Fast+0x30>
 8041200:	693b      	ldr	r3, [r7, #16]
 8041202:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8041204:	68bb      	ldr	r3, [r7, #8]
 8041206:	f383 8810 	msr	PRIMASK, r3
}
 804120a:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 804120c:	bf00      	nop
 804120e:	3724      	adds	r7, #36	; 0x24
 8041210:	46bd      	mov	sp, r7
 8041212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041216:	4770      	bx	lr
 8041218:	40022000 	.word	0x40022000

0804121c <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 804121c:	b580      	push	{r7, lr}
 804121e:	b084      	sub	sp, #16
 8041220:	af00      	add	r7, sp, #0
 8041222:	6078      	str	r0, [r7, #4]
 8041224:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8041226:	4b4c      	ldr	r3, [pc, #304]	; (8041358 <HAL_FLASHEx_Erase+0x13c>)
 8041228:	781b      	ldrb	r3, [r3, #0]
 804122a:	2b01      	cmp	r3, #1
 804122c:	d101      	bne.n	8041232 <HAL_FLASHEx_Erase+0x16>
 804122e:	2302      	movs	r3, #2
 8041230:	e08d      	b.n	804134e <HAL_FLASHEx_Erase+0x132>
 8041232:	4b49      	ldr	r3, [pc, #292]	; (8041358 <HAL_FLASHEx_Erase+0x13c>)
 8041234:	2201      	movs	r2, #1
 8041236:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8041238:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 804123c:	f7ff ff3e 	bl	80410bc <FLASH_WaitForLastOperation>
 8041240:	4603      	mov	r3, r0
 8041242:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8041244:	7bfb      	ldrb	r3, [r7, #15]
 8041246:	2b00      	cmp	r3, #0
 8041248:	d17d      	bne.n	8041346 <HAL_FLASHEx_Erase+0x12a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 804124a:	4b43      	ldr	r3, [pc, #268]	; (8041358 <HAL_FLASHEx_Erase+0x13c>)
 804124c:	2200      	movs	r2, #0
 804124e:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8041250:	4b42      	ldr	r3, [pc, #264]	; (804135c <HAL_FLASHEx_Erase+0x140>)
 8041252:	681b      	ldr	r3, [r3, #0]
 8041254:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8041258:	2b00      	cmp	r3, #0
 804125a:	d019      	beq.n	8041290 <HAL_FLASHEx_Erase+0x74>
    {
      /* Disable instruction cache  */
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 804125c:	4b3f      	ldr	r3, [pc, #252]	; (804135c <HAL_FLASHEx_Erase+0x140>)
 804125e:	681b      	ldr	r3, [r3, #0]
 8041260:	4a3e      	ldr	r2, [pc, #248]	; (804135c <HAL_FLASHEx_Erase+0x140>)
 8041262:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8041266:	6013      	str	r3, [r2, #0]

      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8041268:	4b3c      	ldr	r3, [pc, #240]	; (804135c <HAL_FLASHEx_Erase+0x140>)
 804126a:	681b      	ldr	r3, [r3, #0]
 804126c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8041270:	2b00      	cmp	r3, #0
 8041272:	d009      	beq.n	8041288 <HAL_FLASHEx_Erase+0x6c>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8041274:	4b39      	ldr	r3, [pc, #228]	; (804135c <HAL_FLASHEx_Erase+0x140>)
 8041276:	681b      	ldr	r3, [r3, #0]
 8041278:	4a38      	ldr	r2, [pc, #224]	; (804135c <HAL_FLASHEx_Erase+0x140>)
 804127a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 804127e:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8041280:	4b35      	ldr	r3, [pc, #212]	; (8041358 <HAL_FLASHEx_Erase+0x13c>)
 8041282:	2203      	movs	r2, #3
 8041284:	771a      	strb	r2, [r3, #28]
 8041286:	e016      	b.n	80412b6 <HAL_FLASHEx_Erase+0x9a>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8041288:	4b33      	ldr	r3, [pc, #204]	; (8041358 <HAL_FLASHEx_Erase+0x13c>)
 804128a:	2201      	movs	r2, #1
 804128c:	771a      	strb	r2, [r3, #28]
 804128e:	e012      	b.n	80412b6 <HAL_FLASHEx_Erase+0x9a>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8041290:	4b32      	ldr	r3, [pc, #200]	; (804135c <HAL_FLASHEx_Erase+0x140>)
 8041292:	681b      	ldr	r3, [r3, #0]
 8041294:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8041298:	2b00      	cmp	r3, #0
 804129a:	d009      	beq.n	80412b0 <HAL_FLASHEx_Erase+0x94>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 804129c:	4b2f      	ldr	r3, [pc, #188]	; (804135c <HAL_FLASHEx_Erase+0x140>)
 804129e:	681b      	ldr	r3, [r3, #0]
 80412a0:	4a2e      	ldr	r2, [pc, #184]	; (804135c <HAL_FLASHEx_Erase+0x140>)
 80412a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80412a6:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80412a8:	4b2b      	ldr	r3, [pc, #172]	; (8041358 <HAL_FLASHEx_Erase+0x13c>)
 80412aa:	2202      	movs	r2, #2
 80412ac:	771a      	strb	r2, [r3, #28]
 80412ae:	e002      	b.n	80412b6 <HAL_FLASHEx_Erase+0x9a>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80412b0:	4b29      	ldr	r3, [pc, #164]	; (8041358 <HAL_FLASHEx_Erase+0x13c>)
 80412b2:	2200      	movs	r2, #0
 80412b4:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80412b6:	687b      	ldr	r3, [r7, #4]
 80412b8:	681b      	ldr	r3, [r3, #0]
 80412ba:	2b01      	cmp	r3, #1
 80412bc:	d113      	bne.n	80412e6 <HAL_FLASHEx_Erase+0xca>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 80412be:	687b      	ldr	r3, [r7, #4]
 80412c0:	685b      	ldr	r3, [r3, #4]
 80412c2:	4618      	mov	r0, r3
 80412c4:	f000 f84c 	bl	8041360 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80412c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80412cc:	f7ff fef6 	bl	80410bc <FLASH_WaitForLastOperation>
 80412d0:	4603      	mov	r3, r0
 80412d2:	73fb      	strb	r3, [r7, #15]

#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 80412d4:	4b21      	ldr	r3, [pc, #132]	; (804135c <HAL_FLASHEx_Erase+0x140>)
 80412d6:	695b      	ldr	r3, [r3, #20]
 80412d8:	4a20      	ldr	r2, [pc, #128]	; (804135c <HAL_FLASHEx_Erase+0x140>)
 80412da:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80412de:	f023 0304 	bic.w	r3, r3, #4
 80412e2:	6153      	str	r3, [r2, #20]
 80412e4:	e02d      	b.n	8041342 <HAL_FLASHEx_Erase+0x126>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80412e6:	683b      	ldr	r3, [r7, #0]
 80412e8:	f04f 32ff 	mov.w	r2, #4294967295
 80412ec:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80412ee:	687b      	ldr	r3, [r7, #4]
 80412f0:	689b      	ldr	r3, [r3, #8]
 80412f2:	60bb      	str	r3, [r7, #8]
 80412f4:	e01d      	b.n	8041332 <HAL_FLASHEx_Erase+0x116>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 80412f6:	687b      	ldr	r3, [r7, #4]
 80412f8:	685b      	ldr	r3, [r3, #4]
 80412fa:	4619      	mov	r1, r3
 80412fc:	68b8      	ldr	r0, [r7, #8]
 80412fe:	f000 f867 	bl	80413d0 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8041302:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8041306:	f7ff fed9 	bl	80410bc <FLASH_WaitForLastOperation>
 804130a:	4603      	mov	r3, r0
 804130c:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 804130e:	4b13      	ldr	r3, [pc, #76]	; (804135c <HAL_FLASHEx_Erase+0x140>)
 8041310:	695b      	ldr	r3, [r3, #20]
 8041312:	4a12      	ldr	r2, [pc, #72]	; (804135c <HAL_FLASHEx_Erase+0x140>)
 8041314:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8041318:	f023 0302 	bic.w	r3, r3, #2
 804131c:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 804131e:	7bfb      	ldrb	r3, [r7, #15]
 8041320:	2b00      	cmp	r3, #0
 8041322:	d003      	beq.n	804132c <HAL_FLASHEx_Erase+0x110>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 8041324:	683b      	ldr	r3, [r7, #0]
 8041326:	68ba      	ldr	r2, [r7, #8]
 8041328:	601a      	str	r2, [r3, #0]
          break;
 804132a:	e00a      	b.n	8041342 <HAL_FLASHEx_Erase+0x126>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 804132c:	68bb      	ldr	r3, [r7, #8]
 804132e:	3301      	adds	r3, #1
 8041330:	60bb      	str	r3, [r7, #8]
 8041332:	687b      	ldr	r3, [r7, #4]
 8041334:	689a      	ldr	r2, [r3, #8]
 8041336:	687b      	ldr	r3, [r7, #4]
 8041338:	68db      	ldr	r3, [r3, #12]
 804133a:	4413      	add	r3, r2
 804133c:	68ba      	ldr	r2, [r7, #8]
 804133e:	429a      	cmp	r2, r3
 8041340:	d3d9      	bcc.n	80412f6 <HAL_FLASHEx_Erase+0xda>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8041342:	f000 f889 	bl	8041458 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8041346:	4b04      	ldr	r3, [pc, #16]	; (8041358 <HAL_FLASHEx_Erase+0x13c>)
 8041348:	2200      	movs	r2, #0
 804134a:	701a      	strb	r2, [r3, #0]

  return status;
 804134c:	7bfb      	ldrb	r3, [r7, #15]
}
 804134e:	4618      	mov	r0, r3
 8041350:	3710      	adds	r7, #16
 8041352:	46bd      	mov	sp, r7
 8041354:	bd80      	pop	{r7, pc}
 8041356:	bf00      	nop
 8041358:	2000000c 	.word	0x2000000c
 804135c:	40022000 	.word	0x40022000

08041360 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8041360:	b480      	push	{r7}
 8041362:	b083      	sub	sp, #12
 8041364:	af00      	add	r7, sp, #0
 8041366:	6078      	str	r0, [r7, #4]
#if defined (FLASH_OPTR_DBANK)
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) != 0U)
 8041368:	4b18      	ldr	r3, [pc, #96]	; (80413cc <FLASH_MassErase+0x6c>)
 804136a:	6a1b      	ldr	r3, [r3, #32]
 804136c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8041370:	2b00      	cmp	r3, #0
 8041372:	d016      	beq.n	80413a2 <FLASH_MassErase+0x42>
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 8041374:	687b      	ldr	r3, [r7, #4]
 8041376:	f003 0301 	and.w	r3, r3, #1
 804137a:	2b00      	cmp	r3, #0
 804137c:	d005      	beq.n	804138a <FLASH_MassErase+0x2a>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 804137e:	4b13      	ldr	r3, [pc, #76]	; (80413cc <FLASH_MassErase+0x6c>)
 8041380:	695b      	ldr	r3, [r3, #20]
 8041382:	4a12      	ldr	r2, [pc, #72]	; (80413cc <FLASH_MassErase+0x6c>)
 8041384:	f043 0304 	orr.w	r3, r3, #4
 8041388:	6153      	str	r3, [r2, #20]
    }

#if defined (FLASH_OPTR_DBANK)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if ((Banks & FLASH_BANK_2) != 0U)
 804138a:	687b      	ldr	r3, [r7, #4]
 804138c:	f003 0302 	and.w	r3, r3, #2
 8041390:	2b00      	cmp	r3, #0
 8041392:	d00e      	beq.n	80413b2 <FLASH_MassErase+0x52>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 8041394:	4b0d      	ldr	r3, [pc, #52]	; (80413cc <FLASH_MassErase+0x6c>)
 8041396:	695b      	ldr	r3, [r3, #20]
 8041398:	4a0c      	ldr	r2, [pc, #48]	; (80413cc <FLASH_MassErase+0x6c>)
 804139a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 804139e:	6153      	str	r3, [r2, #20]
 80413a0:	e007      	b.n	80413b2 <FLASH_MassErase+0x52>
#endif
  }
#if defined (FLASH_OPTR_DBANK)
  else
  {
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 80413a2:	4b0a      	ldr	r3, [pc, #40]	; (80413cc <FLASH_MassErase+0x6c>)
 80413a4:	695b      	ldr	r3, [r3, #20]
 80413a6:	4a09      	ldr	r2, [pc, #36]	; (80413cc <FLASH_MassErase+0x6c>)
 80413a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80413ac:	f043 0304 	orr.w	r3, r3, #4
 80413b0:	6153      	str	r3, [r2, #20]
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80413b2:	4b06      	ldr	r3, [pc, #24]	; (80413cc <FLASH_MassErase+0x6c>)
 80413b4:	695b      	ldr	r3, [r3, #20]
 80413b6:	4a05      	ldr	r2, [pc, #20]	; (80413cc <FLASH_MassErase+0x6c>)
 80413b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80413bc:	6153      	str	r3, [r2, #20]
}
 80413be:	bf00      	nop
 80413c0:	370c      	adds	r7, #12
 80413c2:	46bd      	mov	sp, r7
 80413c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80413c8:	4770      	bx	lr
 80413ca:	bf00      	nop
 80413cc:	40022000 	.word	0x40022000

080413d0 <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 80413d0:	b480      	push	{r7}
 80413d2:	b083      	sub	sp, #12
 80413d4:	af00      	add	r7, sp, #0
 80413d6:	6078      	str	r0, [r7, #4]
 80413d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

#if defined (FLASH_OPTR_DBANK)
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 80413da:	4b1e      	ldr	r3, [pc, #120]	; (8041454 <FLASH_PageErase+0x84>)
 80413dc:	6a1b      	ldr	r3, [r3, #32]
 80413de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80413e2:	2b00      	cmp	r3, #0
 80413e4:	d106      	bne.n	80413f4 <FLASH_PageErase+0x24>
  {
    CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 80413e6:	4b1b      	ldr	r3, [pc, #108]	; (8041454 <FLASH_PageErase+0x84>)
 80413e8:	695b      	ldr	r3, [r3, #20]
 80413ea:	4a1a      	ldr	r2, [pc, #104]	; (8041454 <FLASH_PageErase+0x84>)
 80413ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80413f0:	6153      	str	r3, [r2, #20]
 80413f2:	e011      	b.n	8041418 <FLASH_PageErase+0x48>
  }
  else
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if ((Banks & FLASH_BANK_1) != 0U)
 80413f4:	683b      	ldr	r3, [r7, #0]
 80413f6:	f003 0301 	and.w	r3, r3, #1
 80413fa:	2b00      	cmp	r3, #0
 80413fc:	d006      	beq.n	804140c <FLASH_PageErase+0x3c>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 80413fe:	4b15      	ldr	r3, [pc, #84]	; (8041454 <FLASH_PageErase+0x84>)
 8041400:	695b      	ldr	r3, [r3, #20]
 8041402:	4a14      	ldr	r2, [pc, #80]	; (8041454 <FLASH_PageErase+0x84>)
 8041404:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8041408:	6153      	str	r3, [r2, #20]
 804140a:	e005      	b.n	8041418 <FLASH_PageErase+0x48>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 804140c:	4b11      	ldr	r3, [pc, #68]	; (8041454 <FLASH_PageErase+0x84>)
 804140e:	695b      	ldr	r3, [r3, #20]
 8041410:	4a10      	ldr	r2, [pc, #64]	; (8041454 <FLASH_PageErase+0x84>)
 8041412:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8041416:	6153      	str	r3, [r2, #20]
    }
  }
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8041418:	4b0e      	ldr	r3, [pc, #56]	; (8041454 <FLASH_PageErase+0x84>)
 804141a:	695b      	ldr	r3, [r3, #20]
 804141c:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 8041420:	687b      	ldr	r3, [r7, #4]
 8041422:	00db      	lsls	r3, r3, #3
 8041424:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8041428:	490a      	ldr	r1, [pc, #40]	; (8041454 <FLASH_PageErase+0x84>)
 804142a:	4313      	orrs	r3, r2
 804142c:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 804142e:	4b09      	ldr	r3, [pc, #36]	; (8041454 <FLASH_PageErase+0x84>)
 8041430:	695b      	ldr	r3, [r3, #20]
 8041432:	4a08      	ldr	r2, [pc, #32]	; (8041454 <FLASH_PageErase+0x84>)
 8041434:	f043 0302 	orr.w	r3, r3, #2
 8041438:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 804143a:	4b06      	ldr	r3, [pc, #24]	; (8041454 <FLASH_PageErase+0x84>)
 804143c:	695b      	ldr	r3, [r3, #20]
 804143e:	4a05      	ldr	r2, [pc, #20]	; (8041454 <FLASH_PageErase+0x84>)
 8041440:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8041444:	6153      	str	r3, [r2, #20]
}
 8041446:	bf00      	nop
 8041448:	370c      	adds	r7, #12
 804144a:	46bd      	mov	sp, r7
 804144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041450:	4770      	bx	lr
 8041452:	bf00      	nop
 8041454:	40022000 	.word	0x40022000

08041458 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8041458:	b480      	push	{r7}
 804145a:	b083      	sub	sp, #12
 804145c:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 804145e:	4b1e      	ldr	r3, [pc, #120]	; (80414d8 <FLASH_FlushCaches+0x80>)
 8041460:	7f1b      	ldrb	r3, [r3, #28]
 8041462:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8041464:	79fb      	ldrb	r3, [r7, #7]
 8041466:	2b01      	cmp	r3, #1
 8041468:	d002      	beq.n	8041470 <FLASH_FlushCaches+0x18>
 804146a:	79fb      	ldrb	r3, [r7, #7]
 804146c:	2b03      	cmp	r3, #3
 804146e:	d111      	bne.n	8041494 <FLASH_FlushCaches+0x3c>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8041470:	4b1a      	ldr	r3, [pc, #104]	; (80414dc <FLASH_FlushCaches+0x84>)
 8041472:	681b      	ldr	r3, [r3, #0]
 8041474:	4a19      	ldr	r2, [pc, #100]	; (80414dc <FLASH_FlushCaches+0x84>)
 8041476:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 804147a:	6013      	str	r3, [r2, #0]
 804147c:	4b17      	ldr	r3, [pc, #92]	; (80414dc <FLASH_FlushCaches+0x84>)
 804147e:	681b      	ldr	r3, [r3, #0]
 8041480:	4a16      	ldr	r2, [pc, #88]	; (80414dc <FLASH_FlushCaches+0x84>)
 8041482:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8041486:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8041488:	4b14      	ldr	r3, [pc, #80]	; (80414dc <FLASH_FlushCaches+0x84>)
 804148a:	681b      	ldr	r3, [r3, #0]
 804148c:	4a13      	ldr	r2, [pc, #76]	; (80414dc <FLASH_FlushCaches+0x84>)
 804148e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8041492:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8041494:	79fb      	ldrb	r3, [r7, #7]
 8041496:	2b02      	cmp	r3, #2
 8041498:	d002      	beq.n	80414a0 <FLASH_FlushCaches+0x48>
 804149a:	79fb      	ldrb	r3, [r7, #7]
 804149c:	2b03      	cmp	r3, #3
 804149e:	d111      	bne.n	80414c4 <FLASH_FlushCaches+0x6c>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80414a0:	4b0e      	ldr	r3, [pc, #56]	; (80414dc <FLASH_FlushCaches+0x84>)
 80414a2:	681b      	ldr	r3, [r3, #0]
 80414a4:	4a0d      	ldr	r2, [pc, #52]	; (80414dc <FLASH_FlushCaches+0x84>)
 80414a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80414aa:	6013      	str	r3, [r2, #0]
 80414ac:	4b0b      	ldr	r3, [pc, #44]	; (80414dc <FLASH_FlushCaches+0x84>)
 80414ae:	681b      	ldr	r3, [r3, #0]
 80414b0:	4a0a      	ldr	r2, [pc, #40]	; (80414dc <FLASH_FlushCaches+0x84>)
 80414b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80414b6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80414b8:	4b08      	ldr	r3, [pc, #32]	; (80414dc <FLASH_FlushCaches+0x84>)
 80414ba:	681b      	ldr	r3, [r3, #0]
 80414bc:	4a07      	ldr	r2, [pc, #28]	; (80414dc <FLASH_FlushCaches+0x84>)
 80414be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80414c2:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80414c4:	4b04      	ldr	r3, [pc, #16]	; (80414d8 <FLASH_FlushCaches+0x80>)
 80414c6:	2200      	movs	r2, #0
 80414c8:	771a      	strb	r2, [r3, #28]
}
 80414ca:	bf00      	nop
 80414cc:	370c      	adds	r7, #12
 80414ce:	46bd      	mov	sp, r7
 80414d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80414d4:	4770      	bx	lr
 80414d6:	bf00      	nop
 80414d8:	2000000c 	.word	0x2000000c
 80414dc:	40022000 	.word	0x40022000

080414e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80414e0:	b480      	push	{r7}
 80414e2:	b087      	sub	sp, #28
 80414e4:	af00      	add	r7, sp, #0
 80414e6:	6078      	str	r0, [r7, #4]
 80414e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80414ea:	2300      	movs	r3, #0
 80414ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80414ee:	e15a      	b.n	80417a6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80414f0:	683b      	ldr	r3, [r7, #0]
 80414f2:	681a      	ldr	r2, [r3, #0]
 80414f4:	2101      	movs	r1, #1
 80414f6:	697b      	ldr	r3, [r7, #20]
 80414f8:	fa01 f303 	lsl.w	r3, r1, r3
 80414fc:	4013      	ands	r3, r2
 80414fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8041500:	68fb      	ldr	r3, [r7, #12]
 8041502:	2b00      	cmp	r3, #0
 8041504:	f000 814c 	beq.w	80417a0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8041508:	683b      	ldr	r3, [r7, #0]
 804150a:	685b      	ldr	r3, [r3, #4]
 804150c:	2b01      	cmp	r3, #1
 804150e:	d00b      	beq.n	8041528 <HAL_GPIO_Init+0x48>
 8041510:	683b      	ldr	r3, [r7, #0]
 8041512:	685b      	ldr	r3, [r3, #4]
 8041514:	2b02      	cmp	r3, #2
 8041516:	d007      	beq.n	8041528 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8041518:	683b      	ldr	r3, [r7, #0]
 804151a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 804151c:	2b11      	cmp	r3, #17
 804151e:	d003      	beq.n	8041528 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8041520:	683b      	ldr	r3, [r7, #0]
 8041522:	685b      	ldr	r3, [r3, #4]
 8041524:	2b12      	cmp	r3, #18
 8041526:	d130      	bne.n	804158a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8041528:	687b      	ldr	r3, [r7, #4]
 804152a:	689b      	ldr	r3, [r3, #8]
 804152c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 804152e:	697b      	ldr	r3, [r7, #20]
 8041530:	005b      	lsls	r3, r3, #1
 8041532:	2203      	movs	r2, #3
 8041534:	fa02 f303 	lsl.w	r3, r2, r3
 8041538:	43db      	mvns	r3, r3
 804153a:	693a      	ldr	r2, [r7, #16]
 804153c:	4013      	ands	r3, r2
 804153e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8041540:	683b      	ldr	r3, [r7, #0]
 8041542:	68da      	ldr	r2, [r3, #12]
 8041544:	697b      	ldr	r3, [r7, #20]
 8041546:	005b      	lsls	r3, r3, #1
 8041548:	fa02 f303 	lsl.w	r3, r2, r3
 804154c:	693a      	ldr	r2, [r7, #16]
 804154e:	4313      	orrs	r3, r2
 8041550:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8041552:	687b      	ldr	r3, [r7, #4]
 8041554:	693a      	ldr	r2, [r7, #16]
 8041556:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8041558:	687b      	ldr	r3, [r7, #4]
 804155a:	685b      	ldr	r3, [r3, #4]
 804155c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 804155e:	2201      	movs	r2, #1
 8041560:	697b      	ldr	r3, [r7, #20]
 8041562:	fa02 f303 	lsl.w	r3, r2, r3
 8041566:	43db      	mvns	r3, r3
 8041568:	693a      	ldr	r2, [r7, #16]
 804156a:	4013      	ands	r3, r2
 804156c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 804156e:	683b      	ldr	r3, [r7, #0]
 8041570:	685b      	ldr	r3, [r3, #4]
 8041572:	091b      	lsrs	r3, r3, #4
 8041574:	f003 0201 	and.w	r2, r3, #1
 8041578:	697b      	ldr	r3, [r7, #20]
 804157a:	fa02 f303 	lsl.w	r3, r2, r3
 804157e:	693a      	ldr	r2, [r7, #16]
 8041580:	4313      	orrs	r3, r2
 8041582:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8041584:	687b      	ldr	r3, [r7, #4]
 8041586:	693a      	ldr	r2, [r7, #16]
 8041588:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 804158a:	687b      	ldr	r3, [r7, #4]
 804158c:	68db      	ldr	r3, [r3, #12]
 804158e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8041590:	697b      	ldr	r3, [r7, #20]
 8041592:	005b      	lsls	r3, r3, #1
 8041594:	2203      	movs	r2, #3
 8041596:	fa02 f303 	lsl.w	r3, r2, r3
 804159a:	43db      	mvns	r3, r3
 804159c:	693a      	ldr	r2, [r7, #16]
 804159e:	4013      	ands	r3, r2
 80415a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80415a2:	683b      	ldr	r3, [r7, #0]
 80415a4:	689a      	ldr	r2, [r3, #8]
 80415a6:	697b      	ldr	r3, [r7, #20]
 80415a8:	005b      	lsls	r3, r3, #1
 80415aa:	fa02 f303 	lsl.w	r3, r2, r3
 80415ae:	693a      	ldr	r2, [r7, #16]
 80415b0:	4313      	orrs	r3, r2
 80415b2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80415b4:	687b      	ldr	r3, [r7, #4]
 80415b6:	693a      	ldr	r2, [r7, #16]
 80415b8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80415ba:	683b      	ldr	r3, [r7, #0]
 80415bc:	685b      	ldr	r3, [r3, #4]
 80415be:	2b02      	cmp	r3, #2
 80415c0:	d003      	beq.n	80415ca <HAL_GPIO_Init+0xea>
 80415c2:	683b      	ldr	r3, [r7, #0]
 80415c4:	685b      	ldr	r3, [r3, #4]
 80415c6:	2b12      	cmp	r3, #18
 80415c8:	d123      	bne.n	8041612 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80415ca:	697b      	ldr	r3, [r7, #20]
 80415cc:	08da      	lsrs	r2, r3, #3
 80415ce:	687b      	ldr	r3, [r7, #4]
 80415d0:	3208      	adds	r2, #8
 80415d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80415d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80415d8:	697b      	ldr	r3, [r7, #20]
 80415da:	f003 0307 	and.w	r3, r3, #7
 80415de:	009b      	lsls	r3, r3, #2
 80415e0:	220f      	movs	r2, #15
 80415e2:	fa02 f303 	lsl.w	r3, r2, r3
 80415e6:	43db      	mvns	r3, r3
 80415e8:	693a      	ldr	r2, [r7, #16]
 80415ea:	4013      	ands	r3, r2
 80415ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80415ee:	683b      	ldr	r3, [r7, #0]
 80415f0:	691a      	ldr	r2, [r3, #16]
 80415f2:	697b      	ldr	r3, [r7, #20]
 80415f4:	f003 0307 	and.w	r3, r3, #7
 80415f8:	009b      	lsls	r3, r3, #2
 80415fa:	fa02 f303 	lsl.w	r3, r2, r3
 80415fe:	693a      	ldr	r2, [r7, #16]
 8041600:	4313      	orrs	r3, r2
 8041602:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8041604:	697b      	ldr	r3, [r7, #20]
 8041606:	08da      	lsrs	r2, r3, #3
 8041608:	687b      	ldr	r3, [r7, #4]
 804160a:	3208      	adds	r2, #8
 804160c:	6939      	ldr	r1, [r7, #16]
 804160e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8041612:	687b      	ldr	r3, [r7, #4]
 8041614:	681b      	ldr	r3, [r3, #0]
 8041616:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8041618:	697b      	ldr	r3, [r7, #20]
 804161a:	005b      	lsls	r3, r3, #1
 804161c:	2203      	movs	r2, #3
 804161e:	fa02 f303 	lsl.w	r3, r2, r3
 8041622:	43db      	mvns	r3, r3
 8041624:	693a      	ldr	r2, [r7, #16]
 8041626:	4013      	ands	r3, r2
 8041628:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 804162a:	683b      	ldr	r3, [r7, #0]
 804162c:	685b      	ldr	r3, [r3, #4]
 804162e:	f003 0203 	and.w	r2, r3, #3
 8041632:	697b      	ldr	r3, [r7, #20]
 8041634:	005b      	lsls	r3, r3, #1
 8041636:	fa02 f303 	lsl.w	r3, r2, r3
 804163a:	693a      	ldr	r2, [r7, #16]
 804163c:	4313      	orrs	r3, r2
 804163e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8041640:	687b      	ldr	r3, [r7, #4]
 8041642:	693a      	ldr	r2, [r7, #16]
 8041644:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8041646:	683b      	ldr	r3, [r7, #0]
 8041648:	685b      	ldr	r3, [r3, #4]
 804164a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 804164e:	2b00      	cmp	r3, #0
 8041650:	f000 80a6 	beq.w	80417a0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8041654:	4b5b      	ldr	r3, [pc, #364]	; (80417c4 <HAL_GPIO_Init+0x2e4>)
 8041656:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8041658:	4a5a      	ldr	r2, [pc, #360]	; (80417c4 <HAL_GPIO_Init+0x2e4>)
 804165a:	f043 0301 	orr.w	r3, r3, #1
 804165e:	6613      	str	r3, [r2, #96]	; 0x60
 8041660:	4b58      	ldr	r3, [pc, #352]	; (80417c4 <HAL_GPIO_Init+0x2e4>)
 8041662:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8041664:	f003 0301 	and.w	r3, r3, #1
 8041668:	60bb      	str	r3, [r7, #8]
 804166a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 804166c:	4a56      	ldr	r2, [pc, #344]	; (80417c8 <HAL_GPIO_Init+0x2e8>)
 804166e:	697b      	ldr	r3, [r7, #20]
 8041670:	089b      	lsrs	r3, r3, #2
 8041672:	3302      	adds	r3, #2
 8041674:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8041678:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 804167a:	697b      	ldr	r3, [r7, #20]
 804167c:	f003 0303 	and.w	r3, r3, #3
 8041680:	009b      	lsls	r3, r3, #2
 8041682:	220f      	movs	r2, #15
 8041684:	fa02 f303 	lsl.w	r3, r2, r3
 8041688:	43db      	mvns	r3, r3
 804168a:	693a      	ldr	r2, [r7, #16]
 804168c:	4013      	ands	r3, r2
 804168e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8041690:	687b      	ldr	r3, [r7, #4]
 8041692:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8041696:	d01f      	beq.n	80416d8 <HAL_GPIO_Init+0x1f8>
 8041698:	687b      	ldr	r3, [r7, #4]
 804169a:	4a4c      	ldr	r2, [pc, #304]	; (80417cc <HAL_GPIO_Init+0x2ec>)
 804169c:	4293      	cmp	r3, r2
 804169e:	d019      	beq.n	80416d4 <HAL_GPIO_Init+0x1f4>
 80416a0:	687b      	ldr	r3, [r7, #4]
 80416a2:	4a4b      	ldr	r2, [pc, #300]	; (80417d0 <HAL_GPIO_Init+0x2f0>)
 80416a4:	4293      	cmp	r3, r2
 80416a6:	d013      	beq.n	80416d0 <HAL_GPIO_Init+0x1f0>
 80416a8:	687b      	ldr	r3, [r7, #4]
 80416aa:	4a4a      	ldr	r2, [pc, #296]	; (80417d4 <HAL_GPIO_Init+0x2f4>)
 80416ac:	4293      	cmp	r3, r2
 80416ae:	d00d      	beq.n	80416cc <HAL_GPIO_Init+0x1ec>
 80416b0:	687b      	ldr	r3, [r7, #4]
 80416b2:	4a49      	ldr	r2, [pc, #292]	; (80417d8 <HAL_GPIO_Init+0x2f8>)
 80416b4:	4293      	cmp	r3, r2
 80416b6:	d007      	beq.n	80416c8 <HAL_GPIO_Init+0x1e8>
 80416b8:	687b      	ldr	r3, [r7, #4]
 80416ba:	4a48      	ldr	r2, [pc, #288]	; (80417dc <HAL_GPIO_Init+0x2fc>)
 80416bc:	4293      	cmp	r3, r2
 80416be:	d101      	bne.n	80416c4 <HAL_GPIO_Init+0x1e4>
 80416c0:	2305      	movs	r3, #5
 80416c2:	e00a      	b.n	80416da <HAL_GPIO_Init+0x1fa>
 80416c4:	2306      	movs	r3, #6
 80416c6:	e008      	b.n	80416da <HAL_GPIO_Init+0x1fa>
 80416c8:	2304      	movs	r3, #4
 80416ca:	e006      	b.n	80416da <HAL_GPIO_Init+0x1fa>
 80416cc:	2303      	movs	r3, #3
 80416ce:	e004      	b.n	80416da <HAL_GPIO_Init+0x1fa>
 80416d0:	2302      	movs	r3, #2
 80416d2:	e002      	b.n	80416da <HAL_GPIO_Init+0x1fa>
 80416d4:	2301      	movs	r3, #1
 80416d6:	e000      	b.n	80416da <HAL_GPIO_Init+0x1fa>
 80416d8:	2300      	movs	r3, #0
 80416da:	697a      	ldr	r2, [r7, #20]
 80416dc:	f002 0203 	and.w	r2, r2, #3
 80416e0:	0092      	lsls	r2, r2, #2
 80416e2:	4093      	lsls	r3, r2
 80416e4:	693a      	ldr	r2, [r7, #16]
 80416e6:	4313      	orrs	r3, r2
 80416e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80416ea:	4937      	ldr	r1, [pc, #220]	; (80417c8 <HAL_GPIO_Init+0x2e8>)
 80416ec:	697b      	ldr	r3, [r7, #20]
 80416ee:	089b      	lsrs	r3, r3, #2
 80416f0:	3302      	adds	r3, #2
 80416f2:	693a      	ldr	r2, [r7, #16]
 80416f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80416f8:	4b39      	ldr	r3, [pc, #228]	; (80417e0 <HAL_GPIO_Init+0x300>)
 80416fa:	681b      	ldr	r3, [r3, #0]
 80416fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80416fe:	68fb      	ldr	r3, [r7, #12]
 8041700:	43db      	mvns	r3, r3
 8041702:	693a      	ldr	r2, [r7, #16]
 8041704:	4013      	ands	r3, r2
 8041706:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8041708:	683b      	ldr	r3, [r7, #0]
 804170a:	685b      	ldr	r3, [r3, #4]
 804170c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8041710:	2b00      	cmp	r3, #0
 8041712:	d003      	beq.n	804171c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8041714:	693a      	ldr	r2, [r7, #16]
 8041716:	68fb      	ldr	r3, [r7, #12]
 8041718:	4313      	orrs	r3, r2
 804171a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 804171c:	4a30      	ldr	r2, [pc, #192]	; (80417e0 <HAL_GPIO_Init+0x300>)
 804171e:	693b      	ldr	r3, [r7, #16]
 8041720:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8041722:	4b2f      	ldr	r3, [pc, #188]	; (80417e0 <HAL_GPIO_Init+0x300>)
 8041724:	685b      	ldr	r3, [r3, #4]
 8041726:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8041728:	68fb      	ldr	r3, [r7, #12]
 804172a:	43db      	mvns	r3, r3
 804172c:	693a      	ldr	r2, [r7, #16]
 804172e:	4013      	ands	r3, r2
 8041730:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8041732:	683b      	ldr	r3, [r7, #0]
 8041734:	685b      	ldr	r3, [r3, #4]
 8041736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 804173a:	2b00      	cmp	r3, #0
 804173c:	d003      	beq.n	8041746 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 804173e:	693a      	ldr	r2, [r7, #16]
 8041740:	68fb      	ldr	r3, [r7, #12]
 8041742:	4313      	orrs	r3, r2
 8041744:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8041746:	4a26      	ldr	r2, [pc, #152]	; (80417e0 <HAL_GPIO_Init+0x300>)
 8041748:	693b      	ldr	r3, [r7, #16]
 804174a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 804174c:	4b24      	ldr	r3, [pc, #144]	; (80417e0 <HAL_GPIO_Init+0x300>)
 804174e:	689b      	ldr	r3, [r3, #8]
 8041750:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8041752:	68fb      	ldr	r3, [r7, #12]
 8041754:	43db      	mvns	r3, r3
 8041756:	693a      	ldr	r2, [r7, #16]
 8041758:	4013      	ands	r3, r2
 804175a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 804175c:	683b      	ldr	r3, [r7, #0]
 804175e:	685b      	ldr	r3, [r3, #4]
 8041760:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8041764:	2b00      	cmp	r3, #0
 8041766:	d003      	beq.n	8041770 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8041768:	693a      	ldr	r2, [r7, #16]
 804176a:	68fb      	ldr	r3, [r7, #12]
 804176c:	4313      	orrs	r3, r2
 804176e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8041770:	4a1b      	ldr	r2, [pc, #108]	; (80417e0 <HAL_GPIO_Init+0x300>)
 8041772:	693b      	ldr	r3, [r7, #16]
 8041774:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8041776:	4b1a      	ldr	r3, [pc, #104]	; (80417e0 <HAL_GPIO_Init+0x300>)
 8041778:	68db      	ldr	r3, [r3, #12]
 804177a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 804177c:	68fb      	ldr	r3, [r7, #12]
 804177e:	43db      	mvns	r3, r3
 8041780:	693a      	ldr	r2, [r7, #16]
 8041782:	4013      	ands	r3, r2
 8041784:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8041786:	683b      	ldr	r3, [r7, #0]
 8041788:	685b      	ldr	r3, [r3, #4]
 804178a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 804178e:	2b00      	cmp	r3, #0
 8041790:	d003      	beq.n	804179a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8041792:	693a      	ldr	r2, [r7, #16]
 8041794:	68fb      	ldr	r3, [r7, #12]
 8041796:	4313      	orrs	r3, r2
 8041798:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 804179a:	4a11      	ldr	r2, [pc, #68]	; (80417e0 <HAL_GPIO_Init+0x300>)
 804179c:	693b      	ldr	r3, [r7, #16]
 804179e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80417a0:	697b      	ldr	r3, [r7, #20]
 80417a2:	3301      	adds	r3, #1
 80417a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80417a6:	683b      	ldr	r3, [r7, #0]
 80417a8:	681a      	ldr	r2, [r3, #0]
 80417aa:	697b      	ldr	r3, [r7, #20]
 80417ac:	fa22 f303 	lsr.w	r3, r2, r3
 80417b0:	2b00      	cmp	r3, #0
 80417b2:	f47f ae9d 	bne.w	80414f0 <HAL_GPIO_Init+0x10>
  }
}
 80417b6:	bf00      	nop
 80417b8:	bf00      	nop
 80417ba:	371c      	adds	r7, #28
 80417bc:	46bd      	mov	sp, r7
 80417be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80417c2:	4770      	bx	lr
 80417c4:	40021000 	.word	0x40021000
 80417c8:	40010000 	.word	0x40010000
 80417cc:	48000400 	.word	0x48000400
 80417d0:	48000800 	.word	0x48000800
 80417d4:	48000c00 	.word	0x48000c00
 80417d8:	48001000 	.word	0x48001000
 80417dc:	48001400 	.word	0x48001400
 80417e0:	40010400 	.word	0x40010400

080417e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80417e4:	b480      	push	{r7}
 80417e6:	b083      	sub	sp, #12
 80417e8:	af00      	add	r7, sp, #0
 80417ea:	6078      	str	r0, [r7, #4]
 80417ec:	460b      	mov	r3, r1
 80417ee:	807b      	strh	r3, [r7, #2]
 80417f0:	4613      	mov	r3, r2
 80417f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80417f4:	787b      	ldrb	r3, [r7, #1]
 80417f6:	2b00      	cmp	r3, #0
 80417f8:	d003      	beq.n	8041802 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80417fa:	887a      	ldrh	r2, [r7, #2]
 80417fc:	687b      	ldr	r3, [r7, #4]
 80417fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8041800:	e002      	b.n	8041808 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8041802:	887a      	ldrh	r2, [r7, #2]
 8041804:	687b      	ldr	r3, [r7, #4]
 8041806:	629a      	str	r2, [r3, #40]	; 0x28
}
 8041808:	bf00      	nop
 804180a:	370c      	adds	r7, #12
 804180c:	46bd      	mov	sp, r7
 804180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041812:	4770      	bx	lr

08041814 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8041814:	b480      	push	{r7}
 8041816:	b085      	sub	sp, #20
 8041818:	af00      	add	r7, sp, #0
 804181a:	6078      	str	r0, [r7, #4]
 804181c:	460b      	mov	r3, r1
 804181e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8041820:	687b      	ldr	r3, [r7, #4]
 8041822:	695b      	ldr	r3, [r3, #20]
 8041824:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8041826:	887a      	ldrh	r2, [r7, #2]
 8041828:	68fb      	ldr	r3, [r7, #12]
 804182a:	4013      	ands	r3, r2
 804182c:	041a      	lsls	r2, r3, #16
 804182e:	68fb      	ldr	r3, [r7, #12]
 8041830:	43d9      	mvns	r1, r3
 8041832:	887b      	ldrh	r3, [r7, #2]
 8041834:	400b      	ands	r3, r1
 8041836:	431a      	orrs	r2, r3
 8041838:	687b      	ldr	r3, [r7, #4]
 804183a:	619a      	str	r2, [r3, #24]
}
 804183c:	bf00      	nop
 804183e:	3714      	adds	r7, #20
 8041840:	46bd      	mov	sp, r7
 8041842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041846:	4770      	bx	lr

08041848 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8041848:	b580      	push	{r7, lr}
 804184a:	b082      	sub	sp, #8
 804184c:	af00      	add	r7, sp, #0
 804184e:	4603      	mov	r3, r0
 8041850:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8041852:	4b08      	ldr	r3, [pc, #32]	; (8041874 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8041854:	695a      	ldr	r2, [r3, #20]
 8041856:	88fb      	ldrh	r3, [r7, #6]
 8041858:	4013      	ands	r3, r2
 804185a:	2b00      	cmp	r3, #0
 804185c:	d006      	beq.n	804186c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 804185e:	4a05      	ldr	r2, [pc, #20]	; (8041874 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8041860:	88fb      	ldrh	r3, [r7, #6]
 8041862:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8041864:	88fb      	ldrh	r3, [r7, #6]
 8041866:	4618      	mov	r0, r3
 8041868:	f000 f806 	bl	8041878 <HAL_GPIO_EXTI_Callback>
  }
}
 804186c:	bf00      	nop
 804186e:	3708      	adds	r7, #8
 8041870:	46bd      	mov	sp, r7
 8041872:	bd80      	pop	{r7, pc}
 8041874:	40010400 	.word	0x40010400

08041878 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8041878:	b480      	push	{r7}
 804187a:	b083      	sub	sp, #12
 804187c:	af00      	add	r7, sp, #0
 804187e:	4603      	mov	r3, r0
 8041880:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8041882:	bf00      	nop
 8041884:	370c      	adds	r7, #12
 8041886:	46bd      	mov	sp, r7
 8041888:	f85d 7b04 	ldr.w	r7, [sp], #4
 804188c:	4770      	bx	lr
	...

08041890 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8041890:	b480      	push	{r7}
 8041892:	b085      	sub	sp, #20
 8041894:	af00      	add	r7, sp, #0
 8041896:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8041898:	687b      	ldr	r3, [r7, #4]
 804189a:	2b00      	cmp	r3, #0
 804189c:	d141      	bne.n	8041922 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 804189e:	4b4b      	ldr	r3, [pc, #300]	; (80419cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80418a0:	681b      	ldr	r3, [r3, #0]
 80418a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80418a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80418aa:	d131      	bne.n	8041910 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80418ac:	4b47      	ldr	r3, [pc, #284]	; (80419cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80418ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80418b2:	4a46      	ldr	r2, [pc, #280]	; (80419cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80418b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80418b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80418bc:	4b43      	ldr	r3, [pc, #268]	; (80419cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80418be:	681b      	ldr	r3, [r3, #0]
 80418c0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80418c4:	4a41      	ldr	r2, [pc, #260]	; (80419cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80418c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80418ca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80418cc:	4b40      	ldr	r3, [pc, #256]	; (80419d0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80418ce:	681b      	ldr	r3, [r3, #0]
 80418d0:	2232      	movs	r2, #50	; 0x32
 80418d2:	fb02 f303 	mul.w	r3, r2, r3
 80418d6:	4a3f      	ldr	r2, [pc, #252]	; (80419d4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80418d8:	fba2 2303 	umull	r2, r3, r2, r3
 80418dc:	0c9b      	lsrs	r3, r3, #18
 80418de:	3301      	adds	r3, #1
 80418e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80418e2:	e002      	b.n	80418ea <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80418e4:	68fb      	ldr	r3, [r7, #12]
 80418e6:	3b01      	subs	r3, #1
 80418e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80418ea:	4b38      	ldr	r3, [pc, #224]	; (80419cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80418ec:	695b      	ldr	r3, [r3, #20]
 80418ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80418f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80418f6:	d102      	bne.n	80418fe <HAL_PWREx_ControlVoltageScaling+0x6e>
 80418f8:	68fb      	ldr	r3, [r7, #12]
 80418fa:	2b00      	cmp	r3, #0
 80418fc:	d1f2      	bne.n	80418e4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80418fe:	4b33      	ldr	r3, [pc, #204]	; (80419cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8041900:	695b      	ldr	r3, [r3, #20]
 8041902:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8041906:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 804190a:	d158      	bne.n	80419be <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 804190c:	2303      	movs	r3, #3
 804190e:	e057      	b.n	80419c0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8041910:	4b2e      	ldr	r3, [pc, #184]	; (80419cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8041912:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8041916:	4a2d      	ldr	r2, [pc, #180]	; (80419cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8041918:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 804191c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8041920:	e04d      	b.n	80419be <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8041922:	687b      	ldr	r3, [r7, #4]
 8041924:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8041928:	d141      	bne.n	80419ae <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 804192a:	4b28      	ldr	r3, [pc, #160]	; (80419cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 804192c:	681b      	ldr	r3, [r3, #0]
 804192e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8041932:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8041936:	d131      	bne.n	804199c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8041938:	4b24      	ldr	r3, [pc, #144]	; (80419cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 804193a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 804193e:	4a23      	ldr	r2, [pc, #140]	; (80419cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8041940:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8041944:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8041948:	4b20      	ldr	r3, [pc, #128]	; (80419cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 804194a:	681b      	ldr	r3, [r3, #0]
 804194c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8041950:	4a1e      	ldr	r2, [pc, #120]	; (80419cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8041952:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8041956:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8041958:	4b1d      	ldr	r3, [pc, #116]	; (80419d0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 804195a:	681b      	ldr	r3, [r3, #0]
 804195c:	2232      	movs	r2, #50	; 0x32
 804195e:	fb02 f303 	mul.w	r3, r2, r3
 8041962:	4a1c      	ldr	r2, [pc, #112]	; (80419d4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8041964:	fba2 2303 	umull	r2, r3, r2, r3
 8041968:	0c9b      	lsrs	r3, r3, #18
 804196a:	3301      	adds	r3, #1
 804196c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 804196e:	e002      	b.n	8041976 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8041970:	68fb      	ldr	r3, [r7, #12]
 8041972:	3b01      	subs	r3, #1
 8041974:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8041976:	4b15      	ldr	r3, [pc, #84]	; (80419cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8041978:	695b      	ldr	r3, [r3, #20]
 804197a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 804197e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8041982:	d102      	bne.n	804198a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8041984:	68fb      	ldr	r3, [r7, #12]
 8041986:	2b00      	cmp	r3, #0
 8041988:	d1f2      	bne.n	8041970 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 804198a:	4b10      	ldr	r3, [pc, #64]	; (80419cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 804198c:	695b      	ldr	r3, [r3, #20]
 804198e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8041992:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8041996:	d112      	bne.n	80419be <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8041998:	2303      	movs	r3, #3
 804199a:	e011      	b.n	80419c0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 804199c:	4b0b      	ldr	r3, [pc, #44]	; (80419cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 804199e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80419a2:	4a0a      	ldr	r2, [pc, #40]	; (80419cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80419a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80419a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80419ac:	e007      	b.n	80419be <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80419ae:	4b07      	ldr	r3, [pc, #28]	; (80419cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80419b0:	681b      	ldr	r3, [r3, #0]
 80419b2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80419b6:	4a05      	ldr	r2, [pc, #20]	; (80419cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80419b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80419bc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80419be:	2300      	movs	r3, #0
}
 80419c0:	4618      	mov	r0, r3
 80419c2:	3714      	adds	r7, #20
 80419c4:	46bd      	mov	sp, r7
 80419c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80419ca:	4770      	bx	lr
 80419cc:	40007000 	.word	0x40007000
 80419d0:	20000000 	.word	0x20000000
 80419d4:	431bde83 	.word	0x431bde83

080419d8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80419d8:	b480      	push	{r7}
 80419da:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80419dc:	4b05      	ldr	r3, [pc, #20]	; (80419f4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80419de:	689b      	ldr	r3, [r3, #8]
 80419e0:	4a04      	ldr	r2, [pc, #16]	; (80419f4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80419e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80419e6:	6093      	str	r3, [r2, #8]
}
 80419e8:	bf00      	nop
 80419ea:	46bd      	mov	sp, r7
 80419ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80419f0:	4770      	bx	lr
 80419f2:	bf00      	nop
 80419f4:	40007000 	.word	0x40007000

080419f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80419f8:	b580      	push	{r7, lr}
 80419fa:	b088      	sub	sp, #32
 80419fc:	af00      	add	r7, sp, #0
 80419fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8041a00:	687b      	ldr	r3, [r7, #4]
 8041a02:	2b00      	cmp	r3, #0
 8041a04:	d101      	bne.n	8041a0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8041a06:	2301      	movs	r3, #1
 8041a08:	e306      	b.n	8042018 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8041a0a:	687b      	ldr	r3, [r7, #4]
 8041a0c:	681b      	ldr	r3, [r3, #0]
 8041a0e:	f003 0301 	and.w	r3, r3, #1
 8041a12:	2b00      	cmp	r3, #0
 8041a14:	d075      	beq.n	8041b02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8041a16:	4b97      	ldr	r3, [pc, #604]	; (8041c74 <HAL_RCC_OscConfig+0x27c>)
 8041a18:	689b      	ldr	r3, [r3, #8]
 8041a1a:	f003 030c 	and.w	r3, r3, #12
 8041a1e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8041a20:	4b94      	ldr	r3, [pc, #592]	; (8041c74 <HAL_RCC_OscConfig+0x27c>)
 8041a22:	68db      	ldr	r3, [r3, #12]
 8041a24:	f003 0303 	and.w	r3, r3, #3
 8041a28:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8041a2a:	69bb      	ldr	r3, [r7, #24]
 8041a2c:	2b0c      	cmp	r3, #12
 8041a2e:	d102      	bne.n	8041a36 <HAL_RCC_OscConfig+0x3e>
 8041a30:	697b      	ldr	r3, [r7, #20]
 8041a32:	2b03      	cmp	r3, #3
 8041a34:	d002      	beq.n	8041a3c <HAL_RCC_OscConfig+0x44>
 8041a36:	69bb      	ldr	r3, [r7, #24]
 8041a38:	2b08      	cmp	r3, #8
 8041a3a:	d10b      	bne.n	8041a54 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8041a3c:	4b8d      	ldr	r3, [pc, #564]	; (8041c74 <HAL_RCC_OscConfig+0x27c>)
 8041a3e:	681b      	ldr	r3, [r3, #0]
 8041a40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8041a44:	2b00      	cmp	r3, #0
 8041a46:	d05b      	beq.n	8041b00 <HAL_RCC_OscConfig+0x108>
 8041a48:	687b      	ldr	r3, [r7, #4]
 8041a4a:	685b      	ldr	r3, [r3, #4]
 8041a4c:	2b00      	cmp	r3, #0
 8041a4e:	d157      	bne.n	8041b00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8041a50:	2301      	movs	r3, #1
 8041a52:	e2e1      	b.n	8042018 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8041a54:	687b      	ldr	r3, [r7, #4]
 8041a56:	685b      	ldr	r3, [r3, #4]
 8041a58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8041a5c:	d106      	bne.n	8041a6c <HAL_RCC_OscConfig+0x74>
 8041a5e:	4b85      	ldr	r3, [pc, #532]	; (8041c74 <HAL_RCC_OscConfig+0x27c>)
 8041a60:	681b      	ldr	r3, [r3, #0]
 8041a62:	4a84      	ldr	r2, [pc, #528]	; (8041c74 <HAL_RCC_OscConfig+0x27c>)
 8041a64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8041a68:	6013      	str	r3, [r2, #0]
 8041a6a:	e01d      	b.n	8041aa8 <HAL_RCC_OscConfig+0xb0>
 8041a6c:	687b      	ldr	r3, [r7, #4]
 8041a6e:	685b      	ldr	r3, [r3, #4]
 8041a70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8041a74:	d10c      	bne.n	8041a90 <HAL_RCC_OscConfig+0x98>
 8041a76:	4b7f      	ldr	r3, [pc, #508]	; (8041c74 <HAL_RCC_OscConfig+0x27c>)
 8041a78:	681b      	ldr	r3, [r3, #0]
 8041a7a:	4a7e      	ldr	r2, [pc, #504]	; (8041c74 <HAL_RCC_OscConfig+0x27c>)
 8041a7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8041a80:	6013      	str	r3, [r2, #0]
 8041a82:	4b7c      	ldr	r3, [pc, #496]	; (8041c74 <HAL_RCC_OscConfig+0x27c>)
 8041a84:	681b      	ldr	r3, [r3, #0]
 8041a86:	4a7b      	ldr	r2, [pc, #492]	; (8041c74 <HAL_RCC_OscConfig+0x27c>)
 8041a88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8041a8c:	6013      	str	r3, [r2, #0]
 8041a8e:	e00b      	b.n	8041aa8 <HAL_RCC_OscConfig+0xb0>
 8041a90:	4b78      	ldr	r3, [pc, #480]	; (8041c74 <HAL_RCC_OscConfig+0x27c>)
 8041a92:	681b      	ldr	r3, [r3, #0]
 8041a94:	4a77      	ldr	r2, [pc, #476]	; (8041c74 <HAL_RCC_OscConfig+0x27c>)
 8041a96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8041a9a:	6013      	str	r3, [r2, #0]
 8041a9c:	4b75      	ldr	r3, [pc, #468]	; (8041c74 <HAL_RCC_OscConfig+0x27c>)
 8041a9e:	681b      	ldr	r3, [r3, #0]
 8041aa0:	4a74      	ldr	r2, [pc, #464]	; (8041c74 <HAL_RCC_OscConfig+0x27c>)
 8041aa2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8041aa6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8041aa8:	687b      	ldr	r3, [r7, #4]
 8041aaa:	685b      	ldr	r3, [r3, #4]
 8041aac:	2b00      	cmp	r3, #0
 8041aae:	d013      	beq.n	8041ad8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041ab0:	f7ff f956 	bl	8040d60 <HAL_GetTick>
 8041ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8041ab6:	e008      	b.n	8041aca <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8041ab8:	f7ff f952 	bl	8040d60 <HAL_GetTick>
 8041abc:	4602      	mov	r2, r0
 8041abe:	693b      	ldr	r3, [r7, #16]
 8041ac0:	1ad3      	subs	r3, r2, r3
 8041ac2:	2b64      	cmp	r3, #100	; 0x64
 8041ac4:	d901      	bls.n	8041aca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8041ac6:	2303      	movs	r3, #3
 8041ac8:	e2a6      	b.n	8042018 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8041aca:	4b6a      	ldr	r3, [pc, #424]	; (8041c74 <HAL_RCC_OscConfig+0x27c>)
 8041acc:	681b      	ldr	r3, [r3, #0]
 8041ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8041ad2:	2b00      	cmp	r3, #0
 8041ad4:	d0f0      	beq.n	8041ab8 <HAL_RCC_OscConfig+0xc0>
 8041ad6:	e014      	b.n	8041b02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041ad8:	f7ff f942 	bl	8040d60 <HAL_GetTick>
 8041adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8041ade:	e008      	b.n	8041af2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8041ae0:	f7ff f93e 	bl	8040d60 <HAL_GetTick>
 8041ae4:	4602      	mov	r2, r0
 8041ae6:	693b      	ldr	r3, [r7, #16]
 8041ae8:	1ad3      	subs	r3, r2, r3
 8041aea:	2b64      	cmp	r3, #100	; 0x64
 8041aec:	d901      	bls.n	8041af2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8041aee:	2303      	movs	r3, #3
 8041af0:	e292      	b.n	8042018 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8041af2:	4b60      	ldr	r3, [pc, #384]	; (8041c74 <HAL_RCC_OscConfig+0x27c>)
 8041af4:	681b      	ldr	r3, [r3, #0]
 8041af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8041afa:	2b00      	cmp	r3, #0
 8041afc:	d1f0      	bne.n	8041ae0 <HAL_RCC_OscConfig+0xe8>
 8041afe:	e000      	b.n	8041b02 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8041b00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8041b02:	687b      	ldr	r3, [r7, #4]
 8041b04:	681b      	ldr	r3, [r3, #0]
 8041b06:	f003 0302 	and.w	r3, r3, #2
 8041b0a:	2b00      	cmp	r3, #0
 8041b0c:	d075      	beq.n	8041bfa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8041b0e:	4b59      	ldr	r3, [pc, #356]	; (8041c74 <HAL_RCC_OscConfig+0x27c>)
 8041b10:	689b      	ldr	r3, [r3, #8]
 8041b12:	f003 030c 	and.w	r3, r3, #12
 8041b16:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8041b18:	4b56      	ldr	r3, [pc, #344]	; (8041c74 <HAL_RCC_OscConfig+0x27c>)
 8041b1a:	68db      	ldr	r3, [r3, #12]
 8041b1c:	f003 0303 	and.w	r3, r3, #3
 8041b20:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8041b22:	69bb      	ldr	r3, [r7, #24]
 8041b24:	2b0c      	cmp	r3, #12
 8041b26:	d102      	bne.n	8041b2e <HAL_RCC_OscConfig+0x136>
 8041b28:	697b      	ldr	r3, [r7, #20]
 8041b2a:	2b02      	cmp	r3, #2
 8041b2c:	d002      	beq.n	8041b34 <HAL_RCC_OscConfig+0x13c>
 8041b2e:	69bb      	ldr	r3, [r7, #24]
 8041b30:	2b04      	cmp	r3, #4
 8041b32:	d11f      	bne.n	8041b74 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8041b34:	4b4f      	ldr	r3, [pc, #316]	; (8041c74 <HAL_RCC_OscConfig+0x27c>)
 8041b36:	681b      	ldr	r3, [r3, #0]
 8041b38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8041b3c:	2b00      	cmp	r3, #0
 8041b3e:	d005      	beq.n	8041b4c <HAL_RCC_OscConfig+0x154>
 8041b40:	687b      	ldr	r3, [r7, #4]
 8041b42:	68db      	ldr	r3, [r3, #12]
 8041b44:	2b00      	cmp	r3, #0
 8041b46:	d101      	bne.n	8041b4c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8041b48:	2301      	movs	r3, #1
 8041b4a:	e265      	b.n	8042018 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8041b4c:	4b49      	ldr	r3, [pc, #292]	; (8041c74 <HAL_RCC_OscConfig+0x27c>)
 8041b4e:	685b      	ldr	r3, [r3, #4]
 8041b50:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8041b54:	687b      	ldr	r3, [r7, #4]
 8041b56:	691b      	ldr	r3, [r3, #16]
 8041b58:	061b      	lsls	r3, r3, #24
 8041b5a:	4946      	ldr	r1, [pc, #280]	; (8041c74 <HAL_RCC_OscConfig+0x27c>)
 8041b5c:	4313      	orrs	r3, r2
 8041b5e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8041b60:	4b45      	ldr	r3, [pc, #276]	; (8041c78 <HAL_RCC_OscConfig+0x280>)
 8041b62:	681b      	ldr	r3, [r3, #0]
 8041b64:	4618      	mov	r0, r3
 8041b66:	f7ff f8af 	bl	8040cc8 <HAL_InitTick>
 8041b6a:	4603      	mov	r3, r0
 8041b6c:	2b00      	cmp	r3, #0
 8041b6e:	d043      	beq.n	8041bf8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8041b70:	2301      	movs	r3, #1
 8041b72:	e251      	b.n	8042018 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8041b74:	687b      	ldr	r3, [r7, #4]
 8041b76:	68db      	ldr	r3, [r3, #12]
 8041b78:	2b00      	cmp	r3, #0
 8041b7a:	d023      	beq.n	8041bc4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8041b7c:	4b3d      	ldr	r3, [pc, #244]	; (8041c74 <HAL_RCC_OscConfig+0x27c>)
 8041b7e:	681b      	ldr	r3, [r3, #0]
 8041b80:	4a3c      	ldr	r2, [pc, #240]	; (8041c74 <HAL_RCC_OscConfig+0x27c>)
 8041b82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8041b86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041b88:	f7ff f8ea 	bl	8040d60 <HAL_GetTick>
 8041b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8041b8e:	e008      	b.n	8041ba2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8041b90:	f7ff f8e6 	bl	8040d60 <HAL_GetTick>
 8041b94:	4602      	mov	r2, r0
 8041b96:	693b      	ldr	r3, [r7, #16]
 8041b98:	1ad3      	subs	r3, r2, r3
 8041b9a:	2b02      	cmp	r3, #2
 8041b9c:	d901      	bls.n	8041ba2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8041b9e:	2303      	movs	r3, #3
 8041ba0:	e23a      	b.n	8042018 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8041ba2:	4b34      	ldr	r3, [pc, #208]	; (8041c74 <HAL_RCC_OscConfig+0x27c>)
 8041ba4:	681b      	ldr	r3, [r3, #0]
 8041ba6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8041baa:	2b00      	cmp	r3, #0
 8041bac:	d0f0      	beq.n	8041b90 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8041bae:	4b31      	ldr	r3, [pc, #196]	; (8041c74 <HAL_RCC_OscConfig+0x27c>)
 8041bb0:	685b      	ldr	r3, [r3, #4]
 8041bb2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8041bb6:	687b      	ldr	r3, [r7, #4]
 8041bb8:	691b      	ldr	r3, [r3, #16]
 8041bba:	061b      	lsls	r3, r3, #24
 8041bbc:	492d      	ldr	r1, [pc, #180]	; (8041c74 <HAL_RCC_OscConfig+0x27c>)
 8041bbe:	4313      	orrs	r3, r2
 8041bc0:	604b      	str	r3, [r1, #4]
 8041bc2:	e01a      	b.n	8041bfa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8041bc4:	4b2b      	ldr	r3, [pc, #172]	; (8041c74 <HAL_RCC_OscConfig+0x27c>)
 8041bc6:	681b      	ldr	r3, [r3, #0]
 8041bc8:	4a2a      	ldr	r2, [pc, #168]	; (8041c74 <HAL_RCC_OscConfig+0x27c>)
 8041bca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8041bce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041bd0:	f7ff f8c6 	bl	8040d60 <HAL_GetTick>
 8041bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8041bd6:	e008      	b.n	8041bea <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8041bd8:	f7ff f8c2 	bl	8040d60 <HAL_GetTick>
 8041bdc:	4602      	mov	r2, r0
 8041bde:	693b      	ldr	r3, [r7, #16]
 8041be0:	1ad3      	subs	r3, r2, r3
 8041be2:	2b02      	cmp	r3, #2
 8041be4:	d901      	bls.n	8041bea <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8041be6:	2303      	movs	r3, #3
 8041be8:	e216      	b.n	8042018 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8041bea:	4b22      	ldr	r3, [pc, #136]	; (8041c74 <HAL_RCC_OscConfig+0x27c>)
 8041bec:	681b      	ldr	r3, [r3, #0]
 8041bee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8041bf2:	2b00      	cmp	r3, #0
 8041bf4:	d1f0      	bne.n	8041bd8 <HAL_RCC_OscConfig+0x1e0>
 8041bf6:	e000      	b.n	8041bfa <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8041bf8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8041bfa:	687b      	ldr	r3, [r7, #4]
 8041bfc:	681b      	ldr	r3, [r3, #0]
 8041bfe:	f003 0308 	and.w	r3, r3, #8
 8041c02:	2b00      	cmp	r3, #0
 8041c04:	d041      	beq.n	8041c8a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8041c06:	687b      	ldr	r3, [r7, #4]
 8041c08:	695b      	ldr	r3, [r3, #20]
 8041c0a:	2b00      	cmp	r3, #0
 8041c0c:	d01c      	beq.n	8041c48 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8041c0e:	4b19      	ldr	r3, [pc, #100]	; (8041c74 <HAL_RCC_OscConfig+0x27c>)
 8041c10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8041c14:	4a17      	ldr	r2, [pc, #92]	; (8041c74 <HAL_RCC_OscConfig+0x27c>)
 8041c16:	f043 0301 	orr.w	r3, r3, #1
 8041c1a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8041c1e:	f7ff f89f 	bl	8040d60 <HAL_GetTick>
 8041c22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8041c24:	e008      	b.n	8041c38 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8041c26:	f7ff f89b 	bl	8040d60 <HAL_GetTick>
 8041c2a:	4602      	mov	r2, r0
 8041c2c:	693b      	ldr	r3, [r7, #16]
 8041c2e:	1ad3      	subs	r3, r2, r3
 8041c30:	2b02      	cmp	r3, #2
 8041c32:	d901      	bls.n	8041c38 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8041c34:	2303      	movs	r3, #3
 8041c36:	e1ef      	b.n	8042018 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8041c38:	4b0e      	ldr	r3, [pc, #56]	; (8041c74 <HAL_RCC_OscConfig+0x27c>)
 8041c3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8041c3e:	f003 0302 	and.w	r3, r3, #2
 8041c42:	2b00      	cmp	r3, #0
 8041c44:	d0ef      	beq.n	8041c26 <HAL_RCC_OscConfig+0x22e>
 8041c46:	e020      	b.n	8041c8a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8041c48:	4b0a      	ldr	r3, [pc, #40]	; (8041c74 <HAL_RCC_OscConfig+0x27c>)
 8041c4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8041c4e:	4a09      	ldr	r2, [pc, #36]	; (8041c74 <HAL_RCC_OscConfig+0x27c>)
 8041c50:	f023 0301 	bic.w	r3, r3, #1
 8041c54:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8041c58:	f7ff f882 	bl	8040d60 <HAL_GetTick>
 8041c5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8041c5e:	e00d      	b.n	8041c7c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8041c60:	f7ff f87e 	bl	8040d60 <HAL_GetTick>
 8041c64:	4602      	mov	r2, r0
 8041c66:	693b      	ldr	r3, [r7, #16]
 8041c68:	1ad3      	subs	r3, r2, r3
 8041c6a:	2b02      	cmp	r3, #2
 8041c6c:	d906      	bls.n	8041c7c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8041c6e:	2303      	movs	r3, #3
 8041c70:	e1d2      	b.n	8042018 <HAL_RCC_OscConfig+0x620>
 8041c72:	bf00      	nop
 8041c74:	40021000 	.word	0x40021000
 8041c78:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8041c7c:	4b8c      	ldr	r3, [pc, #560]	; (8041eb0 <HAL_RCC_OscConfig+0x4b8>)
 8041c7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8041c82:	f003 0302 	and.w	r3, r3, #2
 8041c86:	2b00      	cmp	r3, #0
 8041c88:	d1ea      	bne.n	8041c60 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8041c8a:	687b      	ldr	r3, [r7, #4]
 8041c8c:	681b      	ldr	r3, [r3, #0]
 8041c8e:	f003 0304 	and.w	r3, r3, #4
 8041c92:	2b00      	cmp	r3, #0
 8041c94:	f000 80a6 	beq.w	8041de4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8041c98:	2300      	movs	r3, #0
 8041c9a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8041c9c:	4b84      	ldr	r3, [pc, #528]	; (8041eb0 <HAL_RCC_OscConfig+0x4b8>)
 8041c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8041ca0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8041ca4:	2b00      	cmp	r3, #0
 8041ca6:	d101      	bne.n	8041cac <HAL_RCC_OscConfig+0x2b4>
 8041ca8:	2301      	movs	r3, #1
 8041caa:	e000      	b.n	8041cae <HAL_RCC_OscConfig+0x2b6>
 8041cac:	2300      	movs	r3, #0
 8041cae:	2b00      	cmp	r3, #0
 8041cb0:	d00d      	beq.n	8041cce <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8041cb2:	4b7f      	ldr	r3, [pc, #508]	; (8041eb0 <HAL_RCC_OscConfig+0x4b8>)
 8041cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8041cb6:	4a7e      	ldr	r2, [pc, #504]	; (8041eb0 <HAL_RCC_OscConfig+0x4b8>)
 8041cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8041cbc:	6593      	str	r3, [r2, #88]	; 0x58
 8041cbe:	4b7c      	ldr	r3, [pc, #496]	; (8041eb0 <HAL_RCC_OscConfig+0x4b8>)
 8041cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8041cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8041cc6:	60fb      	str	r3, [r7, #12]
 8041cc8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8041cca:	2301      	movs	r3, #1
 8041ccc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8041cce:	4b79      	ldr	r3, [pc, #484]	; (8041eb4 <HAL_RCC_OscConfig+0x4bc>)
 8041cd0:	681b      	ldr	r3, [r3, #0]
 8041cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8041cd6:	2b00      	cmp	r3, #0
 8041cd8:	d118      	bne.n	8041d0c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8041cda:	4b76      	ldr	r3, [pc, #472]	; (8041eb4 <HAL_RCC_OscConfig+0x4bc>)
 8041cdc:	681b      	ldr	r3, [r3, #0]
 8041cde:	4a75      	ldr	r2, [pc, #468]	; (8041eb4 <HAL_RCC_OscConfig+0x4bc>)
 8041ce0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8041ce4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8041ce6:	f7ff f83b 	bl	8040d60 <HAL_GetTick>
 8041cea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8041cec:	e008      	b.n	8041d00 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8041cee:	f7ff f837 	bl	8040d60 <HAL_GetTick>
 8041cf2:	4602      	mov	r2, r0
 8041cf4:	693b      	ldr	r3, [r7, #16]
 8041cf6:	1ad3      	subs	r3, r2, r3
 8041cf8:	2b02      	cmp	r3, #2
 8041cfa:	d901      	bls.n	8041d00 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8041cfc:	2303      	movs	r3, #3
 8041cfe:	e18b      	b.n	8042018 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8041d00:	4b6c      	ldr	r3, [pc, #432]	; (8041eb4 <HAL_RCC_OscConfig+0x4bc>)
 8041d02:	681b      	ldr	r3, [r3, #0]
 8041d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8041d08:	2b00      	cmp	r3, #0
 8041d0a:	d0f0      	beq.n	8041cee <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8041d0c:	687b      	ldr	r3, [r7, #4]
 8041d0e:	689b      	ldr	r3, [r3, #8]
 8041d10:	2b01      	cmp	r3, #1
 8041d12:	d108      	bne.n	8041d26 <HAL_RCC_OscConfig+0x32e>
 8041d14:	4b66      	ldr	r3, [pc, #408]	; (8041eb0 <HAL_RCC_OscConfig+0x4b8>)
 8041d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041d1a:	4a65      	ldr	r2, [pc, #404]	; (8041eb0 <HAL_RCC_OscConfig+0x4b8>)
 8041d1c:	f043 0301 	orr.w	r3, r3, #1
 8041d20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8041d24:	e024      	b.n	8041d70 <HAL_RCC_OscConfig+0x378>
 8041d26:	687b      	ldr	r3, [r7, #4]
 8041d28:	689b      	ldr	r3, [r3, #8]
 8041d2a:	2b05      	cmp	r3, #5
 8041d2c:	d110      	bne.n	8041d50 <HAL_RCC_OscConfig+0x358>
 8041d2e:	4b60      	ldr	r3, [pc, #384]	; (8041eb0 <HAL_RCC_OscConfig+0x4b8>)
 8041d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041d34:	4a5e      	ldr	r2, [pc, #376]	; (8041eb0 <HAL_RCC_OscConfig+0x4b8>)
 8041d36:	f043 0304 	orr.w	r3, r3, #4
 8041d3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8041d3e:	4b5c      	ldr	r3, [pc, #368]	; (8041eb0 <HAL_RCC_OscConfig+0x4b8>)
 8041d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041d44:	4a5a      	ldr	r2, [pc, #360]	; (8041eb0 <HAL_RCC_OscConfig+0x4b8>)
 8041d46:	f043 0301 	orr.w	r3, r3, #1
 8041d4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8041d4e:	e00f      	b.n	8041d70 <HAL_RCC_OscConfig+0x378>
 8041d50:	4b57      	ldr	r3, [pc, #348]	; (8041eb0 <HAL_RCC_OscConfig+0x4b8>)
 8041d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041d56:	4a56      	ldr	r2, [pc, #344]	; (8041eb0 <HAL_RCC_OscConfig+0x4b8>)
 8041d58:	f023 0301 	bic.w	r3, r3, #1
 8041d5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8041d60:	4b53      	ldr	r3, [pc, #332]	; (8041eb0 <HAL_RCC_OscConfig+0x4b8>)
 8041d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041d66:	4a52      	ldr	r2, [pc, #328]	; (8041eb0 <HAL_RCC_OscConfig+0x4b8>)
 8041d68:	f023 0304 	bic.w	r3, r3, #4
 8041d6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8041d70:	687b      	ldr	r3, [r7, #4]
 8041d72:	689b      	ldr	r3, [r3, #8]
 8041d74:	2b00      	cmp	r3, #0
 8041d76:	d016      	beq.n	8041da6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8041d78:	f7fe fff2 	bl	8040d60 <HAL_GetTick>
 8041d7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8041d7e:	e00a      	b.n	8041d96 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8041d80:	f7fe ffee 	bl	8040d60 <HAL_GetTick>
 8041d84:	4602      	mov	r2, r0
 8041d86:	693b      	ldr	r3, [r7, #16]
 8041d88:	1ad3      	subs	r3, r2, r3
 8041d8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8041d8e:	4293      	cmp	r3, r2
 8041d90:	d901      	bls.n	8041d96 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8041d92:	2303      	movs	r3, #3
 8041d94:	e140      	b.n	8042018 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8041d96:	4b46      	ldr	r3, [pc, #280]	; (8041eb0 <HAL_RCC_OscConfig+0x4b8>)
 8041d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041d9c:	f003 0302 	and.w	r3, r3, #2
 8041da0:	2b00      	cmp	r3, #0
 8041da2:	d0ed      	beq.n	8041d80 <HAL_RCC_OscConfig+0x388>
 8041da4:	e015      	b.n	8041dd2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8041da6:	f7fe ffdb 	bl	8040d60 <HAL_GetTick>
 8041daa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8041dac:	e00a      	b.n	8041dc4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8041dae:	f7fe ffd7 	bl	8040d60 <HAL_GetTick>
 8041db2:	4602      	mov	r2, r0
 8041db4:	693b      	ldr	r3, [r7, #16]
 8041db6:	1ad3      	subs	r3, r2, r3
 8041db8:	f241 3288 	movw	r2, #5000	; 0x1388
 8041dbc:	4293      	cmp	r3, r2
 8041dbe:	d901      	bls.n	8041dc4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8041dc0:	2303      	movs	r3, #3
 8041dc2:	e129      	b.n	8042018 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8041dc4:	4b3a      	ldr	r3, [pc, #232]	; (8041eb0 <HAL_RCC_OscConfig+0x4b8>)
 8041dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041dca:	f003 0302 	and.w	r3, r3, #2
 8041dce:	2b00      	cmp	r3, #0
 8041dd0:	d1ed      	bne.n	8041dae <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8041dd2:	7ffb      	ldrb	r3, [r7, #31]
 8041dd4:	2b01      	cmp	r3, #1
 8041dd6:	d105      	bne.n	8041de4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8041dd8:	4b35      	ldr	r3, [pc, #212]	; (8041eb0 <HAL_RCC_OscConfig+0x4b8>)
 8041dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8041ddc:	4a34      	ldr	r2, [pc, #208]	; (8041eb0 <HAL_RCC_OscConfig+0x4b8>)
 8041dde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8041de2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8041de4:	687b      	ldr	r3, [r7, #4]
 8041de6:	681b      	ldr	r3, [r3, #0]
 8041de8:	f003 0320 	and.w	r3, r3, #32
 8041dec:	2b00      	cmp	r3, #0
 8041dee:	d03c      	beq.n	8041e6a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8041df0:	687b      	ldr	r3, [r7, #4]
 8041df2:	699b      	ldr	r3, [r3, #24]
 8041df4:	2b00      	cmp	r3, #0
 8041df6:	d01c      	beq.n	8041e32 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8041df8:	4b2d      	ldr	r3, [pc, #180]	; (8041eb0 <HAL_RCC_OscConfig+0x4b8>)
 8041dfa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8041dfe:	4a2c      	ldr	r2, [pc, #176]	; (8041eb0 <HAL_RCC_OscConfig+0x4b8>)
 8041e00:	f043 0301 	orr.w	r3, r3, #1
 8041e04:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8041e08:	f7fe ffaa 	bl	8040d60 <HAL_GetTick>
 8041e0c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8041e0e:	e008      	b.n	8041e22 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8041e10:	f7fe ffa6 	bl	8040d60 <HAL_GetTick>
 8041e14:	4602      	mov	r2, r0
 8041e16:	693b      	ldr	r3, [r7, #16]
 8041e18:	1ad3      	subs	r3, r2, r3
 8041e1a:	2b02      	cmp	r3, #2
 8041e1c:	d901      	bls.n	8041e22 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8041e1e:	2303      	movs	r3, #3
 8041e20:	e0fa      	b.n	8042018 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8041e22:	4b23      	ldr	r3, [pc, #140]	; (8041eb0 <HAL_RCC_OscConfig+0x4b8>)
 8041e24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8041e28:	f003 0302 	and.w	r3, r3, #2
 8041e2c:	2b00      	cmp	r3, #0
 8041e2e:	d0ef      	beq.n	8041e10 <HAL_RCC_OscConfig+0x418>
 8041e30:	e01b      	b.n	8041e6a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8041e32:	4b1f      	ldr	r3, [pc, #124]	; (8041eb0 <HAL_RCC_OscConfig+0x4b8>)
 8041e34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8041e38:	4a1d      	ldr	r2, [pc, #116]	; (8041eb0 <HAL_RCC_OscConfig+0x4b8>)
 8041e3a:	f023 0301 	bic.w	r3, r3, #1
 8041e3e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8041e42:	f7fe ff8d 	bl	8040d60 <HAL_GetTick>
 8041e46:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8041e48:	e008      	b.n	8041e5c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8041e4a:	f7fe ff89 	bl	8040d60 <HAL_GetTick>
 8041e4e:	4602      	mov	r2, r0
 8041e50:	693b      	ldr	r3, [r7, #16]
 8041e52:	1ad3      	subs	r3, r2, r3
 8041e54:	2b02      	cmp	r3, #2
 8041e56:	d901      	bls.n	8041e5c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8041e58:	2303      	movs	r3, #3
 8041e5a:	e0dd      	b.n	8042018 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8041e5c:	4b14      	ldr	r3, [pc, #80]	; (8041eb0 <HAL_RCC_OscConfig+0x4b8>)
 8041e5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8041e62:	f003 0302 	and.w	r3, r3, #2
 8041e66:	2b00      	cmp	r3, #0
 8041e68:	d1ef      	bne.n	8041e4a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8041e6a:	687b      	ldr	r3, [r7, #4]
 8041e6c:	69db      	ldr	r3, [r3, #28]
 8041e6e:	2b00      	cmp	r3, #0
 8041e70:	f000 80d1 	beq.w	8042016 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8041e74:	4b0e      	ldr	r3, [pc, #56]	; (8041eb0 <HAL_RCC_OscConfig+0x4b8>)
 8041e76:	689b      	ldr	r3, [r3, #8]
 8041e78:	f003 030c 	and.w	r3, r3, #12
 8041e7c:	2b0c      	cmp	r3, #12
 8041e7e:	f000 808b 	beq.w	8041f98 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8041e82:	687b      	ldr	r3, [r7, #4]
 8041e84:	69db      	ldr	r3, [r3, #28]
 8041e86:	2b02      	cmp	r3, #2
 8041e88:	d15e      	bne.n	8041f48 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8041e8a:	4b09      	ldr	r3, [pc, #36]	; (8041eb0 <HAL_RCC_OscConfig+0x4b8>)
 8041e8c:	681b      	ldr	r3, [r3, #0]
 8041e8e:	4a08      	ldr	r2, [pc, #32]	; (8041eb0 <HAL_RCC_OscConfig+0x4b8>)
 8041e90:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8041e94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041e96:	f7fe ff63 	bl	8040d60 <HAL_GetTick>
 8041e9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8041e9c:	e00c      	b.n	8041eb8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8041e9e:	f7fe ff5f 	bl	8040d60 <HAL_GetTick>
 8041ea2:	4602      	mov	r2, r0
 8041ea4:	693b      	ldr	r3, [r7, #16]
 8041ea6:	1ad3      	subs	r3, r2, r3
 8041ea8:	2b02      	cmp	r3, #2
 8041eaa:	d905      	bls.n	8041eb8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8041eac:	2303      	movs	r3, #3
 8041eae:	e0b3      	b.n	8042018 <HAL_RCC_OscConfig+0x620>
 8041eb0:	40021000 	.word	0x40021000
 8041eb4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8041eb8:	4b59      	ldr	r3, [pc, #356]	; (8042020 <HAL_RCC_OscConfig+0x628>)
 8041eba:	681b      	ldr	r3, [r3, #0]
 8041ebc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8041ec0:	2b00      	cmp	r3, #0
 8041ec2:	d1ec      	bne.n	8041e9e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8041ec4:	4b56      	ldr	r3, [pc, #344]	; (8042020 <HAL_RCC_OscConfig+0x628>)
 8041ec6:	68da      	ldr	r2, [r3, #12]
 8041ec8:	4b56      	ldr	r3, [pc, #344]	; (8042024 <HAL_RCC_OscConfig+0x62c>)
 8041eca:	4013      	ands	r3, r2
 8041ecc:	687a      	ldr	r2, [r7, #4]
 8041ece:	6a11      	ldr	r1, [r2, #32]
 8041ed0:	687a      	ldr	r2, [r7, #4]
 8041ed2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8041ed4:	3a01      	subs	r2, #1
 8041ed6:	0112      	lsls	r2, r2, #4
 8041ed8:	4311      	orrs	r1, r2
 8041eda:	687a      	ldr	r2, [r7, #4]
 8041edc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8041ede:	0212      	lsls	r2, r2, #8
 8041ee0:	4311      	orrs	r1, r2
 8041ee2:	687a      	ldr	r2, [r7, #4]
 8041ee4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8041ee6:	0852      	lsrs	r2, r2, #1
 8041ee8:	3a01      	subs	r2, #1
 8041eea:	0552      	lsls	r2, r2, #21
 8041eec:	4311      	orrs	r1, r2
 8041eee:	687a      	ldr	r2, [r7, #4]
 8041ef0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8041ef2:	0852      	lsrs	r2, r2, #1
 8041ef4:	3a01      	subs	r2, #1
 8041ef6:	0652      	lsls	r2, r2, #25
 8041ef8:	4311      	orrs	r1, r2
 8041efa:	687a      	ldr	r2, [r7, #4]
 8041efc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8041efe:	06d2      	lsls	r2, r2, #27
 8041f00:	430a      	orrs	r2, r1
 8041f02:	4947      	ldr	r1, [pc, #284]	; (8042020 <HAL_RCC_OscConfig+0x628>)
 8041f04:	4313      	orrs	r3, r2
 8041f06:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8041f08:	4b45      	ldr	r3, [pc, #276]	; (8042020 <HAL_RCC_OscConfig+0x628>)
 8041f0a:	681b      	ldr	r3, [r3, #0]
 8041f0c:	4a44      	ldr	r2, [pc, #272]	; (8042020 <HAL_RCC_OscConfig+0x628>)
 8041f0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8041f12:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8041f14:	4b42      	ldr	r3, [pc, #264]	; (8042020 <HAL_RCC_OscConfig+0x628>)
 8041f16:	68db      	ldr	r3, [r3, #12]
 8041f18:	4a41      	ldr	r2, [pc, #260]	; (8042020 <HAL_RCC_OscConfig+0x628>)
 8041f1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8041f1e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041f20:	f7fe ff1e 	bl	8040d60 <HAL_GetTick>
 8041f24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8041f26:	e008      	b.n	8041f3a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8041f28:	f7fe ff1a 	bl	8040d60 <HAL_GetTick>
 8041f2c:	4602      	mov	r2, r0
 8041f2e:	693b      	ldr	r3, [r7, #16]
 8041f30:	1ad3      	subs	r3, r2, r3
 8041f32:	2b02      	cmp	r3, #2
 8041f34:	d901      	bls.n	8041f3a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8041f36:	2303      	movs	r3, #3
 8041f38:	e06e      	b.n	8042018 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8041f3a:	4b39      	ldr	r3, [pc, #228]	; (8042020 <HAL_RCC_OscConfig+0x628>)
 8041f3c:	681b      	ldr	r3, [r3, #0]
 8041f3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8041f42:	2b00      	cmp	r3, #0
 8041f44:	d0f0      	beq.n	8041f28 <HAL_RCC_OscConfig+0x530>
 8041f46:	e066      	b.n	8042016 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8041f48:	4b35      	ldr	r3, [pc, #212]	; (8042020 <HAL_RCC_OscConfig+0x628>)
 8041f4a:	681b      	ldr	r3, [r3, #0]
 8041f4c:	4a34      	ldr	r2, [pc, #208]	; (8042020 <HAL_RCC_OscConfig+0x628>)
 8041f4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8041f52:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8041f54:	4b32      	ldr	r3, [pc, #200]	; (8042020 <HAL_RCC_OscConfig+0x628>)
 8041f56:	68db      	ldr	r3, [r3, #12]
 8041f58:	4a31      	ldr	r2, [pc, #196]	; (8042020 <HAL_RCC_OscConfig+0x628>)
 8041f5a:	f023 0303 	bic.w	r3, r3, #3
 8041f5e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8041f60:	4b2f      	ldr	r3, [pc, #188]	; (8042020 <HAL_RCC_OscConfig+0x628>)
 8041f62:	68db      	ldr	r3, [r3, #12]
 8041f64:	4a2e      	ldr	r2, [pc, #184]	; (8042020 <HAL_RCC_OscConfig+0x628>)
 8041f66:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8041f6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8041f6e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041f70:	f7fe fef6 	bl	8040d60 <HAL_GetTick>
 8041f74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8041f76:	e008      	b.n	8041f8a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8041f78:	f7fe fef2 	bl	8040d60 <HAL_GetTick>
 8041f7c:	4602      	mov	r2, r0
 8041f7e:	693b      	ldr	r3, [r7, #16]
 8041f80:	1ad3      	subs	r3, r2, r3
 8041f82:	2b02      	cmp	r3, #2
 8041f84:	d901      	bls.n	8041f8a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8041f86:	2303      	movs	r3, #3
 8041f88:	e046      	b.n	8042018 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8041f8a:	4b25      	ldr	r3, [pc, #148]	; (8042020 <HAL_RCC_OscConfig+0x628>)
 8041f8c:	681b      	ldr	r3, [r3, #0]
 8041f8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8041f92:	2b00      	cmp	r3, #0
 8041f94:	d1f0      	bne.n	8041f78 <HAL_RCC_OscConfig+0x580>
 8041f96:	e03e      	b.n	8042016 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8041f98:	687b      	ldr	r3, [r7, #4]
 8041f9a:	69db      	ldr	r3, [r3, #28]
 8041f9c:	2b01      	cmp	r3, #1
 8041f9e:	d101      	bne.n	8041fa4 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8041fa0:	2301      	movs	r3, #1
 8041fa2:	e039      	b.n	8042018 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8041fa4:	4b1e      	ldr	r3, [pc, #120]	; (8042020 <HAL_RCC_OscConfig+0x628>)
 8041fa6:	68db      	ldr	r3, [r3, #12]
 8041fa8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8041faa:	697b      	ldr	r3, [r7, #20]
 8041fac:	f003 0203 	and.w	r2, r3, #3
 8041fb0:	687b      	ldr	r3, [r7, #4]
 8041fb2:	6a1b      	ldr	r3, [r3, #32]
 8041fb4:	429a      	cmp	r2, r3
 8041fb6:	d12c      	bne.n	8042012 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8041fb8:	697b      	ldr	r3, [r7, #20]
 8041fba:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8041fbe:	687b      	ldr	r3, [r7, #4]
 8041fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8041fc2:	3b01      	subs	r3, #1
 8041fc4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8041fc6:	429a      	cmp	r2, r3
 8041fc8:	d123      	bne.n	8042012 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8041fca:	697b      	ldr	r3, [r7, #20]
 8041fcc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8041fd0:	687b      	ldr	r3, [r7, #4]
 8041fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8041fd4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8041fd6:	429a      	cmp	r2, r3
 8041fd8:	d11b      	bne.n	8042012 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8041fda:	697b      	ldr	r3, [r7, #20]
 8041fdc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8041fe0:	687b      	ldr	r3, [r7, #4]
 8041fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8041fe4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8041fe6:	429a      	cmp	r2, r3
 8041fe8:	d113      	bne.n	8042012 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8041fea:	697b      	ldr	r3, [r7, #20]
 8041fec:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8041ff0:	687b      	ldr	r3, [r7, #4]
 8041ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041ff4:	085b      	lsrs	r3, r3, #1
 8041ff6:	3b01      	subs	r3, #1
 8041ff8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8041ffa:	429a      	cmp	r2, r3
 8041ffc:	d109      	bne.n	8042012 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8041ffe:	697b      	ldr	r3, [r7, #20]
 8042000:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8042004:	687b      	ldr	r3, [r7, #4]
 8042006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8042008:	085b      	lsrs	r3, r3, #1
 804200a:	3b01      	subs	r3, #1
 804200c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 804200e:	429a      	cmp	r2, r3
 8042010:	d001      	beq.n	8042016 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8042012:	2301      	movs	r3, #1
 8042014:	e000      	b.n	8042018 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8042016:	2300      	movs	r3, #0
}
 8042018:	4618      	mov	r0, r3
 804201a:	3720      	adds	r7, #32
 804201c:	46bd      	mov	sp, r7
 804201e:	bd80      	pop	{r7, pc}
 8042020:	40021000 	.word	0x40021000
 8042024:	019f800c 	.word	0x019f800c

08042028 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8042028:	b580      	push	{r7, lr}
 804202a:	b086      	sub	sp, #24
 804202c:	af00      	add	r7, sp, #0
 804202e:	6078      	str	r0, [r7, #4]
 8042030:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8042032:	2300      	movs	r3, #0
 8042034:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8042036:	687b      	ldr	r3, [r7, #4]
 8042038:	2b00      	cmp	r3, #0
 804203a:	d101      	bne.n	8042040 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 804203c:	2301      	movs	r3, #1
 804203e:	e11e      	b.n	804227e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8042040:	4b91      	ldr	r3, [pc, #580]	; (8042288 <HAL_RCC_ClockConfig+0x260>)
 8042042:	681b      	ldr	r3, [r3, #0]
 8042044:	f003 030f 	and.w	r3, r3, #15
 8042048:	683a      	ldr	r2, [r7, #0]
 804204a:	429a      	cmp	r2, r3
 804204c:	d910      	bls.n	8042070 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 804204e:	4b8e      	ldr	r3, [pc, #568]	; (8042288 <HAL_RCC_ClockConfig+0x260>)
 8042050:	681b      	ldr	r3, [r3, #0]
 8042052:	f023 020f 	bic.w	r2, r3, #15
 8042056:	498c      	ldr	r1, [pc, #560]	; (8042288 <HAL_RCC_ClockConfig+0x260>)
 8042058:	683b      	ldr	r3, [r7, #0]
 804205a:	4313      	orrs	r3, r2
 804205c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 804205e:	4b8a      	ldr	r3, [pc, #552]	; (8042288 <HAL_RCC_ClockConfig+0x260>)
 8042060:	681b      	ldr	r3, [r3, #0]
 8042062:	f003 030f 	and.w	r3, r3, #15
 8042066:	683a      	ldr	r2, [r7, #0]
 8042068:	429a      	cmp	r2, r3
 804206a:	d001      	beq.n	8042070 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 804206c:	2301      	movs	r3, #1
 804206e:	e106      	b.n	804227e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8042070:	687b      	ldr	r3, [r7, #4]
 8042072:	681b      	ldr	r3, [r3, #0]
 8042074:	f003 0301 	and.w	r3, r3, #1
 8042078:	2b00      	cmp	r3, #0
 804207a:	d073      	beq.n	8042164 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 804207c:	687b      	ldr	r3, [r7, #4]
 804207e:	685b      	ldr	r3, [r3, #4]
 8042080:	2b03      	cmp	r3, #3
 8042082:	d129      	bne.n	80420d8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8042084:	4b81      	ldr	r3, [pc, #516]	; (804228c <HAL_RCC_ClockConfig+0x264>)
 8042086:	681b      	ldr	r3, [r3, #0]
 8042088:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 804208c:	2b00      	cmp	r3, #0
 804208e:	d101      	bne.n	8042094 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8042090:	2301      	movs	r3, #1
 8042092:	e0f4      	b.n	804227e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8042094:	f000 f99e 	bl	80423d4 <RCC_GetSysClockFreqFromPLLSource>
 8042098:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 804209a:	693b      	ldr	r3, [r7, #16]
 804209c:	4a7c      	ldr	r2, [pc, #496]	; (8042290 <HAL_RCC_ClockConfig+0x268>)
 804209e:	4293      	cmp	r3, r2
 80420a0:	d93f      	bls.n	8042122 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80420a2:	4b7a      	ldr	r3, [pc, #488]	; (804228c <HAL_RCC_ClockConfig+0x264>)
 80420a4:	689b      	ldr	r3, [r3, #8]
 80420a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80420aa:	2b00      	cmp	r3, #0
 80420ac:	d009      	beq.n	80420c2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80420ae:	687b      	ldr	r3, [r7, #4]
 80420b0:	681b      	ldr	r3, [r3, #0]
 80420b2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80420b6:	2b00      	cmp	r3, #0
 80420b8:	d033      	beq.n	8042122 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80420ba:	687b      	ldr	r3, [r7, #4]
 80420bc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80420be:	2b00      	cmp	r3, #0
 80420c0:	d12f      	bne.n	8042122 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80420c2:	4b72      	ldr	r3, [pc, #456]	; (804228c <HAL_RCC_ClockConfig+0x264>)
 80420c4:	689b      	ldr	r3, [r3, #8]
 80420c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80420ca:	4a70      	ldr	r2, [pc, #448]	; (804228c <HAL_RCC_ClockConfig+0x264>)
 80420cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80420d0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80420d2:	2380      	movs	r3, #128	; 0x80
 80420d4:	617b      	str	r3, [r7, #20]
 80420d6:	e024      	b.n	8042122 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80420d8:	687b      	ldr	r3, [r7, #4]
 80420da:	685b      	ldr	r3, [r3, #4]
 80420dc:	2b02      	cmp	r3, #2
 80420de:	d107      	bne.n	80420f0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80420e0:	4b6a      	ldr	r3, [pc, #424]	; (804228c <HAL_RCC_ClockConfig+0x264>)
 80420e2:	681b      	ldr	r3, [r3, #0]
 80420e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80420e8:	2b00      	cmp	r3, #0
 80420ea:	d109      	bne.n	8042100 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80420ec:	2301      	movs	r3, #1
 80420ee:	e0c6      	b.n	804227e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80420f0:	4b66      	ldr	r3, [pc, #408]	; (804228c <HAL_RCC_ClockConfig+0x264>)
 80420f2:	681b      	ldr	r3, [r3, #0]
 80420f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80420f8:	2b00      	cmp	r3, #0
 80420fa:	d101      	bne.n	8042100 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80420fc:	2301      	movs	r3, #1
 80420fe:	e0be      	b.n	804227e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8042100:	f000 f8ce 	bl	80422a0 <HAL_RCC_GetSysClockFreq>
 8042104:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8042106:	693b      	ldr	r3, [r7, #16]
 8042108:	4a61      	ldr	r2, [pc, #388]	; (8042290 <HAL_RCC_ClockConfig+0x268>)
 804210a:	4293      	cmp	r3, r2
 804210c:	d909      	bls.n	8042122 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 804210e:	4b5f      	ldr	r3, [pc, #380]	; (804228c <HAL_RCC_ClockConfig+0x264>)
 8042110:	689b      	ldr	r3, [r3, #8]
 8042112:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8042116:	4a5d      	ldr	r2, [pc, #372]	; (804228c <HAL_RCC_ClockConfig+0x264>)
 8042118:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 804211c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 804211e:	2380      	movs	r3, #128	; 0x80
 8042120:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8042122:	4b5a      	ldr	r3, [pc, #360]	; (804228c <HAL_RCC_ClockConfig+0x264>)
 8042124:	689b      	ldr	r3, [r3, #8]
 8042126:	f023 0203 	bic.w	r2, r3, #3
 804212a:	687b      	ldr	r3, [r7, #4]
 804212c:	685b      	ldr	r3, [r3, #4]
 804212e:	4957      	ldr	r1, [pc, #348]	; (804228c <HAL_RCC_ClockConfig+0x264>)
 8042130:	4313      	orrs	r3, r2
 8042132:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8042134:	f7fe fe14 	bl	8040d60 <HAL_GetTick>
 8042138:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 804213a:	e00a      	b.n	8042152 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 804213c:	f7fe fe10 	bl	8040d60 <HAL_GetTick>
 8042140:	4602      	mov	r2, r0
 8042142:	68fb      	ldr	r3, [r7, #12]
 8042144:	1ad3      	subs	r3, r2, r3
 8042146:	f241 3288 	movw	r2, #5000	; 0x1388
 804214a:	4293      	cmp	r3, r2
 804214c:	d901      	bls.n	8042152 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 804214e:	2303      	movs	r3, #3
 8042150:	e095      	b.n	804227e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8042152:	4b4e      	ldr	r3, [pc, #312]	; (804228c <HAL_RCC_ClockConfig+0x264>)
 8042154:	689b      	ldr	r3, [r3, #8]
 8042156:	f003 020c 	and.w	r2, r3, #12
 804215a:	687b      	ldr	r3, [r7, #4]
 804215c:	685b      	ldr	r3, [r3, #4]
 804215e:	009b      	lsls	r3, r3, #2
 8042160:	429a      	cmp	r2, r3
 8042162:	d1eb      	bne.n	804213c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8042164:	687b      	ldr	r3, [r7, #4]
 8042166:	681b      	ldr	r3, [r3, #0]
 8042168:	f003 0302 	and.w	r3, r3, #2
 804216c:	2b00      	cmp	r3, #0
 804216e:	d023      	beq.n	80421b8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8042170:	687b      	ldr	r3, [r7, #4]
 8042172:	681b      	ldr	r3, [r3, #0]
 8042174:	f003 0304 	and.w	r3, r3, #4
 8042178:	2b00      	cmp	r3, #0
 804217a:	d005      	beq.n	8042188 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 804217c:	4b43      	ldr	r3, [pc, #268]	; (804228c <HAL_RCC_ClockConfig+0x264>)
 804217e:	689b      	ldr	r3, [r3, #8]
 8042180:	4a42      	ldr	r2, [pc, #264]	; (804228c <HAL_RCC_ClockConfig+0x264>)
 8042182:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8042186:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8042188:	687b      	ldr	r3, [r7, #4]
 804218a:	681b      	ldr	r3, [r3, #0]
 804218c:	f003 0308 	and.w	r3, r3, #8
 8042190:	2b00      	cmp	r3, #0
 8042192:	d007      	beq.n	80421a4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8042194:	4b3d      	ldr	r3, [pc, #244]	; (804228c <HAL_RCC_ClockConfig+0x264>)
 8042196:	689b      	ldr	r3, [r3, #8]
 8042198:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 804219c:	4a3b      	ldr	r2, [pc, #236]	; (804228c <HAL_RCC_ClockConfig+0x264>)
 804219e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80421a2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80421a4:	4b39      	ldr	r3, [pc, #228]	; (804228c <HAL_RCC_ClockConfig+0x264>)
 80421a6:	689b      	ldr	r3, [r3, #8]
 80421a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80421ac:	687b      	ldr	r3, [r7, #4]
 80421ae:	689b      	ldr	r3, [r3, #8]
 80421b0:	4936      	ldr	r1, [pc, #216]	; (804228c <HAL_RCC_ClockConfig+0x264>)
 80421b2:	4313      	orrs	r3, r2
 80421b4:	608b      	str	r3, [r1, #8]
 80421b6:	e008      	b.n	80421ca <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80421b8:	697b      	ldr	r3, [r7, #20]
 80421ba:	2b80      	cmp	r3, #128	; 0x80
 80421bc:	d105      	bne.n	80421ca <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80421be:	4b33      	ldr	r3, [pc, #204]	; (804228c <HAL_RCC_ClockConfig+0x264>)
 80421c0:	689b      	ldr	r3, [r3, #8]
 80421c2:	4a32      	ldr	r2, [pc, #200]	; (804228c <HAL_RCC_ClockConfig+0x264>)
 80421c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80421c8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80421ca:	4b2f      	ldr	r3, [pc, #188]	; (8042288 <HAL_RCC_ClockConfig+0x260>)
 80421cc:	681b      	ldr	r3, [r3, #0]
 80421ce:	f003 030f 	and.w	r3, r3, #15
 80421d2:	683a      	ldr	r2, [r7, #0]
 80421d4:	429a      	cmp	r2, r3
 80421d6:	d21d      	bcs.n	8042214 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80421d8:	4b2b      	ldr	r3, [pc, #172]	; (8042288 <HAL_RCC_ClockConfig+0x260>)
 80421da:	681b      	ldr	r3, [r3, #0]
 80421dc:	f023 020f 	bic.w	r2, r3, #15
 80421e0:	4929      	ldr	r1, [pc, #164]	; (8042288 <HAL_RCC_ClockConfig+0x260>)
 80421e2:	683b      	ldr	r3, [r7, #0]
 80421e4:	4313      	orrs	r3, r2
 80421e6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80421e8:	f7fe fdba 	bl	8040d60 <HAL_GetTick>
 80421ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80421ee:	e00a      	b.n	8042206 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80421f0:	f7fe fdb6 	bl	8040d60 <HAL_GetTick>
 80421f4:	4602      	mov	r2, r0
 80421f6:	68fb      	ldr	r3, [r7, #12]
 80421f8:	1ad3      	subs	r3, r2, r3
 80421fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80421fe:	4293      	cmp	r3, r2
 8042200:	d901      	bls.n	8042206 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8042202:	2303      	movs	r3, #3
 8042204:	e03b      	b.n	804227e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8042206:	4b20      	ldr	r3, [pc, #128]	; (8042288 <HAL_RCC_ClockConfig+0x260>)
 8042208:	681b      	ldr	r3, [r3, #0]
 804220a:	f003 030f 	and.w	r3, r3, #15
 804220e:	683a      	ldr	r2, [r7, #0]
 8042210:	429a      	cmp	r2, r3
 8042212:	d1ed      	bne.n	80421f0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8042214:	687b      	ldr	r3, [r7, #4]
 8042216:	681b      	ldr	r3, [r3, #0]
 8042218:	f003 0304 	and.w	r3, r3, #4
 804221c:	2b00      	cmp	r3, #0
 804221e:	d008      	beq.n	8042232 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8042220:	4b1a      	ldr	r3, [pc, #104]	; (804228c <HAL_RCC_ClockConfig+0x264>)
 8042222:	689b      	ldr	r3, [r3, #8]
 8042224:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8042228:	687b      	ldr	r3, [r7, #4]
 804222a:	68db      	ldr	r3, [r3, #12]
 804222c:	4917      	ldr	r1, [pc, #92]	; (804228c <HAL_RCC_ClockConfig+0x264>)
 804222e:	4313      	orrs	r3, r2
 8042230:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8042232:	687b      	ldr	r3, [r7, #4]
 8042234:	681b      	ldr	r3, [r3, #0]
 8042236:	f003 0308 	and.w	r3, r3, #8
 804223a:	2b00      	cmp	r3, #0
 804223c:	d009      	beq.n	8042252 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 804223e:	4b13      	ldr	r3, [pc, #76]	; (804228c <HAL_RCC_ClockConfig+0x264>)
 8042240:	689b      	ldr	r3, [r3, #8]
 8042242:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8042246:	687b      	ldr	r3, [r7, #4]
 8042248:	691b      	ldr	r3, [r3, #16]
 804224a:	00db      	lsls	r3, r3, #3
 804224c:	490f      	ldr	r1, [pc, #60]	; (804228c <HAL_RCC_ClockConfig+0x264>)
 804224e:	4313      	orrs	r3, r2
 8042250:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8042252:	f000 f825 	bl	80422a0 <HAL_RCC_GetSysClockFreq>
 8042256:	4602      	mov	r2, r0
 8042258:	4b0c      	ldr	r3, [pc, #48]	; (804228c <HAL_RCC_ClockConfig+0x264>)
 804225a:	689b      	ldr	r3, [r3, #8]
 804225c:	091b      	lsrs	r3, r3, #4
 804225e:	f003 030f 	and.w	r3, r3, #15
 8042262:	490c      	ldr	r1, [pc, #48]	; (8042294 <HAL_RCC_ClockConfig+0x26c>)
 8042264:	5ccb      	ldrb	r3, [r1, r3]
 8042266:	f003 031f 	and.w	r3, r3, #31
 804226a:	fa22 f303 	lsr.w	r3, r2, r3
 804226e:	4a0a      	ldr	r2, [pc, #40]	; (8042298 <HAL_RCC_ClockConfig+0x270>)
 8042270:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8042272:	4b0a      	ldr	r3, [pc, #40]	; (804229c <HAL_RCC_ClockConfig+0x274>)
 8042274:	681b      	ldr	r3, [r3, #0]
 8042276:	4618      	mov	r0, r3
 8042278:	f7fe fd26 	bl	8040cc8 <HAL_InitTick>
 804227c:	4603      	mov	r3, r0
}
 804227e:	4618      	mov	r0, r3
 8042280:	3718      	adds	r7, #24
 8042282:	46bd      	mov	sp, r7
 8042284:	bd80      	pop	{r7, pc}
 8042286:	bf00      	nop
 8042288:	40022000 	.word	0x40022000
 804228c:	40021000 	.word	0x40021000
 8042290:	04c4b400 	.word	0x04c4b400
 8042294:	08043dc8 	.word	0x08043dc8
 8042298:	20000000 	.word	0x20000000
 804229c:	20000004 	.word	0x20000004

080422a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80422a0:	b480      	push	{r7}
 80422a2:	b087      	sub	sp, #28
 80422a4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80422a6:	4b2c      	ldr	r3, [pc, #176]	; (8042358 <HAL_RCC_GetSysClockFreq+0xb8>)
 80422a8:	689b      	ldr	r3, [r3, #8]
 80422aa:	f003 030c 	and.w	r3, r3, #12
 80422ae:	2b04      	cmp	r3, #4
 80422b0:	d102      	bne.n	80422b8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80422b2:	4b2a      	ldr	r3, [pc, #168]	; (804235c <HAL_RCC_GetSysClockFreq+0xbc>)
 80422b4:	613b      	str	r3, [r7, #16]
 80422b6:	e047      	b.n	8042348 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80422b8:	4b27      	ldr	r3, [pc, #156]	; (8042358 <HAL_RCC_GetSysClockFreq+0xb8>)
 80422ba:	689b      	ldr	r3, [r3, #8]
 80422bc:	f003 030c 	and.w	r3, r3, #12
 80422c0:	2b08      	cmp	r3, #8
 80422c2:	d102      	bne.n	80422ca <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80422c4:	4b26      	ldr	r3, [pc, #152]	; (8042360 <HAL_RCC_GetSysClockFreq+0xc0>)
 80422c6:	613b      	str	r3, [r7, #16]
 80422c8:	e03e      	b.n	8042348 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80422ca:	4b23      	ldr	r3, [pc, #140]	; (8042358 <HAL_RCC_GetSysClockFreq+0xb8>)
 80422cc:	689b      	ldr	r3, [r3, #8]
 80422ce:	f003 030c 	and.w	r3, r3, #12
 80422d2:	2b0c      	cmp	r3, #12
 80422d4:	d136      	bne.n	8042344 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80422d6:	4b20      	ldr	r3, [pc, #128]	; (8042358 <HAL_RCC_GetSysClockFreq+0xb8>)
 80422d8:	68db      	ldr	r3, [r3, #12]
 80422da:	f003 0303 	and.w	r3, r3, #3
 80422de:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80422e0:	4b1d      	ldr	r3, [pc, #116]	; (8042358 <HAL_RCC_GetSysClockFreq+0xb8>)
 80422e2:	68db      	ldr	r3, [r3, #12]
 80422e4:	091b      	lsrs	r3, r3, #4
 80422e6:	f003 030f 	and.w	r3, r3, #15
 80422ea:	3301      	adds	r3, #1
 80422ec:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80422ee:	68fb      	ldr	r3, [r7, #12]
 80422f0:	2b03      	cmp	r3, #3
 80422f2:	d10c      	bne.n	804230e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80422f4:	4a1a      	ldr	r2, [pc, #104]	; (8042360 <HAL_RCC_GetSysClockFreq+0xc0>)
 80422f6:	68bb      	ldr	r3, [r7, #8]
 80422f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80422fc:	4a16      	ldr	r2, [pc, #88]	; (8042358 <HAL_RCC_GetSysClockFreq+0xb8>)
 80422fe:	68d2      	ldr	r2, [r2, #12]
 8042300:	0a12      	lsrs	r2, r2, #8
 8042302:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8042306:	fb02 f303 	mul.w	r3, r2, r3
 804230a:	617b      	str	r3, [r7, #20]
      break;
 804230c:	e00c      	b.n	8042328 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 804230e:	4a13      	ldr	r2, [pc, #76]	; (804235c <HAL_RCC_GetSysClockFreq+0xbc>)
 8042310:	68bb      	ldr	r3, [r7, #8]
 8042312:	fbb2 f3f3 	udiv	r3, r2, r3
 8042316:	4a10      	ldr	r2, [pc, #64]	; (8042358 <HAL_RCC_GetSysClockFreq+0xb8>)
 8042318:	68d2      	ldr	r2, [r2, #12]
 804231a:	0a12      	lsrs	r2, r2, #8
 804231c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8042320:	fb02 f303 	mul.w	r3, r2, r3
 8042324:	617b      	str	r3, [r7, #20]
      break;
 8042326:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8042328:	4b0b      	ldr	r3, [pc, #44]	; (8042358 <HAL_RCC_GetSysClockFreq+0xb8>)
 804232a:	68db      	ldr	r3, [r3, #12]
 804232c:	0e5b      	lsrs	r3, r3, #25
 804232e:	f003 0303 	and.w	r3, r3, #3
 8042332:	3301      	adds	r3, #1
 8042334:	005b      	lsls	r3, r3, #1
 8042336:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8042338:	697a      	ldr	r2, [r7, #20]
 804233a:	687b      	ldr	r3, [r7, #4]
 804233c:	fbb2 f3f3 	udiv	r3, r2, r3
 8042340:	613b      	str	r3, [r7, #16]
 8042342:	e001      	b.n	8042348 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8042344:	2300      	movs	r3, #0
 8042346:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8042348:	693b      	ldr	r3, [r7, #16]
}
 804234a:	4618      	mov	r0, r3
 804234c:	371c      	adds	r7, #28
 804234e:	46bd      	mov	sp, r7
 8042350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042354:	4770      	bx	lr
 8042356:	bf00      	nop
 8042358:	40021000 	.word	0x40021000
 804235c:	00f42400 	.word	0x00f42400
 8042360:	016e3600 	.word	0x016e3600

08042364 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8042364:	b480      	push	{r7}
 8042366:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8042368:	4b03      	ldr	r3, [pc, #12]	; (8042378 <HAL_RCC_GetHCLKFreq+0x14>)
 804236a:	681b      	ldr	r3, [r3, #0]
}
 804236c:	4618      	mov	r0, r3
 804236e:	46bd      	mov	sp, r7
 8042370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042374:	4770      	bx	lr
 8042376:	bf00      	nop
 8042378:	20000000 	.word	0x20000000

0804237c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 804237c:	b580      	push	{r7, lr}
 804237e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8042380:	f7ff fff0 	bl	8042364 <HAL_RCC_GetHCLKFreq>
 8042384:	4602      	mov	r2, r0
 8042386:	4b06      	ldr	r3, [pc, #24]	; (80423a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8042388:	689b      	ldr	r3, [r3, #8]
 804238a:	0a1b      	lsrs	r3, r3, #8
 804238c:	f003 0307 	and.w	r3, r3, #7
 8042390:	4904      	ldr	r1, [pc, #16]	; (80423a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8042392:	5ccb      	ldrb	r3, [r1, r3]
 8042394:	f003 031f 	and.w	r3, r3, #31
 8042398:	fa22 f303 	lsr.w	r3, r2, r3
}
 804239c:	4618      	mov	r0, r3
 804239e:	bd80      	pop	{r7, pc}
 80423a0:	40021000 	.word	0x40021000
 80423a4:	08043dd8 	.word	0x08043dd8

080423a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80423a8:	b580      	push	{r7, lr}
 80423aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80423ac:	f7ff ffda 	bl	8042364 <HAL_RCC_GetHCLKFreq>
 80423b0:	4602      	mov	r2, r0
 80423b2:	4b06      	ldr	r3, [pc, #24]	; (80423cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80423b4:	689b      	ldr	r3, [r3, #8]
 80423b6:	0adb      	lsrs	r3, r3, #11
 80423b8:	f003 0307 	and.w	r3, r3, #7
 80423bc:	4904      	ldr	r1, [pc, #16]	; (80423d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80423be:	5ccb      	ldrb	r3, [r1, r3]
 80423c0:	f003 031f 	and.w	r3, r3, #31
 80423c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80423c8:	4618      	mov	r0, r3
 80423ca:	bd80      	pop	{r7, pc}
 80423cc:	40021000 	.word	0x40021000
 80423d0:	08043dd8 	.word	0x08043dd8

080423d4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80423d4:	b480      	push	{r7}
 80423d6:	b087      	sub	sp, #28
 80423d8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80423da:	4b1e      	ldr	r3, [pc, #120]	; (8042454 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80423dc:	68db      	ldr	r3, [r3, #12]
 80423de:	f003 0303 	and.w	r3, r3, #3
 80423e2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80423e4:	4b1b      	ldr	r3, [pc, #108]	; (8042454 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80423e6:	68db      	ldr	r3, [r3, #12]
 80423e8:	091b      	lsrs	r3, r3, #4
 80423ea:	f003 030f 	and.w	r3, r3, #15
 80423ee:	3301      	adds	r3, #1
 80423f0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80423f2:	693b      	ldr	r3, [r7, #16]
 80423f4:	2b03      	cmp	r3, #3
 80423f6:	d10c      	bne.n	8042412 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80423f8:	4a17      	ldr	r2, [pc, #92]	; (8042458 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80423fa:	68fb      	ldr	r3, [r7, #12]
 80423fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8042400:	4a14      	ldr	r2, [pc, #80]	; (8042454 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8042402:	68d2      	ldr	r2, [r2, #12]
 8042404:	0a12      	lsrs	r2, r2, #8
 8042406:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 804240a:	fb02 f303 	mul.w	r3, r2, r3
 804240e:	617b      	str	r3, [r7, #20]
    break;
 8042410:	e00c      	b.n	804242c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8042412:	4a12      	ldr	r2, [pc, #72]	; (804245c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8042414:	68fb      	ldr	r3, [r7, #12]
 8042416:	fbb2 f3f3 	udiv	r3, r2, r3
 804241a:	4a0e      	ldr	r2, [pc, #56]	; (8042454 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 804241c:	68d2      	ldr	r2, [r2, #12]
 804241e:	0a12      	lsrs	r2, r2, #8
 8042420:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8042424:	fb02 f303 	mul.w	r3, r2, r3
 8042428:	617b      	str	r3, [r7, #20]
    break;
 804242a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 804242c:	4b09      	ldr	r3, [pc, #36]	; (8042454 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 804242e:	68db      	ldr	r3, [r3, #12]
 8042430:	0e5b      	lsrs	r3, r3, #25
 8042432:	f003 0303 	and.w	r3, r3, #3
 8042436:	3301      	adds	r3, #1
 8042438:	005b      	lsls	r3, r3, #1
 804243a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 804243c:	697a      	ldr	r2, [r7, #20]
 804243e:	68bb      	ldr	r3, [r7, #8]
 8042440:	fbb2 f3f3 	udiv	r3, r2, r3
 8042444:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8042446:	687b      	ldr	r3, [r7, #4]
}
 8042448:	4618      	mov	r0, r3
 804244a:	371c      	adds	r7, #28
 804244c:	46bd      	mov	sp, r7
 804244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042452:	4770      	bx	lr
 8042454:	40021000 	.word	0x40021000
 8042458:	016e3600 	.word	0x016e3600
 804245c:	00f42400 	.word	0x00f42400

08042460 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8042460:	b580      	push	{r7, lr}
 8042462:	b086      	sub	sp, #24
 8042464:	af00      	add	r7, sp, #0
 8042466:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8042468:	2300      	movs	r3, #0
 804246a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 804246c:	2300      	movs	r3, #0
 804246e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8042470:	687b      	ldr	r3, [r7, #4]
 8042472:	681b      	ldr	r3, [r3, #0]
 8042474:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8042478:	2b00      	cmp	r3, #0
 804247a:	f000 8098 	beq.w	80425ae <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 804247e:	2300      	movs	r3, #0
 8042480:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8042482:	4b43      	ldr	r3, [pc, #268]	; (8042590 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8042484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8042486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 804248a:	2b00      	cmp	r3, #0
 804248c:	d10d      	bne.n	80424aa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 804248e:	4b40      	ldr	r3, [pc, #256]	; (8042590 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8042490:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8042492:	4a3f      	ldr	r2, [pc, #252]	; (8042590 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8042494:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8042498:	6593      	str	r3, [r2, #88]	; 0x58
 804249a:	4b3d      	ldr	r3, [pc, #244]	; (8042590 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 804249c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804249e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80424a2:	60bb      	str	r3, [r7, #8]
 80424a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80424a6:	2301      	movs	r3, #1
 80424a8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80424aa:	4b3a      	ldr	r3, [pc, #232]	; (8042594 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80424ac:	681b      	ldr	r3, [r3, #0]
 80424ae:	4a39      	ldr	r2, [pc, #228]	; (8042594 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80424b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80424b4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80424b6:	f7fe fc53 	bl	8040d60 <HAL_GetTick>
 80424ba:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80424bc:	e009      	b.n	80424d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80424be:	f7fe fc4f 	bl	8040d60 <HAL_GetTick>
 80424c2:	4602      	mov	r2, r0
 80424c4:	68fb      	ldr	r3, [r7, #12]
 80424c6:	1ad3      	subs	r3, r2, r3
 80424c8:	2b02      	cmp	r3, #2
 80424ca:	d902      	bls.n	80424d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80424cc:	2303      	movs	r3, #3
 80424ce:	74fb      	strb	r3, [r7, #19]
        break;
 80424d0:	e005      	b.n	80424de <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80424d2:	4b30      	ldr	r3, [pc, #192]	; (8042594 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80424d4:	681b      	ldr	r3, [r3, #0]
 80424d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80424da:	2b00      	cmp	r3, #0
 80424dc:	d0ef      	beq.n	80424be <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80424de:	7cfb      	ldrb	r3, [r7, #19]
 80424e0:	2b00      	cmp	r3, #0
 80424e2:	d159      	bne.n	8042598 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80424e4:	4b2a      	ldr	r3, [pc, #168]	; (8042590 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80424e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80424ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80424ee:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80424f0:	697b      	ldr	r3, [r7, #20]
 80424f2:	2b00      	cmp	r3, #0
 80424f4:	d01e      	beq.n	8042534 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80424f6:	687b      	ldr	r3, [r7, #4]
 80424f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80424fa:	697a      	ldr	r2, [r7, #20]
 80424fc:	429a      	cmp	r2, r3
 80424fe:	d019      	beq.n	8042534 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8042500:	4b23      	ldr	r3, [pc, #140]	; (8042590 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8042502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8042506:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 804250a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 804250c:	4b20      	ldr	r3, [pc, #128]	; (8042590 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 804250e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8042512:	4a1f      	ldr	r2, [pc, #124]	; (8042590 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8042514:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8042518:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 804251c:	4b1c      	ldr	r3, [pc, #112]	; (8042590 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 804251e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8042522:	4a1b      	ldr	r2, [pc, #108]	; (8042590 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8042524:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8042528:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 804252c:	4a18      	ldr	r2, [pc, #96]	; (8042590 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 804252e:	697b      	ldr	r3, [r7, #20]
 8042530:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8042534:	697b      	ldr	r3, [r7, #20]
 8042536:	f003 0301 	and.w	r3, r3, #1
 804253a:	2b00      	cmp	r3, #0
 804253c:	d016      	beq.n	804256c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 804253e:	f7fe fc0f 	bl	8040d60 <HAL_GetTick>
 8042542:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8042544:	e00b      	b.n	804255e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8042546:	f7fe fc0b 	bl	8040d60 <HAL_GetTick>
 804254a:	4602      	mov	r2, r0
 804254c:	68fb      	ldr	r3, [r7, #12]
 804254e:	1ad3      	subs	r3, r2, r3
 8042550:	f241 3288 	movw	r2, #5000	; 0x1388
 8042554:	4293      	cmp	r3, r2
 8042556:	d902      	bls.n	804255e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8042558:	2303      	movs	r3, #3
 804255a:	74fb      	strb	r3, [r7, #19]
            break;
 804255c:	e006      	b.n	804256c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 804255e:	4b0c      	ldr	r3, [pc, #48]	; (8042590 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8042560:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8042564:	f003 0302 	and.w	r3, r3, #2
 8042568:	2b00      	cmp	r3, #0
 804256a:	d0ec      	beq.n	8042546 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 804256c:	7cfb      	ldrb	r3, [r7, #19]
 804256e:	2b00      	cmp	r3, #0
 8042570:	d10b      	bne.n	804258a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8042572:	4b07      	ldr	r3, [pc, #28]	; (8042590 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8042574:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8042578:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 804257c:	687b      	ldr	r3, [r7, #4]
 804257e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8042580:	4903      	ldr	r1, [pc, #12]	; (8042590 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8042582:	4313      	orrs	r3, r2
 8042584:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8042588:	e008      	b.n	804259c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 804258a:	7cfb      	ldrb	r3, [r7, #19]
 804258c:	74bb      	strb	r3, [r7, #18]
 804258e:	e005      	b.n	804259c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8042590:	40021000 	.word	0x40021000
 8042594:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8042598:	7cfb      	ldrb	r3, [r7, #19]
 804259a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 804259c:	7c7b      	ldrb	r3, [r7, #17]
 804259e:	2b01      	cmp	r3, #1
 80425a0:	d105      	bne.n	80425ae <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80425a2:	4ba7      	ldr	r3, [pc, #668]	; (8042840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80425a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80425a6:	4aa6      	ldr	r2, [pc, #664]	; (8042840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80425a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80425ac:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80425ae:	687b      	ldr	r3, [r7, #4]
 80425b0:	681b      	ldr	r3, [r3, #0]
 80425b2:	f003 0301 	and.w	r3, r3, #1
 80425b6:	2b00      	cmp	r3, #0
 80425b8:	d00a      	beq.n	80425d0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80425ba:	4ba1      	ldr	r3, [pc, #644]	; (8042840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80425bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80425c0:	f023 0203 	bic.w	r2, r3, #3
 80425c4:	687b      	ldr	r3, [r7, #4]
 80425c6:	685b      	ldr	r3, [r3, #4]
 80425c8:	499d      	ldr	r1, [pc, #628]	; (8042840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80425ca:	4313      	orrs	r3, r2
 80425cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80425d0:	687b      	ldr	r3, [r7, #4]
 80425d2:	681b      	ldr	r3, [r3, #0]
 80425d4:	f003 0302 	and.w	r3, r3, #2
 80425d8:	2b00      	cmp	r3, #0
 80425da:	d00a      	beq.n	80425f2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80425dc:	4b98      	ldr	r3, [pc, #608]	; (8042840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80425de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80425e2:	f023 020c 	bic.w	r2, r3, #12
 80425e6:	687b      	ldr	r3, [r7, #4]
 80425e8:	689b      	ldr	r3, [r3, #8]
 80425ea:	4995      	ldr	r1, [pc, #596]	; (8042840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80425ec:	4313      	orrs	r3, r2
 80425ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80425f2:	687b      	ldr	r3, [r7, #4]
 80425f4:	681b      	ldr	r3, [r3, #0]
 80425f6:	f003 0304 	and.w	r3, r3, #4
 80425fa:	2b00      	cmp	r3, #0
 80425fc:	d00a      	beq.n	8042614 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80425fe:	4b90      	ldr	r3, [pc, #576]	; (8042840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8042600:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042604:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8042608:	687b      	ldr	r3, [r7, #4]
 804260a:	68db      	ldr	r3, [r3, #12]
 804260c:	498c      	ldr	r1, [pc, #560]	; (8042840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 804260e:	4313      	orrs	r3, r2
 8042610:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8042614:	687b      	ldr	r3, [r7, #4]
 8042616:	681b      	ldr	r3, [r3, #0]
 8042618:	f003 0308 	and.w	r3, r3, #8
 804261c:	2b00      	cmp	r3, #0
 804261e:	d00a      	beq.n	8042636 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8042620:	4b87      	ldr	r3, [pc, #540]	; (8042840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8042622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042626:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 804262a:	687b      	ldr	r3, [r7, #4]
 804262c:	691b      	ldr	r3, [r3, #16]
 804262e:	4984      	ldr	r1, [pc, #528]	; (8042840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8042630:	4313      	orrs	r3, r2
 8042632:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8042636:	687b      	ldr	r3, [r7, #4]
 8042638:	681b      	ldr	r3, [r3, #0]
 804263a:	f003 0310 	and.w	r3, r3, #16
 804263e:	2b00      	cmp	r3, #0
 8042640:	d00a      	beq.n	8042658 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8042642:	4b7f      	ldr	r3, [pc, #508]	; (8042840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8042644:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042648:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 804264c:	687b      	ldr	r3, [r7, #4]
 804264e:	695b      	ldr	r3, [r3, #20]
 8042650:	497b      	ldr	r1, [pc, #492]	; (8042840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8042652:	4313      	orrs	r3, r2
 8042654:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8042658:	687b      	ldr	r3, [r7, #4]
 804265a:	681b      	ldr	r3, [r3, #0]
 804265c:	f003 0320 	and.w	r3, r3, #32
 8042660:	2b00      	cmp	r3, #0
 8042662:	d00a      	beq.n	804267a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8042664:	4b76      	ldr	r3, [pc, #472]	; (8042840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8042666:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804266a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 804266e:	687b      	ldr	r3, [r7, #4]
 8042670:	699b      	ldr	r3, [r3, #24]
 8042672:	4973      	ldr	r1, [pc, #460]	; (8042840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8042674:	4313      	orrs	r3, r2
 8042676:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 804267a:	687b      	ldr	r3, [r7, #4]
 804267c:	681b      	ldr	r3, [r3, #0]
 804267e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8042682:	2b00      	cmp	r3, #0
 8042684:	d00a      	beq.n	804269c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8042686:	4b6e      	ldr	r3, [pc, #440]	; (8042840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8042688:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804268c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8042690:	687b      	ldr	r3, [r7, #4]
 8042692:	69db      	ldr	r3, [r3, #28]
 8042694:	496a      	ldr	r1, [pc, #424]	; (8042840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8042696:	4313      	orrs	r3, r2
 8042698:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 804269c:	687b      	ldr	r3, [r7, #4]
 804269e:	681b      	ldr	r3, [r3, #0]
 80426a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80426a4:	2b00      	cmp	r3, #0
 80426a6:	d00a      	beq.n	80426be <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80426a8:	4b65      	ldr	r3, [pc, #404]	; (8042840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80426aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80426ae:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80426b2:	687b      	ldr	r3, [r7, #4]
 80426b4:	6a1b      	ldr	r3, [r3, #32]
 80426b6:	4962      	ldr	r1, [pc, #392]	; (8042840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80426b8:	4313      	orrs	r3, r2
 80426ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80426be:	687b      	ldr	r3, [r7, #4]
 80426c0:	681b      	ldr	r3, [r3, #0]
 80426c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80426c6:	2b00      	cmp	r3, #0
 80426c8:	d00a      	beq.n	80426e0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80426ca:	4b5d      	ldr	r3, [pc, #372]	; (8042840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80426cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80426d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80426d4:	687b      	ldr	r3, [r7, #4]
 80426d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80426d8:	4959      	ldr	r1, [pc, #356]	; (8042840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80426da:	4313      	orrs	r3, r2
 80426dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80426e0:	687b      	ldr	r3, [r7, #4]
 80426e2:	681b      	ldr	r3, [r3, #0]
 80426e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80426e8:	2b00      	cmp	r3, #0
 80426ea:	d00a      	beq.n	8042702 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80426ec:	4b54      	ldr	r3, [pc, #336]	; (8042840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80426ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80426f2:	f023 0203 	bic.w	r2, r3, #3
 80426f6:	687b      	ldr	r3, [r7, #4]
 80426f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80426fa:	4951      	ldr	r1, [pc, #324]	; (8042840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80426fc:	4313      	orrs	r3, r2
 80426fe:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8042702:	687b      	ldr	r3, [r7, #4]
 8042704:	681b      	ldr	r3, [r3, #0]
 8042706:	f403 7300 	and.w	r3, r3, #512	; 0x200
 804270a:	2b00      	cmp	r3, #0
 804270c:	d00a      	beq.n	8042724 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 804270e:	4b4c      	ldr	r3, [pc, #304]	; (8042840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8042710:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042714:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8042718:	687b      	ldr	r3, [r7, #4]
 804271a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804271c:	4948      	ldr	r1, [pc, #288]	; (8042840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 804271e:	4313      	orrs	r3, r2
 8042720:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8042724:	687b      	ldr	r3, [r7, #4]
 8042726:	681b      	ldr	r3, [r3, #0]
 8042728:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 804272c:	2b00      	cmp	r3, #0
 804272e:	d015      	beq.n	804275c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8042730:	4b43      	ldr	r3, [pc, #268]	; (8042840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8042732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042736:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 804273a:	687b      	ldr	r3, [r7, #4]
 804273c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804273e:	4940      	ldr	r1, [pc, #256]	; (8042840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8042740:	4313      	orrs	r3, r2
 8042742:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8042746:	687b      	ldr	r3, [r7, #4]
 8042748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804274a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 804274e:	d105      	bne.n	804275c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8042750:	4b3b      	ldr	r3, [pc, #236]	; (8042840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8042752:	68db      	ldr	r3, [r3, #12]
 8042754:	4a3a      	ldr	r2, [pc, #232]	; (8042840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8042756:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 804275a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 804275c:	687b      	ldr	r3, [r7, #4]
 804275e:	681b      	ldr	r3, [r3, #0]
 8042760:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8042764:	2b00      	cmp	r3, #0
 8042766:	d015      	beq.n	8042794 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8042768:	4b35      	ldr	r3, [pc, #212]	; (8042840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 804276a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804276e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8042772:	687b      	ldr	r3, [r7, #4]
 8042774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8042776:	4932      	ldr	r1, [pc, #200]	; (8042840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8042778:	4313      	orrs	r3, r2
 804277a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 804277e:	687b      	ldr	r3, [r7, #4]
 8042780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8042782:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8042786:	d105      	bne.n	8042794 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8042788:	4b2d      	ldr	r3, [pc, #180]	; (8042840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 804278a:	68db      	ldr	r3, [r3, #12]
 804278c:	4a2c      	ldr	r2, [pc, #176]	; (8042840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 804278e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8042792:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8042794:	687b      	ldr	r3, [r7, #4]
 8042796:	681b      	ldr	r3, [r3, #0]
 8042798:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 804279c:	2b00      	cmp	r3, #0
 804279e:	d015      	beq.n	80427cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80427a0:	4b27      	ldr	r3, [pc, #156]	; (8042840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80427a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80427a6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80427aa:	687b      	ldr	r3, [r7, #4]
 80427ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80427ae:	4924      	ldr	r1, [pc, #144]	; (8042840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80427b0:	4313      	orrs	r3, r2
 80427b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80427b6:	687b      	ldr	r3, [r7, #4]
 80427b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80427ba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80427be:	d105      	bne.n	80427cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80427c0:	4b1f      	ldr	r3, [pc, #124]	; (8042840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80427c2:	68db      	ldr	r3, [r3, #12]
 80427c4:	4a1e      	ldr	r2, [pc, #120]	; (8042840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80427c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80427ca:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80427cc:	687b      	ldr	r3, [r7, #4]
 80427ce:	681b      	ldr	r3, [r3, #0]
 80427d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80427d4:	2b00      	cmp	r3, #0
 80427d6:	d015      	beq.n	8042804 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80427d8:	4b19      	ldr	r3, [pc, #100]	; (8042840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80427da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80427de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80427e2:	687b      	ldr	r3, [r7, #4]
 80427e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80427e6:	4916      	ldr	r1, [pc, #88]	; (8042840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80427e8:	4313      	orrs	r3, r2
 80427ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80427ee:	687b      	ldr	r3, [r7, #4]
 80427f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80427f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80427f6:	d105      	bne.n	8042804 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80427f8:	4b11      	ldr	r3, [pc, #68]	; (8042840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80427fa:	68db      	ldr	r3, [r3, #12]
 80427fc:	4a10      	ldr	r2, [pc, #64]	; (8042840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80427fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8042802:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8042804:	687b      	ldr	r3, [r7, #4]
 8042806:	681b      	ldr	r3, [r3, #0]
 8042808:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 804280c:	2b00      	cmp	r3, #0
 804280e:	d019      	beq.n	8042844 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8042810:	4b0b      	ldr	r3, [pc, #44]	; (8042840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8042812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042816:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 804281a:	687b      	ldr	r3, [r7, #4]
 804281c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804281e:	4908      	ldr	r1, [pc, #32]	; (8042840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8042820:	4313      	orrs	r3, r2
 8042822:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8042826:	687b      	ldr	r3, [r7, #4]
 8042828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804282a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 804282e:	d109      	bne.n	8042844 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8042830:	4b03      	ldr	r3, [pc, #12]	; (8042840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8042832:	68db      	ldr	r3, [r3, #12]
 8042834:	4a02      	ldr	r2, [pc, #8]	; (8042840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8042836:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 804283a:	60d3      	str	r3, [r2, #12]
 804283c:	e002      	b.n	8042844 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 804283e:	bf00      	nop
 8042840:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8042844:	687b      	ldr	r3, [r7, #4]
 8042846:	681b      	ldr	r3, [r3, #0]
 8042848:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 804284c:	2b00      	cmp	r3, #0
 804284e:	d015      	beq.n	804287c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8042850:	4b29      	ldr	r3, [pc, #164]	; (80428f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8042852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042856:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 804285a:	687b      	ldr	r3, [r7, #4]
 804285c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804285e:	4926      	ldr	r1, [pc, #152]	; (80428f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8042860:	4313      	orrs	r3, r2
 8042862:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8042866:	687b      	ldr	r3, [r7, #4]
 8042868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804286a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 804286e:	d105      	bne.n	804287c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8042870:	4b21      	ldr	r3, [pc, #132]	; (80428f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8042872:	68db      	ldr	r3, [r3, #12]
 8042874:	4a20      	ldr	r2, [pc, #128]	; (80428f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8042876:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 804287a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 804287c:	687b      	ldr	r3, [r7, #4]
 804287e:	681b      	ldr	r3, [r3, #0]
 8042880:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8042884:	2b00      	cmp	r3, #0
 8042886:	d015      	beq.n	80428b4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8042888:	4b1b      	ldr	r3, [pc, #108]	; (80428f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 804288a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804288e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8042892:	687b      	ldr	r3, [r7, #4]
 8042894:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8042896:	4918      	ldr	r1, [pc, #96]	; (80428f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8042898:	4313      	orrs	r3, r2
 804289a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 804289e:	687b      	ldr	r3, [r7, #4]
 80428a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80428a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80428a6:	d105      	bne.n	80428b4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80428a8:	4b13      	ldr	r3, [pc, #76]	; (80428f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80428aa:	68db      	ldr	r3, [r3, #12]
 80428ac:	4a12      	ldr	r2, [pc, #72]	; (80428f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80428ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80428b2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80428b4:	687b      	ldr	r3, [r7, #4]
 80428b6:	681b      	ldr	r3, [r3, #0]
 80428b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80428bc:	2b00      	cmp	r3, #0
 80428be:	d015      	beq.n	80428ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80428c0:	4b0d      	ldr	r3, [pc, #52]	; (80428f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80428c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80428c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80428ca:	687b      	ldr	r3, [r7, #4]
 80428cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80428ce:	490a      	ldr	r1, [pc, #40]	; (80428f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80428d0:	4313      	orrs	r3, r2
 80428d2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80428d6:	687b      	ldr	r3, [r7, #4]
 80428d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80428da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80428de:	d105      	bne.n	80428ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80428e0:	4b05      	ldr	r3, [pc, #20]	; (80428f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80428e2:	68db      	ldr	r3, [r3, #12]
 80428e4:	4a04      	ldr	r2, [pc, #16]	; (80428f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80428e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80428ea:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80428ec:	7cbb      	ldrb	r3, [r7, #18]
}
 80428ee:	4618      	mov	r0, r3
 80428f0:	3718      	adds	r7, #24
 80428f2:	46bd      	mov	sp, r7
 80428f4:	bd80      	pop	{r7, pc}
 80428f6:	bf00      	nop
 80428f8:	40021000 	.word	0x40021000

080428fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80428fc:	b580      	push	{r7, lr}
 80428fe:	b082      	sub	sp, #8
 8042900:	af00      	add	r7, sp, #0
 8042902:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8042904:	687b      	ldr	r3, [r7, #4]
 8042906:	2b00      	cmp	r3, #0
 8042908:	d101      	bne.n	804290e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 804290a:	2301      	movs	r3, #1
 804290c:	e049      	b.n	80429a2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 804290e:	687b      	ldr	r3, [r7, #4]
 8042910:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8042914:	b2db      	uxtb	r3, r3
 8042916:	2b00      	cmp	r3, #0
 8042918:	d106      	bne.n	8042928 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 804291a:	687b      	ldr	r3, [r7, #4]
 804291c:	2200      	movs	r2, #0
 804291e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8042922:	6878      	ldr	r0, [r7, #4]
 8042924:	f7fe f8ba 	bl	8040a9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8042928:	687b      	ldr	r3, [r7, #4]
 804292a:	2202      	movs	r2, #2
 804292c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8042930:	687b      	ldr	r3, [r7, #4]
 8042932:	681a      	ldr	r2, [r3, #0]
 8042934:	687b      	ldr	r3, [r7, #4]
 8042936:	3304      	adds	r3, #4
 8042938:	4619      	mov	r1, r3
 804293a:	4610      	mov	r0, r2
 804293c:	f000 fa56 	bl	8042dec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8042940:	687b      	ldr	r3, [r7, #4]
 8042942:	2201      	movs	r2, #1
 8042944:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8042948:	687b      	ldr	r3, [r7, #4]
 804294a:	2201      	movs	r2, #1
 804294c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8042950:	687b      	ldr	r3, [r7, #4]
 8042952:	2201      	movs	r2, #1
 8042954:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8042958:	687b      	ldr	r3, [r7, #4]
 804295a:	2201      	movs	r2, #1
 804295c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8042960:	687b      	ldr	r3, [r7, #4]
 8042962:	2201      	movs	r2, #1
 8042964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8042968:	687b      	ldr	r3, [r7, #4]
 804296a:	2201      	movs	r2, #1
 804296c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8042970:	687b      	ldr	r3, [r7, #4]
 8042972:	2201      	movs	r2, #1
 8042974:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8042978:	687b      	ldr	r3, [r7, #4]
 804297a:	2201      	movs	r2, #1
 804297c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8042980:	687b      	ldr	r3, [r7, #4]
 8042982:	2201      	movs	r2, #1
 8042984:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8042988:	687b      	ldr	r3, [r7, #4]
 804298a:	2201      	movs	r2, #1
 804298c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8042990:	687b      	ldr	r3, [r7, #4]
 8042992:	2201      	movs	r2, #1
 8042994:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8042998:	687b      	ldr	r3, [r7, #4]
 804299a:	2201      	movs	r2, #1
 804299c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80429a0:	2300      	movs	r3, #0
}
 80429a2:	4618      	mov	r0, r3
 80429a4:	3708      	adds	r7, #8
 80429a6:	46bd      	mov	sp, r7
 80429a8:	bd80      	pop	{r7, pc}
	...

080429ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80429ac:	b480      	push	{r7}
 80429ae:	b085      	sub	sp, #20
 80429b0:	af00      	add	r7, sp, #0
 80429b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80429b4:	687b      	ldr	r3, [r7, #4]
 80429b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80429ba:	b2db      	uxtb	r3, r3
 80429bc:	2b01      	cmp	r3, #1
 80429be:	d001      	beq.n	80429c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80429c0:	2301      	movs	r3, #1
 80429c2:	e054      	b.n	8042a6e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80429c4:	687b      	ldr	r3, [r7, #4]
 80429c6:	2202      	movs	r2, #2
 80429c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80429cc:	687b      	ldr	r3, [r7, #4]
 80429ce:	681b      	ldr	r3, [r3, #0]
 80429d0:	68da      	ldr	r2, [r3, #12]
 80429d2:	687b      	ldr	r3, [r7, #4]
 80429d4:	681b      	ldr	r3, [r3, #0]
 80429d6:	f042 0201 	orr.w	r2, r2, #1
 80429da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80429dc:	687b      	ldr	r3, [r7, #4]
 80429de:	681b      	ldr	r3, [r3, #0]
 80429e0:	4a26      	ldr	r2, [pc, #152]	; (8042a7c <HAL_TIM_Base_Start_IT+0xd0>)
 80429e2:	4293      	cmp	r3, r2
 80429e4:	d022      	beq.n	8042a2c <HAL_TIM_Base_Start_IT+0x80>
 80429e6:	687b      	ldr	r3, [r7, #4]
 80429e8:	681b      	ldr	r3, [r3, #0]
 80429ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80429ee:	d01d      	beq.n	8042a2c <HAL_TIM_Base_Start_IT+0x80>
 80429f0:	687b      	ldr	r3, [r7, #4]
 80429f2:	681b      	ldr	r3, [r3, #0]
 80429f4:	4a22      	ldr	r2, [pc, #136]	; (8042a80 <HAL_TIM_Base_Start_IT+0xd4>)
 80429f6:	4293      	cmp	r3, r2
 80429f8:	d018      	beq.n	8042a2c <HAL_TIM_Base_Start_IT+0x80>
 80429fa:	687b      	ldr	r3, [r7, #4]
 80429fc:	681b      	ldr	r3, [r3, #0]
 80429fe:	4a21      	ldr	r2, [pc, #132]	; (8042a84 <HAL_TIM_Base_Start_IT+0xd8>)
 8042a00:	4293      	cmp	r3, r2
 8042a02:	d013      	beq.n	8042a2c <HAL_TIM_Base_Start_IT+0x80>
 8042a04:	687b      	ldr	r3, [r7, #4]
 8042a06:	681b      	ldr	r3, [r3, #0]
 8042a08:	4a1f      	ldr	r2, [pc, #124]	; (8042a88 <HAL_TIM_Base_Start_IT+0xdc>)
 8042a0a:	4293      	cmp	r3, r2
 8042a0c:	d00e      	beq.n	8042a2c <HAL_TIM_Base_Start_IT+0x80>
 8042a0e:	687b      	ldr	r3, [r7, #4]
 8042a10:	681b      	ldr	r3, [r3, #0]
 8042a12:	4a1e      	ldr	r2, [pc, #120]	; (8042a8c <HAL_TIM_Base_Start_IT+0xe0>)
 8042a14:	4293      	cmp	r3, r2
 8042a16:	d009      	beq.n	8042a2c <HAL_TIM_Base_Start_IT+0x80>
 8042a18:	687b      	ldr	r3, [r7, #4]
 8042a1a:	681b      	ldr	r3, [r3, #0]
 8042a1c:	4a1c      	ldr	r2, [pc, #112]	; (8042a90 <HAL_TIM_Base_Start_IT+0xe4>)
 8042a1e:	4293      	cmp	r3, r2
 8042a20:	d004      	beq.n	8042a2c <HAL_TIM_Base_Start_IT+0x80>
 8042a22:	687b      	ldr	r3, [r7, #4]
 8042a24:	681b      	ldr	r3, [r3, #0]
 8042a26:	4a1b      	ldr	r2, [pc, #108]	; (8042a94 <HAL_TIM_Base_Start_IT+0xe8>)
 8042a28:	4293      	cmp	r3, r2
 8042a2a:	d115      	bne.n	8042a58 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8042a2c:	687b      	ldr	r3, [r7, #4]
 8042a2e:	681b      	ldr	r3, [r3, #0]
 8042a30:	689a      	ldr	r2, [r3, #8]
 8042a32:	4b19      	ldr	r3, [pc, #100]	; (8042a98 <HAL_TIM_Base_Start_IT+0xec>)
 8042a34:	4013      	ands	r3, r2
 8042a36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8042a38:	68fb      	ldr	r3, [r7, #12]
 8042a3a:	2b06      	cmp	r3, #6
 8042a3c:	d015      	beq.n	8042a6a <HAL_TIM_Base_Start_IT+0xbe>
 8042a3e:	68fb      	ldr	r3, [r7, #12]
 8042a40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8042a44:	d011      	beq.n	8042a6a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8042a46:	687b      	ldr	r3, [r7, #4]
 8042a48:	681b      	ldr	r3, [r3, #0]
 8042a4a:	681a      	ldr	r2, [r3, #0]
 8042a4c:	687b      	ldr	r3, [r7, #4]
 8042a4e:	681b      	ldr	r3, [r3, #0]
 8042a50:	f042 0201 	orr.w	r2, r2, #1
 8042a54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8042a56:	e008      	b.n	8042a6a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8042a58:	687b      	ldr	r3, [r7, #4]
 8042a5a:	681b      	ldr	r3, [r3, #0]
 8042a5c:	681a      	ldr	r2, [r3, #0]
 8042a5e:	687b      	ldr	r3, [r7, #4]
 8042a60:	681b      	ldr	r3, [r3, #0]
 8042a62:	f042 0201 	orr.w	r2, r2, #1
 8042a66:	601a      	str	r2, [r3, #0]
 8042a68:	e000      	b.n	8042a6c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8042a6a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8042a6c:	2300      	movs	r3, #0
}
 8042a6e:	4618      	mov	r0, r3
 8042a70:	3714      	adds	r7, #20
 8042a72:	46bd      	mov	sp, r7
 8042a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042a78:	4770      	bx	lr
 8042a7a:	bf00      	nop
 8042a7c:	40012c00 	.word	0x40012c00
 8042a80:	40000400 	.word	0x40000400
 8042a84:	40000800 	.word	0x40000800
 8042a88:	40000c00 	.word	0x40000c00
 8042a8c:	40013400 	.word	0x40013400
 8042a90:	40014000 	.word	0x40014000
 8042a94:	40015000 	.word	0x40015000
 8042a98:	00010007 	.word	0x00010007

08042a9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8042a9c:	b580      	push	{r7, lr}
 8042a9e:	b082      	sub	sp, #8
 8042aa0:	af00      	add	r7, sp, #0
 8042aa2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8042aa4:	687b      	ldr	r3, [r7, #4]
 8042aa6:	681b      	ldr	r3, [r3, #0]
 8042aa8:	691b      	ldr	r3, [r3, #16]
 8042aaa:	f003 0302 	and.w	r3, r3, #2
 8042aae:	2b02      	cmp	r3, #2
 8042ab0:	d122      	bne.n	8042af8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8042ab2:	687b      	ldr	r3, [r7, #4]
 8042ab4:	681b      	ldr	r3, [r3, #0]
 8042ab6:	68db      	ldr	r3, [r3, #12]
 8042ab8:	f003 0302 	and.w	r3, r3, #2
 8042abc:	2b02      	cmp	r3, #2
 8042abe:	d11b      	bne.n	8042af8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8042ac0:	687b      	ldr	r3, [r7, #4]
 8042ac2:	681b      	ldr	r3, [r3, #0]
 8042ac4:	f06f 0202 	mvn.w	r2, #2
 8042ac8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8042aca:	687b      	ldr	r3, [r7, #4]
 8042acc:	2201      	movs	r2, #1
 8042ace:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8042ad0:	687b      	ldr	r3, [r7, #4]
 8042ad2:	681b      	ldr	r3, [r3, #0]
 8042ad4:	699b      	ldr	r3, [r3, #24]
 8042ad6:	f003 0303 	and.w	r3, r3, #3
 8042ada:	2b00      	cmp	r3, #0
 8042adc:	d003      	beq.n	8042ae6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8042ade:	6878      	ldr	r0, [r7, #4]
 8042ae0:	f000 f965 	bl	8042dae <HAL_TIM_IC_CaptureCallback>
 8042ae4:	e005      	b.n	8042af2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8042ae6:	6878      	ldr	r0, [r7, #4]
 8042ae8:	f000 f957 	bl	8042d9a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8042aec:	6878      	ldr	r0, [r7, #4]
 8042aee:	f000 f968 	bl	8042dc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8042af2:	687b      	ldr	r3, [r7, #4]
 8042af4:	2200      	movs	r2, #0
 8042af6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8042af8:	687b      	ldr	r3, [r7, #4]
 8042afa:	681b      	ldr	r3, [r3, #0]
 8042afc:	691b      	ldr	r3, [r3, #16]
 8042afe:	f003 0304 	and.w	r3, r3, #4
 8042b02:	2b04      	cmp	r3, #4
 8042b04:	d122      	bne.n	8042b4c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8042b06:	687b      	ldr	r3, [r7, #4]
 8042b08:	681b      	ldr	r3, [r3, #0]
 8042b0a:	68db      	ldr	r3, [r3, #12]
 8042b0c:	f003 0304 	and.w	r3, r3, #4
 8042b10:	2b04      	cmp	r3, #4
 8042b12:	d11b      	bne.n	8042b4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8042b14:	687b      	ldr	r3, [r7, #4]
 8042b16:	681b      	ldr	r3, [r3, #0]
 8042b18:	f06f 0204 	mvn.w	r2, #4
 8042b1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8042b1e:	687b      	ldr	r3, [r7, #4]
 8042b20:	2202      	movs	r2, #2
 8042b22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8042b24:	687b      	ldr	r3, [r7, #4]
 8042b26:	681b      	ldr	r3, [r3, #0]
 8042b28:	699b      	ldr	r3, [r3, #24]
 8042b2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8042b2e:	2b00      	cmp	r3, #0
 8042b30:	d003      	beq.n	8042b3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8042b32:	6878      	ldr	r0, [r7, #4]
 8042b34:	f000 f93b 	bl	8042dae <HAL_TIM_IC_CaptureCallback>
 8042b38:	e005      	b.n	8042b46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8042b3a:	6878      	ldr	r0, [r7, #4]
 8042b3c:	f000 f92d 	bl	8042d9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8042b40:	6878      	ldr	r0, [r7, #4]
 8042b42:	f000 f93e 	bl	8042dc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8042b46:	687b      	ldr	r3, [r7, #4]
 8042b48:	2200      	movs	r2, #0
 8042b4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8042b4c:	687b      	ldr	r3, [r7, #4]
 8042b4e:	681b      	ldr	r3, [r3, #0]
 8042b50:	691b      	ldr	r3, [r3, #16]
 8042b52:	f003 0308 	and.w	r3, r3, #8
 8042b56:	2b08      	cmp	r3, #8
 8042b58:	d122      	bne.n	8042ba0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8042b5a:	687b      	ldr	r3, [r7, #4]
 8042b5c:	681b      	ldr	r3, [r3, #0]
 8042b5e:	68db      	ldr	r3, [r3, #12]
 8042b60:	f003 0308 	and.w	r3, r3, #8
 8042b64:	2b08      	cmp	r3, #8
 8042b66:	d11b      	bne.n	8042ba0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8042b68:	687b      	ldr	r3, [r7, #4]
 8042b6a:	681b      	ldr	r3, [r3, #0]
 8042b6c:	f06f 0208 	mvn.w	r2, #8
 8042b70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8042b72:	687b      	ldr	r3, [r7, #4]
 8042b74:	2204      	movs	r2, #4
 8042b76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8042b78:	687b      	ldr	r3, [r7, #4]
 8042b7a:	681b      	ldr	r3, [r3, #0]
 8042b7c:	69db      	ldr	r3, [r3, #28]
 8042b7e:	f003 0303 	and.w	r3, r3, #3
 8042b82:	2b00      	cmp	r3, #0
 8042b84:	d003      	beq.n	8042b8e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8042b86:	6878      	ldr	r0, [r7, #4]
 8042b88:	f000 f911 	bl	8042dae <HAL_TIM_IC_CaptureCallback>
 8042b8c:	e005      	b.n	8042b9a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8042b8e:	6878      	ldr	r0, [r7, #4]
 8042b90:	f000 f903 	bl	8042d9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8042b94:	6878      	ldr	r0, [r7, #4]
 8042b96:	f000 f914 	bl	8042dc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8042b9a:	687b      	ldr	r3, [r7, #4]
 8042b9c:	2200      	movs	r2, #0
 8042b9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8042ba0:	687b      	ldr	r3, [r7, #4]
 8042ba2:	681b      	ldr	r3, [r3, #0]
 8042ba4:	691b      	ldr	r3, [r3, #16]
 8042ba6:	f003 0310 	and.w	r3, r3, #16
 8042baa:	2b10      	cmp	r3, #16
 8042bac:	d122      	bne.n	8042bf4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8042bae:	687b      	ldr	r3, [r7, #4]
 8042bb0:	681b      	ldr	r3, [r3, #0]
 8042bb2:	68db      	ldr	r3, [r3, #12]
 8042bb4:	f003 0310 	and.w	r3, r3, #16
 8042bb8:	2b10      	cmp	r3, #16
 8042bba:	d11b      	bne.n	8042bf4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8042bbc:	687b      	ldr	r3, [r7, #4]
 8042bbe:	681b      	ldr	r3, [r3, #0]
 8042bc0:	f06f 0210 	mvn.w	r2, #16
 8042bc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8042bc6:	687b      	ldr	r3, [r7, #4]
 8042bc8:	2208      	movs	r2, #8
 8042bca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8042bcc:	687b      	ldr	r3, [r7, #4]
 8042bce:	681b      	ldr	r3, [r3, #0]
 8042bd0:	69db      	ldr	r3, [r3, #28]
 8042bd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8042bd6:	2b00      	cmp	r3, #0
 8042bd8:	d003      	beq.n	8042be2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8042bda:	6878      	ldr	r0, [r7, #4]
 8042bdc:	f000 f8e7 	bl	8042dae <HAL_TIM_IC_CaptureCallback>
 8042be0:	e005      	b.n	8042bee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8042be2:	6878      	ldr	r0, [r7, #4]
 8042be4:	f000 f8d9 	bl	8042d9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8042be8:	6878      	ldr	r0, [r7, #4]
 8042bea:	f000 f8ea 	bl	8042dc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8042bee:	687b      	ldr	r3, [r7, #4]
 8042bf0:	2200      	movs	r2, #0
 8042bf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8042bf4:	687b      	ldr	r3, [r7, #4]
 8042bf6:	681b      	ldr	r3, [r3, #0]
 8042bf8:	691b      	ldr	r3, [r3, #16]
 8042bfa:	f003 0301 	and.w	r3, r3, #1
 8042bfe:	2b01      	cmp	r3, #1
 8042c00:	d10e      	bne.n	8042c20 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8042c02:	687b      	ldr	r3, [r7, #4]
 8042c04:	681b      	ldr	r3, [r3, #0]
 8042c06:	68db      	ldr	r3, [r3, #12]
 8042c08:	f003 0301 	and.w	r3, r3, #1
 8042c0c:	2b01      	cmp	r3, #1
 8042c0e:	d107      	bne.n	8042c20 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8042c10:	687b      	ldr	r3, [r7, #4]
 8042c12:	681b      	ldr	r3, [r3, #0]
 8042c14:	f06f 0201 	mvn.w	r2, #1
 8042c18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8042c1a:	6878      	ldr	r0, [r7, #4]
 8042c1c:	f7fd ff02 	bl	8040a24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8042c20:	687b      	ldr	r3, [r7, #4]
 8042c22:	681b      	ldr	r3, [r3, #0]
 8042c24:	691b      	ldr	r3, [r3, #16]
 8042c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8042c2a:	2b80      	cmp	r3, #128	; 0x80
 8042c2c:	d10e      	bne.n	8042c4c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8042c2e:	687b      	ldr	r3, [r7, #4]
 8042c30:	681b      	ldr	r3, [r3, #0]
 8042c32:	68db      	ldr	r3, [r3, #12]
 8042c34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8042c38:	2b80      	cmp	r3, #128	; 0x80
 8042c3a:	d107      	bne.n	8042c4c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8042c3c:	687b      	ldr	r3, [r7, #4]
 8042c3e:	681b      	ldr	r3, [r3, #0]
 8042c40:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8042c44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8042c46:	6878      	ldr	r0, [r7, #4]
 8042c48:	f000 f982 	bl	8042f50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8042c4c:	687b      	ldr	r3, [r7, #4]
 8042c4e:	681b      	ldr	r3, [r3, #0]
 8042c50:	691b      	ldr	r3, [r3, #16]
 8042c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8042c56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8042c5a:	d10e      	bne.n	8042c7a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8042c5c:	687b      	ldr	r3, [r7, #4]
 8042c5e:	681b      	ldr	r3, [r3, #0]
 8042c60:	68db      	ldr	r3, [r3, #12]
 8042c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8042c66:	2b80      	cmp	r3, #128	; 0x80
 8042c68:	d107      	bne.n	8042c7a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8042c6a:	687b      	ldr	r3, [r7, #4]
 8042c6c:	681b      	ldr	r3, [r3, #0]
 8042c6e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8042c72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8042c74:	6878      	ldr	r0, [r7, #4]
 8042c76:	f000 f975 	bl	8042f64 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8042c7a:	687b      	ldr	r3, [r7, #4]
 8042c7c:	681b      	ldr	r3, [r3, #0]
 8042c7e:	691b      	ldr	r3, [r3, #16]
 8042c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8042c84:	2b40      	cmp	r3, #64	; 0x40
 8042c86:	d10e      	bne.n	8042ca6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8042c88:	687b      	ldr	r3, [r7, #4]
 8042c8a:	681b      	ldr	r3, [r3, #0]
 8042c8c:	68db      	ldr	r3, [r3, #12]
 8042c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8042c92:	2b40      	cmp	r3, #64	; 0x40
 8042c94:	d107      	bne.n	8042ca6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8042c96:	687b      	ldr	r3, [r7, #4]
 8042c98:	681b      	ldr	r3, [r3, #0]
 8042c9a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8042c9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8042ca0:	6878      	ldr	r0, [r7, #4]
 8042ca2:	f000 f898 	bl	8042dd6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8042ca6:	687b      	ldr	r3, [r7, #4]
 8042ca8:	681b      	ldr	r3, [r3, #0]
 8042caa:	691b      	ldr	r3, [r3, #16]
 8042cac:	f003 0320 	and.w	r3, r3, #32
 8042cb0:	2b20      	cmp	r3, #32
 8042cb2:	d10e      	bne.n	8042cd2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8042cb4:	687b      	ldr	r3, [r7, #4]
 8042cb6:	681b      	ldr	r3, [r3, #0]
 8042cb8:	68db      	ldr	r3, [r3, #12]
 8042cba:	f003 0320 	and.w	r3, r3, #32
 8042cbe:	2b20      	cmp	r3, #32
 8042cc0:	d107      	bne.n	8042cd2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8042cc2:	687b      	ldr	r3, [r7, #4]
 8042cc4:	681b      	ldr	r3, [r3, #0]
 8042cc6:	f06f 0220 	mvn.w	r2, #32
 8042cca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8042ccc:	6878      	ldr	r0, [r7, #4]
 8042cce:	f000 f935 	bl	8042f3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8042cd2:	687b      	ldr	r3, [r7, #4]
 8042cd4:	681b      	ldr	r3, [r3, #0]
 8042cd6:	691b      	ldr	r3, [r3, #16]
 8042cd8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8042cdc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8042ce0:	d10f      	bne.n	8042d02 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8042ce2:	687b      	ldr	r3, [r7, #4]
 8042ce4:	681b      	ldr	r3, [r3, #0]
 8042ce6:	68db      	ldr	r3, [r3, #12]
 8042ce8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8042cec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8042cf0:	d107      	bne.n	8042d02 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8042cf2:	687b      	ldr	r3, [r7, #4]
 8042cf4:	681b      	ldr	r3, [r3, #0]
 8042cf6:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8042cfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8042cfc:	6878      	ldr	r0, [r7, #4]
 8042cfe:	f000 f93b 	bl	8042f78 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8042d02:	687b      	ldr	r3, [r7, #4]
 8042d04:	681b      	ldr	r3, [r3, #0]
 8042d06:	691b      	ldr	r3, [r3, #16]
 8042d08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8042d0c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8042d10:	d10f      	bne.n	8042d32 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8042d12:	687b      	ldr	r3, [r7, #4]
 8042d14:	681b      	ldr	r3, [r3, #0]
 8042d16:	68db      	ldr	r3, [r3, #12]
 8042d18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8042d1c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8042d20:	d107      	bne.n	8042d32 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8042d22:	687b      	ldr	r3, [r7, #4]
 8042d24:	681b      	ldr	r3, [r3, #0]
 8042d26:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8042d2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8042d2c:	6878      	ldr	r0, [r7, #4]
 8042d2e:	f000 f92d 	bl	8042f8c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8042d32:	687b      	ldr	r3, [r7, #4]
 8042d34:	681b      	ldr	r3, [r3, #0]
 8042d36:	691b      	ldr	r3, [r3, #16]
 8042d38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8042d3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8042d40:	d10f      	bne.n	8042d62 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8042d42:	687b      	ldr	r3, [r7, #4]
 8042d44:	681b      	ldr	r3, [r3, #0]
 8042d46:	68db      	ldr	r3, [r3, #12]
 8042d48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8042d4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8042d50:	d107      	bne.n	8042d62 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8042d52:	687b      	ldr	r3, [r7, #4]
 8042d54:	681b      	ldr	r3, [r3, #0]
 8042d56:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8042d5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8042d5c:	6878      	ldr	r0, [r7, #4]
 8042d5e:	f000 f91f 	bl	8042fa0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8042d62:	687b      	ldr	r3, [r7, #4]
 8042d64:	681b      	ldr	r3, [r3, #0]
 8042d66:	691b      	ldr	r3, [r3, #16]
 8042d68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8042d6c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8042d70:	d10f      	bne.n	8042d92 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8042d72:	687b      	ldr	r3, [r7, #4]
 8042d74:	681b      	ldr	r3, [r3, #0]
 8042d76:	68db      	ldr	r3, [r3, #12]
 8042d78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8042d7c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8042d80:	d107      	bne.n	8042d92 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8042d82:	687b      	ldr	r3, [r7, #4]
 8042d84:	681b      	ldr	r3, [r3, #0]
 8042d86:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8042d8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8042d8c:	6878      	ldr	r0, [r7, #4]
 8042d8e:	f000 f911 	bl	8042fb4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8042d92:	bf00      	nop
 8042d94:	3708      	adds	r7, #8
 8042d96:	46bd      	mov	sp, r7
 8042d98:	bd80      	pop	{r7, pc}

08042d9a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8042d9a:	b480      	push	{r7}
 8042d9c:	b083      	sub	sp, #12
 8042d9e:	af00      	add	r7, sp, #0
 8042da0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8042da2:	bf00      	nop
 8042da4:	370c      	adds	r7, #12
 8042da6:	46bd      	mov	sp, r7
 8042da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042dac:	4770      	bx	lr

08042dae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8042dae:	b480      	push	{r7}
 8042db0:	b083      	sub	sp, #12
 8042db2:	af00      	add	r7, sp, #0
 8042db4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8042db6:	bf00      	nop
 8042db8:	370c      	adds	r7, #12
 8042dba:	46bd      	mov	sp, r7
 8042dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042dc0:	4770      	bx	lr

08042dc2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8042dc2:	b480      	push	{r7}
 8042dc4:	b083      	sub	sp, #12
 8042dc6:	af00      	add	r7, sp, #0
 8042dc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8042dca:	bf00      	nop
 8042dcc:	370c      	adds	r7, #12
 8042dce:	46bd      	mov	sp, r7
 8042dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042dd4:	4770      	bx	lr

08042dd6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8042dd6:	b480      	push	{r7}
 8042dd8:	b083      	sub	sp, #12
 8042dda:	af00      	add	r7, sp, #0
 8042ddc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8042dde:	bf00      	nop
 8042de0:	370c      	adds	r7, #12
 8042de2:	46bd      	mov	sp, r7
 8042de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042de8:	4770      	bx	lr
	...

08042dec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8042dec:	b480      	push	{r7}
 8042dee:	b085      	sub	sp, #20
 8042df0:	af00      	add	r7, sp, #0
 8042df2:	6078      	str	r0, [r7, #4]
 8042df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8042df6:	687b      	ldr	r3, [r7, #4]
 8042df8:	681b      	ldr	r3, [r3, #0]
 8042dfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8042dfc:	687b      	ldr	r3, [r7, #4]
 8042dfe:	4a46      	ldr	r2, [pc, #280]	; (8042f18 <TIM_Base_SetConfig+0x12c>)
 8042e00:	4293      	cmp	r3, r2
 8042e02:	d017      	beq.n	8042e34 <TIM_Base_SetConfig+0x48>
 8042e04:	687b      	ldr	r3, [r7, #4]
 8042e06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8042e0a:	d013      	beq.n	8042e34 <TIM_Base_SetConfig+0x48>
 8042e0c:	687b      	ldr	r3, [r7, #4]
 8042e0e:	4a43      	ldr	r2, [pc, #268]	; (8042f1c <TIM_Base_SetConfig+0x130>)
 8042e10:	4293      	cmp	r3, r2
 8042e12:	d00f      	beq.n	8042e34 <TIM_Base_SetConfig+0x48>
 8042e14:	687b      	ldr	r3, [r7, #4]
 8042e16:	4a42      	ldr	r2, [pc, #264]	; (8042f20 <TIM_Base_SetConfig+0x134>)
 8042e18:	4293      	cmp	r3, r2
 8042e1a:	d00b      	beq.n	8042e34 <TIM_Base_SetConfig+0x48>
 8042e1c:	687b      	ldr	r3, [r7, #4]
 8042e1e:	4a41      	ldr	r2, [pc, #260]	; (8042f24 <TIM_Base_SetConfig+0x138>)
 8042e20:	4293      	cmp	r3, r2
 8042e22:	d007      	beq.n	8042e34 <TIM_Base_SetConfig+0x48>
 8042e24:	687b      	ldr	r3, [r7, #4]
 8042e26:	4a40      	ldr	r2, [pc, #256]	; (8042f28 <TIM_Base_SetConfig+0x13c>)
 8042e28:	4293      	cmp	r3, r2
 8042e2a:	d003      	beq.n	8042e34 <TIM_Base_SetConfig+0x48>
 8042e2c:	687b      	ldr	r3, [r7, #4]
 8042e2e:	4a3f      	ldr	r2, [pc, #252]	; (8042f2c <TIM_Base_SetConfig+0x140>)
 8042e30:	4293      	cmp	r3, r2
 8042e32:	d108      	bne.n	8042e46 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8042e34:	68fb      	ldr	r3, [r7, #12]
 8042e36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8042e3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8042e3c:	683b      	ldr	r3, [r7, #0]
 8042e3e:	685b      	ldr	r3, [r3, #4]
 8042e40:	68fa      	ldr	r2, [r7, #12]
 8042e42:	4313      	orrs	r3, r2
 8042e44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8042e46:	687b      	ldr	r3, [r7, #4]
 8042e48:	4a33      	ldr	r2, [pc, #204]	; (8042f18 <TIM_Base_SetConfig+0x12c>)
 8042e4a:	4293      	cmp	r3, r2
 8042e4c:	d023      	beq.n	8042e96 <TIM_Base_SetConfig+0xaa>
 8042e4e:	687b      	ldr	r3, [r7, #4]
 8042e50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8042e54:	d01f      	beq.n	8042e96 <TIM_Base_SetConfig+0xaa>
 8042e56:	687b      	ldr	r3, [r7, #4]
 8042e58:	4a30      	ldr	r2, [pc, #192]	; (8042f1c <TIM_Base_SetConfig+0x130>)
 8042e5a:	4293      	cmp	r3, r2
 8042e5c:	d01b      	beq.n	8042e96 <TIM_Base_SetConfig+0xaa>
 8042e5e:	687b      	ldr	r3, [r7, #4]
 8042e60:	4a2f      	ldr	r2, [pc, #188]	; (8042f20 <TIM_Base_SetConfig+0x134>)
 8042e62:	4293      	cmp	r3, r2
 8042e64:	d017      	beq.n	8042e96 <TIM_Base_SetConfig+0xaa>
 8042e66:	687b      	ldr	r3, [r7, #4]
 8042e68:	4a2e      	ldr	r2, [pc, #184]	; (8042f24 <TIM_Base_SetConfig+0x138>)
 8042e6a:	4293      	cmp	r3, r2
 8042e6c:	d013      	beq.n	8042e96 <TIM_Base_SetConfig+0xaa>
 8042e6e:	687b      	ldr	r3, [r7, #4]
 8042e70:	4a2d      	ldr	r2, [pc, #180]	; (8042f28 <TIM_Base_SetConfig+0x13c>)
 8042e72:	4293      	cmp	r3, r2
 8042e74:	d00f      	beq.n	8042e96 <TIM_Base_SetConfig+0xaa>
 8042e76:	687b      	ldr	r3, [r7, #4]
 8042e78:	4a2d      	ldr	r2, [pc, #180]	; (8042f30 <TIM_Base_SetConfig+0x144>)
 8042e7a:	4293      	cmp	r3, r2
 8042e7c:	d00b      	beq.n	8042e96 <TIM_Base_SetConfig+0xaa>
 8042e7e:	687b      	ldr	r3, [r7, #4]
 8042e80:	4a2c      	ldr	r2, [pc, #176]	; (8042f34 <TIM_Base_SetConfig+0x148>)
 8042e82:	4293      	cmp	r3, r2
 8042e84:	d007      	beq.n	8042e96 <TIM_Base_SetConfig+0xaa>
 8042e86:	687b      	ldr	r3, [r7, #4]
 8042e88:	4a2b      	ldr	r2, [pc, #172]	; (8042f38 <TIM_Base_SetConfig+0x14c>)
 8042e8a:	4293      	cmp	r3, r2
 8042e8c:	d003      	beq.n	8042e96 <TIM_Base_SetConfig+0xaa>
 8042e8e:	687b      	ldr	r3, [r7, #4]
 8042e90:	4a26      	ldr	r2, [pc, #152]	; (8042f2c <TIM_Base_SetConfig+0x140>)
 8042e92:	4293      	cmp	r3, r2
 8042e94:	d108      	bne.n	8042ea8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8042e96:	68fb      	ldr	r3, [r7, #12]
 8042e98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8042e9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8042e9e:	683b      	ldr	r3, [r7, #0]
 8042ea0:	68db      	ldr	r3, [r3, #12]
 8042ea2:	68fa      	ldr	r2, [r7, #12]
 8042ea4:	4313      	orrs	r3, r2
 8042ea6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8042ea8:	68fb      	ldr	r3, [r7, #12]
 8042eaa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8042eae:	683b      	ldr	r3, [r7, #0]
 8042eb0:	695b      	ldr	r3, [r3, #20]
 8042eb2:	4313      	orrs	r3, r2
 8042eb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8042eb6:	687b      	ldr	r3, [r7, #4]
 8042eb8:	68fa      	ldr	r2, [r7, #12]
 8042eba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8042ebc:	683b      	ldr	r3, [r7, #0]
 8042ebe:	689a      	ldr	r2, [r3, #8]
 8042ec0:	687b      	ldr	r3, [r7, #4]
 8042ec2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8042ec4:	683b      	ldr	r3, [r7, #0]
 8042ec6:	681a      	ldr	r2, [r3, #0]
 8042ec8:	687b      	ldr	r3, [r7, #4]
 8042eca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8042ecc:	687b      	ldr	r3, [r7, #4]
 8042ece:	4a12      	ldr	r2, [pc, #72]	; (8042f18 <TIM_Base_SetConfig+0x12c>)
 8042ed0:	4293      	cmp	r3, r2
 8042ed2:	d013      	beq.n	8042efc <TIM_Base_SetConfig+0x110>
 8042ed4:	687b      	ldr	r3, [r7, #4]
 8042ed6:	4a14      	ldr	r2, [pc, #80]	; (8042f28 <TIM_Base_SetConfig+0x13c>)
 8042ed8:	4293      	cmp	r3, r2
 8042eda:	d00f      	beq.n	8042efc <TIM_Base_SetConfig+0x110>
 8042edc:	687b      	ldr	r3, [r7, #4]
 8042ede:	4a14      	ldr	r2, [pc, #80]	; (8042f30 <TIM_Base_SetConfig+0x144>)
 8042ee0:	4293      	cmp	r3, r2
 8042ee2:	d00b      	beq.n	8042efc <TIM_Base_SetConfig+0x110>
 8042ee4:	687b      	ldr	r3, [r7, #4]
 8042ee6:	4a13      	ldr	r2, [pc, #76]	; (8042f34 <TIM_Base_SetConfig+0x148>)
 8042ee8:	4293      	cmp	r3, r2
 8042eea:	d007      	beq.n	8042efc <TIM_Base_SetConfig+0x110>
 8042eec:	687b      	ldr	r3, [r7, #4]
 8042eee:	4a12      	ldr	r2, [pc, #72]	; (8042f38 <TIM_Base_SetConfig+0x14c>)
 8042ef0:	4293      	cmp	r3, r2
 8042ef2:	d003      	beq.n	8042efc <TIM_Base_SetConfig+0x110>
 8042ef4:	687b      	ldr	r3, [r7, #4]
 8042ef6:	4a0d      	ldr	r2, [pc, #52]	; (8042f2c <TIM_Base_SetConfig+0x140>)
 8042ef8:	4293      	cmp	r3, r2
 8042efa:	d103      	bne.n	8042f04 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8042efc:	683b      	ldr	r3, [r7, #0]
 8042efe:	691a      	ldr	r2, [r3, #16]
 8042f00:	687b      	ldr	r3, [r7, #4]
 8042f02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8042f04:	687b      	ldr	r3, [r7, #4]
 8042f06:	2201      	movs	r2, #1
 8042f08:	615a      	str	r2, [r3, #20]
}
 8042f0a:	bf00      	nop
 8042f0c:	3714      	adds	r7, #20
 8042f0e:	46bd      	mov	sp, r7
 8042f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042f14:	4770      	bx	lr
 8042f16:	bf00      	nop
 8042f18:	40012c00 	.word	0x40012c00
 8042f1c:	40000400 	.word	0x40000400
 8042f20:	40000800 	.word	0x40000800
 8042f24:	40000c00 	.word	0x40000c00
 8042f28:	40013400 	.word	0x40013400
 8042f2c:	40015000 	.word	0x40015000
 8042f30:	40014000 	.word	0x40014000
 8042f34:	40014400 	.word	0x40014400
 8042f38:	40014800 	.word	0x40014800

08042f3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8042f3c:	b480      	push	{r7}
 8042f3e:	b083      	sub	sp, #12
 8042f40:	af00      	add	r7, sp, #0
 8042f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8042f44:	bf00      	nop
 8042f46:	370c      	adds	r7, #12
 8042f48:	46bd      	mov	sp, r7
 8042f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042f4e:	4770      	bx	lr

08042f50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8042f50:	b480      	push	{r7}
 8042f52:	b083      	sub	sp, #12
 8042f54:	af00      	add	r7, sp, #0
 8042f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8042f58:	bf00      	nop
 8042f5a:	370c      	adds	r7, #12
 8042f5c:	46bd      	mov	sp, r7
 8042f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042f62:	4770      	bx	lr

08042f64 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8042f64:	b480      	push	{r7}
 8042f66:	b083      	sub	sp, #12
 8042f68:	af00      	add	r7, sp, #0
 8042f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8042f6c:	bf00      	nop
 8042f6e:	370c      	adds	r7, #12
 8042f70:	46bd      	mov	sp, r7
 8042f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042f76:	4770      	bx	lr

08042f78 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8042f78:	b480      	push	{r7}
 8042f7a:	b083      	sub	sp, #12
 8042f7c:	af00      	add	r7, sp, #0
 8042f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8042f80:	bf00      	nop
 8042f82:	370c      	adds	r7, #12
 8042f84:	46bd      	mov	sp, r7
 8042f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042f8a:	4770      	bx	lr

08042f8c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8042f8c:	b480      	push	{r7}
 8042f8e:	b083      	sub	sp, #12
 8042f90:	af00      	add	r7, sp, #0
 8042f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8042f94:	bf00      	nop
 8042f96:	370c      	adds	r7, #12
 8042f98:	46bd      	mov	sp, r7
 8042f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042f9e:	4770      	bx	lr

08042fa0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8042fa0:	b480      	push	{r7}
 8042fa2:	b083      	sub	sp, #12
 8042fa4:	af00      	add	r7, sp, #0
 8042fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8042fa8:	bf00      	nop
 8042faa:	370c      	adds	r7, #12
 8042fac:	46bd      	mov	sp, r7
 8042fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042fb2:	4770      	bx	lr

08042fb4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8042fb4:	b480      	push	{r7}
 8042fb6:	b083      	sub	sp, #12
 8042fb8:	af00      	add	r7, sp, #0
 8042fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8042fbc:	bf00      	nop
 8042fbe:	370c      	adds	r7, #12
 8042fc0:	46bd      	mov	sp, r7
 8042fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042fc6:	4770      	bx	lr

08042fc8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8042fc8:	b580      	push	{r7, lr}
 8042fca:	b082      	sub	sp, #8
 8042fcc:	af00      	add	r7, sp, #0
 8042fce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8042fd0:	687b      	ldr	r3, [r7, #4]
 8042fd2:	2b00      	cmp	r3, #0
 8042fd4:	d101      	bne.n	8042fda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8042fd6:	2301      	movs	r3, #1
 8042fd8:	e042      	b.n	8043060 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8042fda:	687b      	ldr	r3, [r7, #4]
 8042fdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8042fe0:	2b00      	cmp	r3, #0
 8042fe2:	d106      	bne.n	8042ff2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8042fe4:	687b      	ldr	r3, [r7, #4]
 8042fe6:	2200      	movs	r2, #0
 8042fe8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8042fec:	6878      	ldr	r0, [r7, #4]
 8042fee:	f7fd fd7b 	bl	8040ae8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8042ff2:	687b      	ldr	r3, [r7, #4]
 8042ff4:	2224      	movs	r2, #36	; 0x24
 8042ff6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8042ffa:	687b      	ldr	r3, [r7, #4]
 8042ffc:	681b      	ldr	r3, [r3, #0]
 8042ffe:	681a      	ldr	r2, [r3, #0]
 8043000:	687b      	ldr	r3, [r7, #4]
 8043002:	681b      	ldr	r3, [r3, #0]
 8043004:	f022 0201 	bic.w	r2, r2, #1
 8043008:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 804300a:	6878      	ldr	r0, [r7, #4]
 804300c:	f000 f8c2 	bl	8043194 <UART_SetConfig>
 8043010:	4603      	mov	r3, r0
 8043012:	2b01      	cmp	r3, #1
 8043014:	d101      	bne.n	804301a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8043016:	2301      	movs	r3, #1
 8043018:	e022      	b.n	8043060 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 804301a:	687b      	ldr	r3, [r7, #4]
 804301c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804301e:	2b00      	cmp	r3, #0
 8043020:	d002      	beq.n	8043028 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8043022:	6878      	ldr	r0, [r7, #4]
 8043024:	f000 fbb8 	bl	8043798 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8043028:	687b      	ldr	r3, [r7, #4]
 804302a:	681b      	ldr	r3, [r3, #0]
 804302c:	685a      	ldr	r2, [r3, #4]
 804302e:	687b      	ldr	r3, [r7, #4]
 8043030:	681b      	ldr	r3, [r3, #0]
 8043032:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8043036:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8043038:	687b      	ldr	r3, [r7, #4]
 804303a:	681b      	ldr	r3, [r3, #0]
 804303c:	689a      	ldr	r2, [r3, #8]
 804303e:	687b      	ldr	r3, [r7, #4]
 8043040:	681b      	ldr	r3, [r3, #0]
 8043042:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8043046:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8043048:	687b      	ldr	r3, [r7, #4]
 804304a:	681b      	ldr	r3, [r3, #0]
 804304c:	681a      	ldr	r2, [r3, #0]
 804304e:	687b      	ldr	r3, [r7, #4]
 8043050:	681b      	ldr	r3, [r3, #0]
 8043052:	f042 0201 	orr.w	r2, r2, #1
 8043056:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8043058:	6878      	ldr	r0, [r7, #4]
 804305a:	f000 fc3f 	bl	80438dc <UART_CheckIdleState>
 804305e:	4603      	mov	r3, r0
}
 8043060:	4618      	mov	r0, r3
 8043062:	3708      	adds	r7, #8
 8043064:	46bd      	mov	sp, r7
 8043066:	bd80      	pop	{r7, pc}

08043068 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8043068:	b580      	push	{r7, lr}
 804306a:	b08a      	sub	sp, #40	; 0x28
 804306c:	af02      	add	r7, sp, #8
 804306e:	60f8      	str	r0, [r7, #12]
 8043070:	60b9      	str	r1, [r7, #8]
 8043072:	603b      	str	r3, [r7, #0]
 8043074:	4613      	mov	r3, r2
 8043076:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8043078:	68fb      	ldr	r3, [r7, #12]
 804307a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 804307e:	2b20      	cmp	r3, #32
 8043080:	f040 8083 	bne.w	804318a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8043084:	68bb      	ldr	r3, [r7, #8]
 8043086:	2b00      	cmp	r3, #0
 8043088:	d002      	beq.n	8043090 <HAL_UART_Transmit+0x28>
 804308a:	88fb      	ldrh	r3, [r7, #6]
 804308c:	2b00      	cmp	r3, #0
 804308e:	d101      	bne.n	8043094 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8043090:	2301      	movs	r3, #1
 8043092:	e07b      	b.n	804318c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8043094:	68fb      	ldr	r3, [r7, #12]
 8043096:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 804309a:	2b01      	cmp	r3, #1
 804309c:	d101      	bne.n	80430a2 <HAL_UART_Transmit+0x3a>
 804309e:	2302      	movs	r3, #2
 80430a0:	e074      	b.n	804318c <HAL_UART_Transmit+0x124>
 80430a2:	68fb      	ldr	r3, [r7, #12]
 80430a4:	2201      	movs	r2, #1
 80430a6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80430aa:	68fb      	ldr	r3, [r7, #12]
 80430ac:	2200      	movs	r2, #0
 80430ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80430b2:	68fb      	ldr	r3, [r7, #12]
 80430b4:	2221      	movs	r2, #33	; 0x21
 80430b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80430ba:	f7fd fe51 	bl	8040d60 <HAL_GetTick>
 80430be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80430c0:	68fb      	ldr	r3, [r7, #12]
 80430c2:	88fa      	ldrh	r2, [r7, #6]
 80430c4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80430c8:	68fb      	ldr	r3, [r7, #12]
 80430ca:	88fa      	ldrh	r2, [r7, #6]
 80430cc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80430d0:	68fb      	ldr	r3, [r7, #12]
 80430d2:	689b      	ldr	r3, [r3, #8]
 80430d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80430d8:	d108      	bne.n	80430ec <HAL_UART_Transmit+0x84>
 80430da:	68fb      	ldr	r3, [r7, #12]
 80430dc:	691b      	ldr	r3, [r3, #16]
 80430de:	2b00      	cmp	r3, #0
 80430e0:	d104      	bne.n	80430ec <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80430e2:	2300      	movs	r3, #0
 80430e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80430e6:	68bb      	ldr	r3, [r7, #8]
 80430e8:	61bb      	str	r3, [r7, #24]
 80430ea:	e003      	b.n	80430f4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80430ec:	68bb      	ldr	r3, [r7, #8]
 80430ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80430f0:	2300      	movs	r3, #0
 80430f2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80430f4:	68fb      	ldr	r3, [r7, #12]
 80430f6:	2200      	movs	r2, #0
 80430f8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 80430fc:	e02c      	b.n	8043158 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80430fe:	683b      	ldr	r3, [r7, #0]
 8043100:	9300      	str	r3, [sp, #0]
 8043102:	697b      	ldr	r3, [r7, #20]
 8043104:	2200      	movs	r2, #0
 8043106:	2180      	movs	r1, #128	; 0x80
 8043108:	68f8      	ldr	r0, [r7, #12]
 804310a:	f000 fc2f 	bl	804396c <UART_WaitOnFlagUntilTimeout>
 804310e:	4603      	mov	r3, r0
 8043110:	2b00      	cmp	r3, #0
 8043112:	d001      	beq.n	8043118 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8043114:	2303      	movs	r3, #3
 8043116:	e039      	b.n	804318c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8043118:	69fb      	ldr	r3, [r7, #28]
 804311a:	2b00      	cmp	r3, #0
 804311c:	d10b      	bne.n	8043136 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 804311e:	69bb      	ldr	r3, [r7, #24]
 8043120:	881b      	ldrh	r3, [r3, #0]
 8043122:	461a      	mov	r2, r3
 8043124:	68fb      	ldr	r3, [r7, #12]
 8043126:	681b      	ldr	r3, [r3, #0]
 8043128:	f3c2 0208 	ubfx	r2, r2, #0, #9
 804312c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 804312e:	69bb      	ldr	r3, [r7, #24]
 8043130:	3302      	adds	r3, #2
 8043132:	61bb      	str	r3, [r7, #24]
 8043134:	e007      	b.n	8043146 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8043136:	69fb      	ldr	r3, [r7, #28]
 8043138:	781a      	ldrb	r2, [r3, #0]
 804313a:	68fb      	ldr	r3, [r7, #12]
 804313c:	681b      	ldr	r3, [r3, #0]
 804313e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8043140:	69fb      	ldr	r3, [r7, #28]
 8043142:	3301      	adds	r3, #1
 8043144:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8043146:	68fb      	ldr	r3, [r7, #12]
 8043148:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 804314c:	b29b      	uxth	r3, r3
 804314e:	3b01      	subs	r3, #1
 8043150:	b29a      	uxth	r2, r3
 8043152:	68fb      	ldr	r3, [r7, #12]
 8043154:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8043158:	68fb      	ldr	r3, [r7, #12]
 804315a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 804315e:	b29b      	uxth	r3, r3
 8043160:	2b00      	cmp	r3, #0
 8043162:	d1cc      	bne.n	80430fe <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8043164:	683b      	ldr	r3, [r7, #0]
 8043166:	9300      	str	r3, [sp, #0]
 8043168:	697b      	ldr	r3, [r7, #20]
 804316a:	2200      	movs	r2, #0
 804316c:	2140      	movs	r1, #64	; 0x40
 804316e:	68f8      	ldr	r0, [r7, #12]
 8043170:	f000 fbfc 	bl	804396c <UART_WaitOnFlagUntilTimeout>
 8043174:	4603      	mov	r3, r0
 8043176:	2b00      	cmp	r3, #0
 8043178:	d001      	beq.n	804317e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 804317a:	2303      	movs	r3, #3
 804317c:	e006      	b.n	804318c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 804317e:	68fb      	ldr	r3, [r7, #12]
 8043180:	2220      	movs	r2, #32
 8043182:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8043186:	2300      	movs	r3, #0
 8043188:	e000      	b.n	804318c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 804318a:	2302      	movs	r3, #2
  }
}
 804318c:	4618      	mov	r0, r3
 804318e:	3720      	adds	r7, #32
 8043190:	46bd      	mov	sp, r7
 8043192:	bd80      	pop	{r7, pc}

08043194 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8043194:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8043198:	b08c      	sub	sp, #48	; 0x30
 804319a:	af00      	add	r7, sp, #0
 804319c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 804319e:	2300      	movs	r3, #0
 80431a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80431a4:	697b      	ldr	r3, [r7, #20]
 80431a6:	689a      	ldr	r2, [r3, #8]
 80431a8:	697b      	ldr	r3, [r7, #20]
 80431aa:	691b      	ldr	r3, [r3, #16]
 80431ac:	431a      	orrs	r2, r3
 80431ae:	697b      	ldr	r3, [r7, #20]
 80431b0:	695b      	ldr	r3, [r3, #20]
 80431b2:	431a      	orrs	r2, r3
 80431b4:	697b      	ldr	r3, [r7, #20]
 80431b6:	69db      	ldr	r3, [r3, #28]
 80431b8:	4313      	orrs	r3, r2
 80431ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  tmpreg |= (uint32_t)huart->FifoMode;
 80431bc:	697b      	ldr	r3, [r7, #20]
 80431be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80431c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80431c2:	4313      	orrs	r3, r2
 80431c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80431c6:	697b      	ldr	r3, [r7, #20]
 80431c8:	681b      	ldr	r3, [r3, #0]
 80431ca:	681a      	ldr	r2, [r3, #0]
 80431cc:	4baa      	ldr	r3, [pc, #680]	; (8043478 <UART_SetConfig+0x2e4>)
 80431ce:	4013      	ands	r3, r2
 80431d0:	697a      	ldr	r2, [r7, #20]
 80431d2:	6812      	ldr	r2, [r2, #0]
 80431d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80431d6:	430b      	orrs	r3, r1
 80431d8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80431da:	697b      	ldr	r3, [r7, #20]
 80431dc:	681b      	ldr	r3, [r3, #0]
 80431de:	685b      	ldr	r3, [r3, #4]
 80431e0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80431e4:	697b      	ldr	r3, [r7, #20]
 80431e6:	68da      	ldr	r2, [r3, #12]
 80431e8:	697b      	ldr	r3, [r7, #20]
 80431ea:	681b      	ldr	r3, [r3, #0]
 80431ec:	430a      	orrs	r2, r1
 80431ee:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80431f0:	697b      	ldr	r3, [r7, #20]
 80431f2:	699b      	ldr	r3, [r3, #24]
 80431f4:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80431f6:	697b      	ldr	r3, [r7, #20]
 80431f8:	681b      	ldr	r3, [r3, #0]
 80431fa:	4aa0      	ldr	r2, [pc, #640]	; (804347c <UART_SetConfig+0x2e8>)
 80431fc:	4293      	cmp	r3, r2
 80431fe:	d004      	beq.n	804320a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8043200:	697b      	ldr	r3, [r7, #20]
 8043202:	6a1b      	ldr	r3, [r3, #32]
 8043204:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8043206:	4313      	orrs	r3, r2
 8043208:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 804320a:	697b      	ldr	r3, [r7, #20]
 804320c:	681b      	ldr	r3, [r3, #0]
 804320e:	689b      	ldr	r3, [r3, #8]
 8043210:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8043214:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8043218:	697a      	ldr	r2, [r7, #20]
 804321a:	6812      	ldr	r2, [r2, #0]
 804321c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 804321e:	430b      	orrs	r3, r1
 8043220:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8043222:	697b      	ldr	r3, [r7, #20]
 8043224:	681b      	ldr	r3, [r3, #0]
 8043226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8043228:	f023 010f 	bic.w	r1, r3, #15
 804322c:	697b      	ldr	r3, [r7, #20]
 804322e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8043230:	697b      	ldr	r3, [r7, #20]
 8043232:	681b      	ldr	r3, [r3, #0]
 8043234:	430a      	orrs	r2, r1
 8043236:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8043238:	697b      	ldr	r3, [r7, #20]
 804323a:	681b      	ldr	r3, [r3, #0]
 804323c:	4a90      	ldr	r2, [pc, #576]	; (8043480 <UART_SetConfig+0x2ec>)
 804323e:	4293      	cmp	r3, r2
 8043240:	d126      	bne.n	8043290 <UART_SetConfig+0xfc>
 8043242:	4b90      	ldr	r3, [pc, #576]	; (8043484 <UART_SetConfig+0x2f0>)
 8043244:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8043248:	f003 0303 	and.w	r3, r3, #3
 804324c:	2b03      	cmp	r3, #3
 804324e:	d81b      	bhi.n	8043288 <UART_SetConfig+0xf4>
 8043250:	a201      	add	r2, pc, #4	; (adr r2, 8043258 <UART_SetConfig+0xc4>)
 8043252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8043256:	bf00      	nop
 8043258:	08043269 	.word	0x08043269
 804325c:	08043279 	.word	0x08043279
 8043260:	08043271 	.word	0x08043271
 8043264:	08043281 	.word	0x08043281
 8043268:	2301      	movs	r3, #1
 804326a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 804326e:	e116      	b.n	804349e <UART_SetConfig+0x30a>
 8043270:	2302      	movs	r3, #2
 8043272:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8043276:	e112      	b.n	804349e <UART_SetConfig+0x30a>
 8043278:	2304      	movs	r3, #4
 804327a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 804327e:	e10e      	b.n	804349e <UART_SetConfig+0x30a>
 8043280:	2308      	movs	r3, #8
 8043282:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8043286:	e10a      	b.n	804349e <UART_SetConfig+0x30a>
 8043288:	2310      	movs	r3, #16
 804328a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 804328e:	e106      	b.n	804349e <UART_SetConfig+0x30a>
 8043290:	697b      	ldr	r3, [r7, #20]
 8043292:	681b      	ldr	r3, [r3, #0]
 8043294:	4a7c      	ldr	r2, [pc, #496]	; (8043488 <UART_SetConfig+0x2f4>)
 8043296:	4293      	cmp	r3, r2
 8043298:	d138      	bne.n	804330c <UART_SetConfig+0x178>
 804329a:	4b7a      	ldr	r3, [pc, #488]	; (8043484 <UART_SetConfig+0x2f0>)
 804329c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80432a0:	f003 030c 	and.w	r3, r3, #12
 80432a4:	2b0c      	cmp	r3, #12
 80432a6:	d82d      	bhi.n	8043304 <UART_SetConfig+0x170>
 80432a8:	a201      	add	r2, pc, #4	; (adr r2, 80432b0 <UART_SetConfig+0x11c>)
 80432aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80432ae:	bf00      	nop
 80432b0:	080432e5 	.word	0x080432e5
 80432b4:	08043305 	.word	0x08043305
 80432b8:	08043305 	.word	0x08043305
 80432bc:	08043305 	.word	0x08043305
 80432c0:	080432f5 	.word	0x080432f5
 80432c4:	08043305 	.word	0x08043305
 80432c8:	08043305 	.word	0x08043305
 80432cc:	08043305 	.word	0x08043305
 80432d0:	080432ed 	.word	0x080432ed
 80432d4:	08043305 	.word	0x08043305
 80432d8:	08043305 	.word	0x08043305
 80432dc:	08043305 	.word	0x08043305
 80432e0:	080432fd 	.word	0x080432fd
 80432e4:	2300      	movs	r3, #0
 80432e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80432ea:	e0d8      	b.n	804349e <UART_SetConfig+0x30a>
 80432ec:	2302      	movs	r3, #2
 80432ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80432f2:	e0d4      	b.n	804349e <UART_SetConfig+0x30a>
 80432f4:	2304      	movs	r3, #4
 80432f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80432fa:	e0d0      	b.n	804349e <UART_SetConfig+0x30a>
 80432fc:	2308      	movs	r3, #8
 80432fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8043302:	e0cc      	b.n	804349e <UART_SetConfig+0x30a>
 8043304:	2310      	movs	r3, #16
 8043306:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 804330a:	e0c8      	b.n	804349e <UART_SetConfig+0x30a>
 804330c:	697b      	ldr	r3, [r7, #20]
 804330e:	681b      	ldr	r3, [r3, #0]
 8043310:	4a5e      	ldr	r2, [pc, #376]	; (804348c <UART_SetConfig+0x2f8>)
 8043312:	4293      	cmp	r3, r2
 8043314:	d125      	bne.n	8043362 <UART_SetConfig+0x1ce>
 8043316:	4b5b      	ldr	r3, [pc, #364]	; (8043484 <UART_SetConfig+0x2f0>)
 8043318:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804331c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8043320:	2b30      	cmp	r3, #48	; 0x30
 8043322:	d016      	beq.n	8043352 <UART_SetConfig+0x1be>
 8043324:	2b30      	cmp	r3, #48	; 0x30
 8043326:	d818      	bhi.n	804335a <UART_SetConfig+0x1c6>
 8043328:	2b20      	cmp	r3, #32
 804332a:	d00a      	beq.n	8043342 <UART_SetConfig+0x1ae>
 804332c:	2b20      	cmp	r3, #32
 804332e:	d814      	bhi.n	804335a <UART_SetConfig+0x1c6>
 8043330:	2b00      	cmp	r3, #0
 8043332:	d002      	beq.n	804333a <UART_SetConfig+0x1a6>
 8043334:	2b10      	cmp	r3, #16
 8043336:	d008      	beq.n	804334a <UART_SetConfig+0x1b6>
 8043338:	e00f      	b.n	804335a <UART_SetConfig+0x1c6>
 804333a:	2300      	movs	r3, #0
 804333c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8043340:	e0ad      	b.n	804349e <UART_SetConfig+0x30a>
 8043342:	2302      	movs	r3, #2
 8043344:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8043348:	e0a9      	b.n	804349e <UART_SetConfig+0x30a>
 804334a:	2304      	movs	r3, #4
 804334c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8043350:	e0a5      	b.n	804349e <UART_SetConfig+0x30a>
 8043352:	2308      	movs	r3, #8
 8043354:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8043358:	e0a1      	b.n	804349e <UART_SetConfig+0x30a>
 804335a:	2310      	movs	r3, #16
 804335c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8043360:	e09d      	b.n	804349e <UART_SetConfig+0x30a>
 8043362:	697b      	ldr	r3, [r7, #20]
 8043364:	681b      	ldr	r3, [r3, #0]
 8043366:	4a4a      	ldr	r2, [pc, #296]	; (8043490 <UART_SetConfig+0x2fc>)
 8043368:	4293      	cmp	r3, r2
 804336a:	d125      	bne.n	80433b8 <UART_SetConfig+0x224>
 804336c:	4b45      	ldr	r3, [pc, #276]	; (8043484 <UART_SetConfig+0x2f0>)
 804336e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8043372:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8043376:	2bc0      	cmp	r3, #192	; 0xc0
 8043378:	d016      	beq.n	80433a8 <UART_SetConfig+0x214>
 804337a:	2bc0      	cmp	r3, #192	; 0xc0
 804337c:	d818      	bhi.n	80433b0 <UART_SetConfig+0x21c>
 804337e:	2b80      	cmp	r3, #128	; 0x80
 8043380:	d00a      	beq.n	8043398 <UART_SetConfig+0x204>
 8043382:	2b80      	cmp	r3, #128	; 0x80
 8043384:	d814      	bhi.n	80433b0 <UART_SetConfig+0x21c>
 8043386:	2b00      	cmp	r3, #0
 8043388:	d002      	beq.n	8043390 <UART_SetConfig+0x1fc>
 804338a:	2b40      	cmp	r3, #64	; 0x40
 804338c:	d008      	beq.n	80433a0 <UART_SetConfig+0x20c>
 804338e:	e00f      	b.n	80433b0 <UART_SetConfig+0x21c>
 8043390:	2300      	movs	r3, #0
 8043392:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8043396:	e082      	b.n	804349e <UART_SetConfig+0x30a>
 8043398:	2302      	movs	r3, #2
 804339a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 804339e:	e07e      	b.n	804349e <UART_SetConfig+0x30a>
 80433a0:	2304      	movs	r3, #4
 80433a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80433a6:	e07a      	b.n	804349e <UART_SetConfig+0x30a>
 80433a8:	2308      	movs	r3, #8
 80433aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80433ae:	e076      	b.n	804349e <UART_SetConfig+0x30a>
 80433b0:	2310      	movs	r3, #16
 80433b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80433b6:	e072      	b.n	804349e <UART_SetConfig+0x30a>
 80433b8:	697b      	ldr	r3, [r7, #20]
 80433ba:	681b      	ldr	r3, [r3, #0]
 80433bc:	4a35      	ldr	r2, [pc, #212]	; (8043494 <UART_SetConfig+0x300>)
 80433be:	4293      	cmp	r3, r2
 80433c0:	d12a      	bne.n	8043418 <UART_SetConfig+0x284>
 80433c2:	4b30      	ldr	r3, [pc, #192]	; (8043484 <UART_SetConfig+0x2f0>)
 80433c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80433c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80433cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80433d0:	d01a      	beq.n	8043408 <UART_SetConfig+0x274>
 80433d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80433d6:	d81b      	bhi.n	8043410 <UART_SetConfig+0x27c>
 80433d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80433dc:	d00c      	beq.n	80433f8 <UART_SetConfig+0x264>
 80433de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80433e2:	d815      	bhi.n	8043410 <UART_SetConfig+0x27c>
 80433e4:	2b00      	cmp	r3, #0
 80433e6:	d003      	beq.n	80433f0 <UART_SetConfig+0x25c>
 80433e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80433ec:	d008      	beq.n	8043400 <UART_SetConfig+0x26c>
 80433ee:	e00f      	b.n	8043410 <UART_SetConfig+0x27c>
 80433f0:	2300      	movs	r3, #0
 80433f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80433f6:	e052      	b.n	804349e <UART_SetConfig+0x30a>
 80433f8:	2302      	movs	r3, #2
 80433fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80433fe:	e04e      	b.n	804349e <UART_SetConfig+0x30a>
 8043400:	2304      	movs	r3, #4
 8043402:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8043406:	e04a      	b.n	804349e <UART_SetConfig+0x30a>
 8043408:	2308      	movs	r3, #8
 804340a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 804340e:	e046      	b.n	804349e <UART_SetConfig+0x30a>
 8043410:	2310      	movs	r3, #16
 8043412:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8043416:	e042      	b.n	804349e <UART_SetConfig+0x30a>
 8043418:	697b      	ldr	r3, [r7, #20]
 804341a:	681b      	ldr	r3, [r3, #0]
 804341c:	4a17      	ldr	r2, [pc, #92]	; (804347c <UART_SetConfig+0x2e8>)
 804341e:	4293      	cmp	r3, r2
 8043420:	d13a      	bne.n	8043498 <UART_SetConfig+0x304>
 8043422:	4b18      	ldr	r3, [pc, #96]	; (8043484 <UART_SetConfig+0x2f0>)
 8043424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8043428:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 804342c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8043430:	d01a      	beq.n	8043468 <UART_SetConfig+0x2d4>
 8043432:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8043436:	d81b      	bhi.n	8043470 <UART_SetConfig+0x2dc>
 8043438:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 804343c:	d00c      	beq.n	8043458 <UART_SetConfig+0x2c4>
 804343e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8043442:	d815      	bhi.n	8043470 <UART_SetConfig+0x2dc>
 8043444:	2b00      	cmp	r3, #0
 8043446:	d003      	beq.n	8043450 <UART_SetConfig+0x2bc>
 8043448:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 804344c:	d008      	beq.n	8043460 <UART_SetConfig+0x2cc>
 804344e:	e00f      	b.n	8043470 <UART_SetConfig+0x2dc>
 8043450:	2300      	movs	r3, #0
 8043452:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8043456:	e022      	b.n	804349e <UART_SetConfig+0x30a>
 8043458:	2302      	movs	r3, #2
 804345a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 804345e:	e01e      	b.n	804349e <UART_SetConfig+0x30a>
 8043460:	2304      	movs	r3, #4
 8043462:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8043466:	e01a      	b.n	804349e <UART_SetConfig+0x30a>
 8043468:	2308      	movs	r3, #8
 804346a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 804346e:	e016      	b.n	804349e <UART_SetConfig+0x30a>
 8043470:	2310      	movs	r3, #16
 8043472:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8043476:	e012      	b.n	804349e <UART_SetConfig+0x30a>
 8043478:	cfff69f3 	.word	0xcfff69f3
 804347c:	40008000 	.word	0x40008000
 8043480:	40013800 	.word	0x40013800
 8043484:	40021000 	.word	0x40021000
 8043488:	40004400 	.word	0x40004400
 804348c:	40004800 	.word	0x40004800
 8043490:	40004c00 	.word	0x40004c00
 8043494:	40005000 	.word	0x40005000
 8043498:	2310      	movs	r3, #16
 804349a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 804349e:	697b      	ldr	r3, [r7, #20]
 80434a0:	681b      	ldr	r3, [r3, #0]
 80434a2:	4aae      	ldr	r2, [pc, #696]	; (804375c <UART_SetConfig+0x5c8>)
 80434a4:	4293      	cmp	r3, r2
 80434a6:	f040 8097 	bne.w	80435d8 <UART_SetConfig+0x444>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80434aa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80434ae:	2b08      	cmp	r3, #8
 80434b0:	d823      	bhi.n	80434fa <UART_SetConfig+0x366>
 80434b2:	a201      	add	r2, pc, #4	; (adr r2, 80434b8 <UART_SetConfig+0x324>)
 80434b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80434b8:	080434dd 	.word	0x080434dd
 80434bc:	080434fb 	.word	0x080434fb
 80434c0:	080434e5 	.word	0x080434e5
 80434c4:	080434fb 	.word	0x080434fb
 80434c8:	080434eb 	.word	0x080434eb
 80434cc:	080434fb 	.word	0x080434fb
 80434d0:	080434fb 	.word	0x080434fb
 80434d4:	080434fb 	.word	0x080434fb
 80434d8:	080434f3 	.word	0x080434f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80434dc:	f7fe ff4e 	bl	804237c <HAL_RCC_GetPCLK1Freq>
 80434e0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80434e2:	e010      	b.n	8043506 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80434e4:	4b9e      	ldr	r3, [pc, #632]	; (8043760 <UART_SetConfig+0x5cc>)
 80434e6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80434e8:	e00d      	b.n	8043506 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80434ea:	f7fe fed9 	bl	80422a0 <HAL_RCC_GetSysClockFreq>
 80434ee:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80434f0:	e009      	b.n	8043506 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80434f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80434f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80434f8:	e005      	b.n	8043506 <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 80434fa:	2300      	movs	r3, #0
 80434fc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80434fe:	2301      	movs	r3, #1
 8043500:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8043504:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8043506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8043508:	2b00      	cmp	r3, #0
 804350a:	f000 8130 	beq.w	804376e <UART_SetConfig+0x5da>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 804350e:	697b      	ldr	r3, [r7, #20]
 8043510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8043512:	4a94      	ldr	r2, [pc, #592]	; (8043764 <UART_SetConfig+0x5d0>)
 8043514:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8043518:	461a      	mov	r2, r3
 804351a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804351c:	fbb3 f3f2 	udiv	r3, r3, r2
 8043520:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8043522:	697b      	ldr	r3, [r7, #20]
 8043524:	685a      	ldr	r2, [r3, #4]
 8043526:	4613      	mov	r3, r2
 8043528:	005b      	lsls	r3, r3, #1
 804352a:	4413      	add	r3, r2
 804352c:	69ba      	ldr	r2, [r7, #24]
 804352e:	429a      	cmp	r2, r3
 8043530:	d305      	bcc.n	804353e <UART_SetConfig+0x3aa>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8043532:	697b      	ldr	r3, [r7, #20]
 8043534:	685b      	ldr	r3, [r3, #4]
 8043536:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8043538:	69ba      	ldr	r2, [r7, #24]
 804353a:	429a      	cmp	r2, r3
 804353c:	d903      	bls.n	8043546 <UART_SetConfig+0x3b2>
      {
        ret = HAL_ERROR;
 804353e:	2301      	movs	r3, #1
 8043540:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8043544:	e113      	b.n	804376e <UART_SetConfig+0x5da>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8043546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8043548:	2200      	movs	r2, #0
 804354a:	60bb      	str	r3, [r7, #8]
 804354c:	60fa      	str	r2, [r7, #12]
 804354e:	697b      	ldr	r3, [r7, #20]
 8043550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8043552:	4a84      	ldr	r2, [pc, #528]	; (8043764 <UART_SetConfig+0x5d0>)
 8043554:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8043558:	b29b      	uxth	r3, r3
 804355a:	2200      	movs	r2, #0
 804355c:	603b      	str	r3, [r7, #0]
 804355e:	607a      	str	r2, [r7, #4]
 8043560:	e9d7 2300 	ldrd	r2, r3, [r7]
 8043564:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8043568:	f7fc fe5e 	bl	8040228 <__aeabi_uldivmod>
 804356c:	4602      	mov	r2, r0
 804356e:	460b      	mov	r3, r1
 8043570:	4610      	mov	r0, r2
 8043572:	4619      	mov	r1, r3
 8043574:	f04f 0200 	mov.w	r2, #0
 8043578:	f04f 0300 	mov.w	r3, #0
 804357c:	020b      	lsls	r3, r1, #8
 804357e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8043582:	0202      	lsls	r2, r0, #8
 8043584:	6979      	ldr	r1, [r7, #20]
 8043586:	6849      	ldr	r1, [r1, #4]
 8043588:	0849      	lsrs	r1, r1, #1
 804358a:	2000      	movs	r0, #0
 804358c:	460c      	mov	r4, r1
 804358e:	4605      	mov	r5, r0
 8043590:	eb12 0804 	adds.w	r8, r2, r4
 8043594:	eb43 0905 	adc.w	r9, r3, r5
 8043598:	697b      	ldr	r3, [r7, #20]
 804359a:	685b      	ldr	r3, [r3, #4]
 804359c:	2200      	movs	r2, #0
 804359e:	469a      	mov	sl, r3
 80435a0:	4693      	mov	fp, r2
 80435a2:	4652      	mov	r2, sl
 80435a4:	465b      	mov	r3, fp
 80435a6:	4640      	mov	r0, r8
 80435a8:	4649      	mov	r1, r9
 80435aa:	f7fc fe3d 	bl	8040228 <__aeabi_uldivmod>
 80435ae:	4602      	mov	r2, r0
 80435b0:	460b      	mov	r3, r1
 80435b2:	4613      	mov	r3, r2
 80435b4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80435b6:	6a3b      	ldr	r3, [r7, #32]
 80435b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80435bc:	d308      	bcc.n	80435d0 <UART_SetConfig+0x43c>
 80435be:	6a3b      	ldr	r3, [r7, #32]
 80435c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80435c4:	d204      	bcs.n	80435d0 <UART_SetConfig+0x43c>
        {
          huart->Instance->BRR = usartdiv;
 80435c6:	697b      	ldr	r3, [r7, #20]
 80435c8:	681b      	ldr	r3, [r3, #0]
 80435ca:	6a3a      	ldr	r2, [r7, #32]
 80435cc:	60da      	str	r2, [r3, #12]
 80435ce:	e0ce      	b.n	804376e <UART_SetConfig+0x5da>
        }
        else
        {
          ret = HAL_ERROR;
 80435d0:	2301      	movs	r3, #1
 80435d2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80435d6:	e0ca      	b.n	804376e <UART_SetConfig+0x5da>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80435d8:	697b      	ldr	r3, [r7, #20]
 80435da:	69db      	ldr	r3, [r3, #28]
 80435dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80435e0:	d167      	bne.n	80436b2 <UART_SetConfig+0x51e>
  {
    switch (clocksource)
 80435e2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80435e6:	2b08      	cmp	r3, #8
 80435e8:	d827      	bhi.n	804363a <UART_SetConfig+0x4a6>
 80435ea:	a201      	add	r2, pc, #4	; (adr r2, 80435f0 <UART_SetConfig+0x45c>)
 80435ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80435f0:	08043615 	.word	0x08043615
 80435f4:	0804361d 	.word	0x0804361d
 80435f8:	08043625 	.word	0x08043625
 80435fc:	0804363b 	.word	0x0804363b
 8043600:	0804362b 	.word	0x0804362b
 8043604:	0804363b 	.word	0x0804363b
 8043608:	0804363b 	.word	0x0804363b
 804360c:	0804363b 	.word	0x0804363b
 8043610:	08043633 	.word	0x08043633
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8043614:	f7fe feb2 	bl	804237c <HAL_RCC_GetPCLK1Freq>
 8043618:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 804361a:	e014      	b.n	8043646 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 804361c:	f7fe fec4 	bl	80423a8 <HAL_RCC_GetPCLK2Freq>
 8043620:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8043622:	e010      	b.n	8043646 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8043624:	4b4e      	ldr	r3, [pc, #312]	; (8043760 <UART_SetConfig+0x5cc>)
 8043626:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8043628:	e00d      	b.n	8043646 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 804362a:	f7fe fe39 	bl	80422a0 <HAL_RCC_GetSysClockFreq>
 804362e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8043630:	e009      	b.n	8043646 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8043632:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8043636:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8043638:	e005      	b.n	8043646 <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 804363a:	2300      	movs	r3, #0
 804363c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 804363e:	2301      	movs	r3, #1
 8043640:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8043644:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8043646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8043648:	2b00      	cmp	r3, #0
 804364a:	f000 8090 	beq.w	804376e <UART_SetConfig+0x5da>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 804364e:	697b      	ldr	r3, [r7, #20]
 8043650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8043652:	4a44      	ldr	r2, [pc, #272]	; (8043764 <UART_SetConfig+0x5d0>)
 8043654:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8043658:	461a      	mov	r2, r3
 804365a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804365c:	fbb3 f3f2 	udiv	r3, r3, r2
 8043660:	005a      	lsls	r2, r3, #1
 8043662:	697b      	ldr	r3, [r7, #20]
 8043664:	685b      	ldr	r3, [r3, #4]
 8043666:	085b      	lsrs	r3, r3, #1
 8043668:	441a      	add	r2, r3
 804366a:	697b      	ldr	r3, [r7, #20]
 804366c:	685b      	ldr	r3, [r3, #4]
 804366e:	fbb2 f3f3 	udiv	r3, r2, r3
 8043672:	b29b      	uxth	r3, r3
 8043674:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8043676:	6a3b      	ldr	r3, [r7, #32]
 8043678:	2b0f      	cmp	r3, #15
 804367a:	d916      	bls.n	80436aa <UART_SetConfig+0x516>
 804367c:	6a3b      	ldr	r3, [r7, #32]
 804367e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8043682:	d212      	bcs.n	80436aa <UART_SetConfig+0x516>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8043684:	6a3b      	ldr	r3, [r7, #32]
 8043686:	b29b      	uxth	r3, r3
 8043688:	f023 030f 	bic.w	r3, r3, #15
 804368c:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 804368e:	6a3b      	ldr	r3, [r7, #32]
 8043690:	085b      	lsrs	r3, r3, #1
 8043692:	b29b      	uxth	r3, r3
 8043694:	f003 0307 	and.w	r3, r3, #7
 8043698:	b29a      	uxth	r2, r3
 804369a:	8bfb      	ldrh	r3, [r7, #30]
 804369c:	4313      	orrs	r3, r2
 804369e:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80436a0:	697b      	ldr	r3, [r7, #20]
 80436a2:	681b      	ldr	r3, [r3, #0]
 80436a4:	8bfa      	ldrh	r2, [r7, #30]
 80436a6:	60da      	str	r2, [r3, #12]
 80436a8:	e061      	b.n	804376e <UART_SetConfig+0x5da>
      }
      else
      {
        ret = HAL_ERROR;
 80436aa:	2301      	movs	r3, #1
 80436ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80436b0:	e05d      	b.n	804376e <UART_SetConfig+0x5da>
      }
    }
  }
  else
  {
    switch (clocksource)
 80436b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80436b6:	2b08      	cmp	r3, #8
 80436b8:	d827      	bhi.n	804370a <UART_SetConfig+0x576>
 80436ba:	a201      	add	r2, pc, #4	; (adr r2, 80436c0 <UART_SetConfig+0x52c>)
 80436bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80436c0:	080436e5 	.word	0x080436e5
 80436c4:	080436ed 	.word	0x080436ed
 80436c8:	080436f5 	.word	0x080436f5
 80436cc:	0804370b 	.word	0x0804370b
 80436d0:	080436fb 	.word	0x080436fb
 80436d4:	0804370b 	.word	0x0804370b
 80436d8:	0804370b 	.word	0x0804370b
 80436dc:	0804370b 	.word	0x0804370b
 80436e0:	08043703 	.word	0x08043703
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80436e4:	f7fe fe4a 	bl	804237c <HAL_RCC_GetPCLK1Freq>
 80436e8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80436ea:	e014      	b.n	8043716 <UART_SetConfig+0x582>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80436ec:	f7fe fe5c 	bl	80423a8 <HAL_RCC_GetPCLK2Freq>
 80436f0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80436f2:	e010      	b.n	8043716 <UART_SetConfig+0x582>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80436f4:	4b1a      	ldr	r3, [pc, #104]	; (8043760 <UART_SetConfig+0x5cc>)
 80436f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80436f8:	e00d      	b.n	8043716 <UART_SetConfig+0x582>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80436fa:	f7fe fdd1 	bl	80422a0 <HAL_RCC_GetSysClockFreq>
 80436fe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8043700:	e009      	b.n	8043716 <UART_SetConfig+0x582>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8043702:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8043706:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8043708:	e005      	b.n	8043716 <UART_SetConfig+0x582>
      default:
        pclk = 0U;
 804370a:	2300      	movs	r3, #0
 804370c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 804370e:	2301      	movs	r3, #1
 8043710:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8043714:	bf00      	nop
    }

    if (pclk != 0U)
 8043716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8043718:	2b00      	cmp	r3, #0
 804371a:	d028      	beq.n	804376e <UART_SetConfig+0x5da>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 804371c:	697b      	ldr	r3, [r7, #20]
 804371e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8043720:	4a10      	ldr	r2, [pc, #64]	; (8043764 <UART_SetConfig+0x5d0>)
 8043722:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8043726:	461a      	mov	r2, r3
 8043728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804372a:	fbb3 f2f2 	udiv	r2, r3, r2
 804372e:	697b      	ldr	r3, [r7, #20]
 8043730:	685b      	ldr	r3, [r3, #4]
 8043732:	085b      	lsrs	r3, r3, #1
 8043734:	441a      	add	r2, r3
 8043736:	697b      	ldr	r3, [r7, #20]
 8043738:	685b      	ldr	r3, [r3, #4]
 804373a:	fbb2 f3f3 	udiv	r3, r2, r3
 804373e:	b29b      	uxth	r3, r3
 8043740:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8043742:	6a3b      	ldr	r3, [r7, #32]
 8043744:	2b0f      	cmp	r3, #15
 8043746:	d90f      	bls.n	8043768 <UART_SetConfig+0x5d4>
 8043748:	6a3b      	ldr	r3, [r7, #32]
 804374a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 804374e:	d20b      	bcs.n	8043768 <UART_SetConfig+0x5d4>
      {
        huart->Instance->BRR = usartdiv;
 8043750:	697b      	ldr	r3, [r7, #20]
 8043752:	681b      	ldr	r3, [r3, #0]
 8043754:	6a3a      	ldr	r2, [r7, #32]
 8043756:	60da      	str	r2, [r3, #12]
 8043758:	e009      	b.n	804376e <UART_SetConfig+0x5da>
 804375a:	bf00      	nop
 804375c:	40008000 	.word	0x40008000
 8043760:	00f42400 	.word	0x00f42400
 8043764:	08043de0 	.word	0x08043de0
      }
      else
      {
        ret = HAL_ERROR;
 8043768:	2301      	movs	r3, #1
 804376a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 804376e:	697b      	ldr	r3, [r7, #20]
 8043770:	2201      	movs	r2, #1
 8043772:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8043776:	697b      	ldr	r3, [r7, #20]
 8043778:	2201      	movs	r2, #1
 804377a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 804377e:	697b      	ldr	r3, [r7, #20]
 8043780:	2200      	movs	r2, #0
 8043782:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8043784:	697b      	ldr	r3, [r7, #20]
 8043786:	2200      	movs	r2, #0
 8043788:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 804378a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 804378e:	4618      	mov	r0, r3
 8043790:	3730      	adds	r7, #48	; 0x30
 8043792:	46bd      	mov	sp, r7
 8043794:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08043798 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8043798:	b480      	push	{r7}
 804379a:	b083      	sub	sp, #12
 804379c:	af00      	add	r7, sp, #0
 804379e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80437a0:	687b      	ldr	r3, [r7, #4]
 80437a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80437a4:	f003 0301 	and.w	r3, r3, #1
 80437a8:	2b00      	cmp	r3, #0
 80437aa:	d00a      	beq.n	80437c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80437ac:	687b      	ldr	r3, [r7, #4]
 80437ae:	681b      	ldr	r3, [r3, #0]
 80437b0:	685b      	ldr	r3, [r3, #4]
 80437b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80437b6:	687b      	ldr	r3, [r7, #4]
 80437b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80437ba:	687b      	ldr	r3, [r7, #4]
 80437bc:	681b      	ldr	r3, [r3, #0]
 80437be:	430a      	orrs	r2, r1
 80437c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80437c2:	687b      	ldr	r3, [r7, #4]
 80437c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80437c6:	f003 0302 	and.w	r3, r3, #2
 80437ca:	2b00      	cmp	r3, #0
 80437cc:	d00a      	beq.n	80437e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80437ce:	687b      	ldr	r3, [r7, #4]
 80437d0:	681b      	ldr	r3, [r3, #0]
 80437d2:	685b      	ldr	r3, [r3, #4]
 80437d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80437d8:	687b      	ldr	r3, [r7, #4]
 80437da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80437dc:	687b      	ldr	r3, [r7, #4]
 80437de:	681b      	ldr	r3, [r3, #0]
 80437e0:	430a      	orrs	r2, r1
 80437e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80437e4:	687b      	ldr	r3, [r7, #4]
 80437e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80437e8:	f003 0304 	and.w	r3, r3, #4
 80437ec:	2b00      	cmp	r3, #0
 80437ee:	d00a      	beq.n	8043806 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80437f0:	687b      	ldr	r3, [r7, #4]
 80437f2:	681b      	ldr	r3, [r3, #0]
 80437f4:	685b      	ldr	r3, [r3, #4]
 80437f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80437fa:	687b      	ldr	r3, [r7, #4]
 80437fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80437fe:	687b      	ldr	r3, [r7, #4]
 8043800:	681b      	ldr	r3, [r3, #0]
 8043802:	430a      	orrs	r2, r1
 8043804:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8043806:	687b      	ldr	r3, [r7, #4]
 8043808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804380a:	f003 0308 	and.w	r3, r3, #8
 804380e:	2b00      	cmp	r3, #0
 8043810:	d00a      	beq.n	8043828 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8043812:	687b      	ldr	r3, [r7, #4]
 8043814:	681b      	ldr	r3, [r3, #0]
 8043816:	685b      	ldr	r3, [r3, #4]
 8043818:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 804381c:	687b      	ldr	r3, [r7, #4]
 804381e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8043820:	687b      	ldr	r3, [r7, #4]
 8043822:	681b      	ldr	r3, [r3, #0]
 8043824:	430a      	orrs	r2, r1
 8043826:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8043828:	687b      	ldr	r3, [r7, #4]
 804382a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804382c:	f003 0310 	and.w	r3, r3, #16
 8043830:	2b00      	cmp	r3, #0
 8043832:	d00a      	beq.n	804384a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8043834:	687b      	ldr	r3, [r7, #4]
 8043836:	681b      	ldr	r3, [r3, #0]
 8043838:	689b      	ldr	r3, [r3, #8]
 804383a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 804383e:	687b      	ldr	r3, [r7, #4]
 8043840:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8043842:	687b      	ldr	r3, [r7, #4]
 8043844:	681b      	ldr	r3, [r3, #0]
 8043846:	430a      	orrs	r2, r1
 8043848:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 804384a:	687b      	ldr	r3, [r7, #4]
 804384c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804384e:	f003 0320 	and.w	r3, r3, #32
 8043852:	2b00      	cmp	r3, #0
 8043854:	d00a      	beq.n	804386c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8043856:	687b      	ldr	r3, [r7, #4]
 8043858:	681b      	ldr	r3, [r3, #0]
 804385a:	689b      	ldr	r3, [r3, #8]
 804385c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8043860:	687b      	ldr	r3, [r7, #4]
 8043862:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8043864:	687b      	ldr	r3, [r7, #4]
 8043866:	681b      	ldr	r3, [r3, #0]
 8043868:	430a      	orrs	r2, r1
 804386a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 804386c:	687b      	ldr	r3, [r7, #4]
 804386e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8043870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8043874:	2b00      	cmp	r3, #0
 8043876:	d01a      	beq.n	80438ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8043878:	687b      	ldr	r3, [r7, #4]
 804387a:	681b      	ldr	r3, [r3, #0]
 804387c:	685b      	ldr	r3, [r3, #4]
 804387e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8043882:	687b      	ldr	r3, [r7, #4]
 8043884:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8043886:	687b      	ldr	r3, [r7, #4]
 8043888:	681b      	ldr	r3, [r3, #0]
 804388a:	430a      	orrs	r2, r1
 804388c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 804388e:	687b      	ldr	r3, [r7, #4]
 8043890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8043892:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8043896:	d10a      	bne.n	80438ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8043898:	687b      	ldr	r3, [r7, #4]
 804389a:	681b      	ldr	r3, [r3, #0]
 804389c:	685b      	ldr	r3, [r3, #4]
 804389e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80438a2:	687b      	ldr	r3, [r7, #4]
 80438a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80438a6:	687b      	ldr	r3, [r7, #4]
 80438a8:	681b      	ldr	r3, [r3, #0]
 80438aa:	430a      	orrs	r2, r1
 80438ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80438ae:	687b      	ldr	r3, [r7, #4]
 80438b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80438b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80438b6:	2b00      	cmp	r3, #0
 80438b8:	d00a      	beq.n	80438d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80438ba:	687b      	ldr	r3, [r7, #4]
 80438bc:	681b      	ldr	r3, [r3, #0]
 80438be:	685b      	ldr	r3, [r3, #4]
 80438c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80438c4:	687b      	ldr	r3, [r7, #4]
 80438c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80438c8:	687b      	ldr	r3, [r7, #4]
 80438ca:	681b      	ldr	r3, [r3, #0]
 80438cc:	430a      	orrs	r2, r1
 80438ce:	605a      	str	r2, [r3, #4]
  }
}
 80438d0:	bf00      	nop
 80438d2:	370c      	adds	r7, #12
 80438d4:	46bd      	mov	sp, r7
 80438d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80438da:	4770      	bx	lr

080438dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80438dc:	b580      	push	{r7, lr}
 80438de:	b086      	sub	sp, #24
 80438e0:	af02      	add	r7, sp, #8
 80438e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80438e4:	687b      	ldr	r3, [r7, #4]
 80438e6:	2200      	movs	r2, #0
 80438e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80438ec:	f7fd fa38 	bl	8040d60 <HAL_GetTick>
 80438f0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80438f2:	687b      	ldr	r3, [r7, #4]
 80438f4:	681b      	ldr	r3, [r3, #0]
 80438f6:	681b      	ldr	r3, [r3, #0]
 80438f8:	f003 0308 	and.w	r3, r3, #8
 80438fc:	2b08      	cmp	r3, #8
 80438fe:	d10e      	bne.n	804391e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8043900:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8043904:	9300      	str	r3, [sp, #0]
 8043906:	68fb      	ldr	r3, [r7, #12]
 8043908:	2200      	movs	r2, #0
 804390a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 804390e:	6878      	ldr	r0, [r7, #4]
 8043910:	f000 f82c 	bl	804396c <UART_WaitOnFlagUntilTimeout>
 8043914:	4603      	mov	r3, r0
 8043916:	2b00      	cmp	r3, #0
 8043918:	d001      	beq.n	804391e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 804391a:	2303      	movs	r3, #3
 804391c:	e022      	b.n	8043964 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 804391e:	687b      	ldr	r3, [r7, #4]
 8043920:	681b      	ldr	r3, [r3, #0]
 8043922:	681b      	ldr	r3, [r3, #0]
 8043924:	f003 0304 	and.w	r3, r3, #4
 8043928:	2b04      	cmp	r3, #4
 804392a:	d10e      	bne.n	804394a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 804392c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8043930:	9300      	str	r3, [sp, #0]
 8043932:	68fb      	ldr	r3, [r7, #12]
 8043934:	2200      	movs	r2, #0
 8043936:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 804393a:	6878      	ldr	r0, [r7, #4]
 804393c:	f000 f816 	bl	804396c <UART_WaitOnFlagUntilTimeout>
 8043940:	4603      	mov	r3, r0
 8043942:	2b00      	cmp	r3, #0
 8043944:	d001      	beq.n	804394a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8043946:	2303      	movs	r3, #3
 8043948:	e00c      	b.n	8043964 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 804394a:	687b      	ldr	r3, [r7, #4]
 804394c:	2220      	movs	r2, #32
 804394e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8043952:	687b      	ldr	r3, [r7, #4]
 8043954:	2220      	movs	r2, #32
 8043956:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 804395a:	687b      	ldr	r3, [r7, #4]
 804395c:	2200      	movs	r2, #0
 804395e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8043962:	2300      	movs	r3, #0
}
 8043964:	4618      	mov	r0, r3
 8043966:	3710      	adds	r7, #16
 8043968:	46bd      	mov	sp, r7
 804396a:	bd80      	pop	{r7, pc}

0804396c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 804396c:	b580      	push	{r7, lr}
 804396e:	b084      	sub	sp, #16
 8043970:	af00      	add	r7, sp, #0
 8043972:	60f8      	str	r0, [r7, #12]
 8043974:	60b9      	str	r1, [r7, #8]
 8043976:	603b      	str	r3, [r7, #0]
 8043978:	4613      	mov	r3, r2
 804397a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 804397c:	e062      	b.n	8043a44 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 804397e:	69bb      	ldr	r3, [r7, #24]
 8043980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8043984:	d05e      	beq.n	8043a44 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8043986:	f7fd f9eb 	bl	8040d60 <HAL_GetTick>
 804398a:	4602      	mov	r2, r0
 804398c:	683b      	ldr	r3, [r7, #0]
 804398e:	1ad3      	subs	r3, r2, r3
 8043990:	69ba      	ldr	r2, [r7, #24]
 8043992:	429a      	cmp	r2, r3
 8043994:	d302      	bcc.n	804399c <UART_WaitOnFlagUntilTimeout+0x30>
 8043996:	69bb      	ldr	r3, [r7, #24]
 8043998:	2b00      	cmp	r3, #0
 804399a:	d11d      	bne.n	80439d8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 804399c:	68fb      	ldr	r3, [r7, #12]
 804399e:	681b      	ldr	r3, [r3, #0]
 80439a0:	681a      	ldr	r2, [r3, #0]
 80439a2:	68fb      	ldr	r3, [r7, #12]
 80439a4:	681b      	ldr	r3, [r3, #0]
 80439a6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80439aa:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80439ac:	68fb      	ldr	r3, [r7, #12]
 80439ae:	681b      	ldr	r3, [r3, #0]
 80439b0:	689a      	ldr	r2, [r3, #8]
 80439b2:	68fb      	ldr	r3, [r7, #12]
 80439b4:	681b      	ldr	r3, [r3, #0]
 80439b6:	f022 0201 	bic.w	r2, r2, #1
 80439ba:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80439bc:	68fb      	ldr	r3, [r7, #12]
 80439be:	2220      	movs	r2, #32
 80439c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80439c4:	68fb      	ldr	r3, [r7, #12]
 80439c6:	2220      	movs	r2, #32
 80439c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80439cc:	68fb      	ldr	r3, [r7, #12]
 80439ce:	2200      	movs	r2, #0
 80439d0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80439d4:	2303      	movs	r3, #3
 80439d6:	e045      	b.n	8043a64 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80439d8:	68fb      	ldr	r3, [r7, #12]
 80439da:	681b      	ldr	r3, [r3, #0]
 80439dc:	681b      	ldr	r3, [r3, #0]
 80439de:	f003 0304 	and.w	r3, r3, #4
 80439e2:	2b00      	cmp	r3, #0
 80439e4:	d02e      	beq.n	8043a44 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80439e6:	68fb      	ldr	r3, [r7, #12]
 80439e8:	681b      	ldr	r3, [r3, #0]
 80439ea:	69db      	ldr	r3, [r3, #28]
 80439ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80439f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80439f4:	d126      	bne.n	8043a44 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80439f6:	68fb      	ldr	r3, [r7, #12]
 80439f8:	681b      	ldr	r3, [r3, #0]
 80439fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80439fe:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8043a00:	68fb      	ldr	r3, [r7, #12]
 8043a02:	681b      	ldr	r3, [r3, #0]
 8043a04:	681a      	ldr	r2, [r3, #0]
 8043a06:	68fb      	ldr	r3, [r7, #12]
 8043a08:	681b      	ldr	r3, [r3, #0]
 8043a0a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8043a0e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8043a10:	68fb      	ldr	r3, [r7, #12]
 8043a12:	681b      	ldr	r3, [r3, #0]
 8043a14:	689a      	ldr	r2, [r3, #8]
 8043a16:	68fb      	ldr	r3, [r7, #12]
 8043a18:	681b      	ldr	r3, [r3, #0]
 8043a1a:	f022 0201 	bic.w	r2, r2, #1
 8043a1e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8043a20:	68fb      	ldr	r3, [r7, #12]
 8043a22:	2220      	movs	r2, #32
 8043a24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8043a28:	68fb      	ldr	r3, [r7, #12]
 8043a2a:	2220      	movs	r2, #32
 8043a2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8043a30:	68fb      	ldr	r3, [r7, #12]
 8043a32:	2220      	movs	r2, #32
 8043a34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8043a38:	68fb      	ldr	r3, [r7, #12]
 8043a3a:	2200      	movs	r2, #0
 8043a3c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8043a40:	2303      	movs	r3, #3
 8043a42:	e00f      	b.n	8043a64 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8043a44:	68fb      	ldr	r3, [r7, #12]
 8043a46:	681b      	ldr	r3, [r3, #0]
 8043a48:	69da      	ldr	r2, [r3, #28]
 8043a4a:	68bb      	ldr	r3, [r7, #8]
 8043a4c:	4013      	ands	r3, r2
 8043a4e:	68ba      	ldr	r2, [r7, #8]
 8043a50:	429a      	cmp	r2, r3
 8043a52:	bf0c      	ite	eq
 8043a54:	2301      	moveq	r3, #1
 8043a56:	2300      	movne	r3, #0
 8043a58:	b2db      	uxtb	r3, r3
 8043a5a:	461a      	mov	r2, r3
 8043a5c:	79fb      	ldrb	r3, [r7, #7]
 8043a5e:	429a      	cmp	r2, r3
 8043a60:	d08d      	beq.n	804397e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8043a62:	2300      	movs	r3, #0
}
 8043a64:	4618      	mov	r0, r3
 8043a66:	3710      	adds	r7, #16
 8043a68:	46bd      	mov	sp, r7
 8043a6a:	bd80      	pop	{r7, pc}

08043a6c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8043a6c:	b480      	push	{r7}
 8043a6e:	b085      	sub	sp, #20
 8043a70:	af00      	add	r7, sp, #0
 8043a72:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8043a74:	687b      	ldr	r3, [r7, #4]
 8043a76:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8043a7a:	2b01      	cmp	r3, #1
 8043a7c:	d101      	bne.n	8043a82 <HAL_UARTEx_DisableFifoMode+0x16>
 8043a7e:	2302      	movs	r3, #2
 8043a80:	e027      	b.n	8043ad2 <HAL_UARTEx_DisableFifoMode+0x66>
 8043a82:	687b      	ldr	r3, [r7, #4]
 8043a84:	2201      	movs	r2, #1
 8043a86:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8043a8a:	687b      	ldr	r3, [r7, #4]
 8043a8c:	2224      	movs	r2, #36	; 0x24
 8043a8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8043a92:	687b      	ldr	r3, [r7, #4]
 8043a94:	681b      	ldr	r3, [r3, #0]
 8043a96:	681b      	ldr	r3, [r3, #0]
 8043a98:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8043a9a:	687b      	ldr	r3, [r7, #4]
 8043a9c:	681b      	ldr	r3, [r3, #0]
 8043a9e:	681a      	ldr	r2, [r3, #0]
 8043aa0:	687b      	ldr	r3, [r7, #4]
 8043aa2:	681b      	ldr	r3, [r3, #0]
 8043aa4:	f022 0201 	bic.w	r2, r2, #1
 8043aa8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8043aaa:	68fb      	ldr	r3, [r7, #12]
 8043aac:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8043ab0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8043ab2:	687b      	ldr	r3, [r7, #4]
 8043ab4:	2200      	movs	r2, #0
 8043ab6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8043ab8:	687b      	ldr	r3, [r7, #4]
 8043aba:	681b      	ldr	r3, [r3, #0]
 8043abc:	68fa      	ldr	r2, [r7, #12]
 8043abe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8043ac0:	687b      	ldr	r3, [r7, #4]
 8043ac2:	2220      	movs	r2, #32
 8043ac4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8043ac8:	687b      	ldr	r3, [r7, #4]
 8043aca:	2200      	movs	r2, #0
 8043acc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8043ad0:	2300      	movs	r3, #0
}
 8043ad2:	4618      	mov	r0, r3
 8043ad4:	3714      	adds	r7, #20
 8043ad6:	46bd      	mov	sp, r7
 8043ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043adc:	4770      	bx	lr

08043ade <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8043ade:	b580      	push	{r7, lr}
 8043ae0:	b084      	sub	sp, #16
 8043ae2:	af00      	add	r7, sp, #0
 8043ae4:	6078      	str	r0, [r7, #4]
 8043ae6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8043ae8:	687b      	ldr	r3, [r7, #4]
 8043aea:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8043aee:	2b01      	cmp	r3, #1
 8043af0:	d101      	bne.n	8043af6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8043af2:	2302      	movs	r3, #2
 8043af4:	e02d      	b.n	8043b52 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8043af6:	687b      	ldr	r3, [r7, #4]
 8043af8:	2201      	movs	r2, #1
 8043afa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8043afe:	687b      	ldr	r3, [r7, #4]
 8043b00:	2224      	movs	r2, #36	; 0x24
 8043b02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8043b06:	687b      	ldr	r3, [r7, #4]
 8043b08:	681b      	ldr	r3, [r3, #0]
 8043b0a:	681b      	ldr	r3, [r3, #0]
 8043b0c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8043b0e:	687b      	ldr	r3, [r7, #4]
 8043b10:	681b      	ldr	r3, [r3, #0]
 8043b12:	681a      	ldr	r2, [r3, #0]
 8043b14:	687b      	ldr	r3, [r7, #4]
 8043b16:	681b      	ldr	r3, [r3, #0]
 8043b18:	f022 0201 	bic.w	r2, r2, #1
 8043b1c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8043b1e:	687b      	ldr	r3, [r7, #4]
 8043b20:	681b      	ldr	r3, [r3, #0]
 8043b22:	689b      	ldr	r3, [r3, #8]
 8043b24:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8043b28:	687b      	ldr	r3, [r7, #4]
 8043b2a:	681b      	ldr	r3, [r3, #0]
 8043b2c:	683a      	ldr	r2, [r7, #0]
 8043b2e:	430a      	orrs	r2, r1
 8043b30:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8043b32:	6878      	ldr	r0, [r7, #4]
 8043b34:	f000 f850 	bl	8043bd8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8043b38:	687b      	ldr	r3, [r7, #4]
 8043b3a:	681b      	ldr	r3, [r3, #0]
 8043b3c:	68fa      	ldr	r2, [r7, #12]
 8043b3e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8043b40:	687b      	ldr	r3, [r7, #4]
 8043b42:	2220      	movs	r2, #32
 8043b44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8043b48:	687b      	ldr	r3, [r7, #4]
 8043b4a:	2200      	movs	r2, #0
 8043b4c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8043b50:	2300      	movs	r3, #0
}
 8043b52:	4618      	mov	r0, r3
 8043b54:	3710      	adds	r7, #16
 8043b56:	46bd      	mov	sp, r7
 8043b58:	bd80      	pop	{r7, pc}

08043b5a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8043b5a:	b580      	push	{r7, lr}
 8043b5c:	b084      	sub	sp, #16
 8043b5e:	af00      	add	r7, sp, #0
 8043b60:	6078      	str	r0, [r7, #4]
 8043b62:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8043b64:	687b      	ldr	r3, [r7, #4]
 8043b66:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8043b6a:	2b01      	cmp	r3, #1
 8043b6c:	d101      	bne.n	8043b72 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8043b6e:	2302      	movs	r3, #2
 8043b70:	e02d      	b.n	8043bce <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8043b72:	687b      	ldr	r3, [r7, #4]
 8043b74:	2201      	movs	r2, #1
 8043b76:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8043b7a:	687b      	ldr	r3, [r7, #4]
 8043b7c:	2224      	movs	r2, #36	; 0x24
 8043b7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8043b82:	687b      	ldr	r3, [r7, #4]
 8043b84:	681b      	ldr	r3, [r3, #0]
 8043b86:	681b      	ldr	r3, [r3, #0]
 8043b88:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8043b8a:	687b      	ldr	r3, [r7, #4]
 8043b8c:	681b      	ldr	r3, [r3, #0]
 8043b8e:	681a      	ldr	r2, [r3, #0]
 8043b90:	687b      	ldr	r3, [r7, #4]
 8043b92:	681b      	ldr	r3, [r3, #0]
 8043b94:	f022 0201 	bic.w	r2, r2, #1
 8043b98:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8043b9a:	687b      	ldr	r3, [r7, #4]
 8043b9c:	681b      	ldr	r3, [r3, #0]
 8043b9e:	689b      	ldr	r3, [r3, #8]
 8043ba0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8043ba4:	687b      	ldr	r3, [r7, #4]
 8043ba6:	681b      	ldr	r3, [r3, #0]
 8043ba8:	683a      	ldr	r2, [r7, #0]
 8043baa:	430a      	orrs	r2, r1
 8043bac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8043bae:	6878      	ldr	r0, [r7, #4]
 8043bb0:	f000 f812 	bl	8043bd8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8043bb4:	687b      	ldr	r3, [r7, #4]
 8043bb6:	681b      	ldr	r3, [r3, #0]
 8043bb8:	68fa      	ldr	r2, [r7, #12]
 8043bba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8043bbc:	687b      	ldr	r3, [r7, #4]
 8043bbe:	2220      	movs	r2, #32
 8043bc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8043bc4:	687b      	ldr	r3, [r7, #4]
 8043bc6:	2200      	movs	r2, #0
 8043bc8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8043bcc:	2300      	movs	r3, #0
}
 8043bce:	4618      	mov	r0, r3
 8043bd0:	3710      	adds	r7, #16
 8043bd2:	46bd      	mov	sp, r7
 8043bd4:	bd80      	pop	{r7, pc}
	...

08043bd8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8043bd8:	b480      	push	{r7}
 8043bda:	b089      	sub	sp, #36	; 0x24
 8043bdc:	af00      	add	r7, sp, #0
 8043bde:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8043be0:	4a2d      	ldr	r2, [pc, #180]	; (8043c98 <UARTEx_SetNbDataToProcess+0xc0>)
 8043be2:	f107 0314 	add.w	r3, r7, #20
 8043be6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8043bea:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8043bee:	4a2b      	ldr	r2, [pc, #172]	; (8043c9c <UARTEx_SetNbDataToProcess+0xc4>)
 8043bf0:	f107 030c 	add.w	r3, r7, #12
 8043bf4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8043bf8:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8043bfc:	687b      	ldr	r3, [r7, #4]
 8043bfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8043c00:	2b00      	cmp	r3, #0
 8043c02:	d108      	bne.n	8043c16 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8043c04:	687b      	ldr	r3, [r7, #4]
 8043c06:	2201      	movs	r2, #1
 8043c08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8043c0c:	687b      	ldr	r3, [r7, #4]
 8043c0e:	2201      	movs	r2, #1
 8043c10:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8043c14:	e039      	b.n	8043c8a <UARTEx_SetNbDataToProcess+0xb2>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8043c16:	2308      	movs	r3, #8
 8043c18:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8043c1a:	2308      	movs	r3, #8
 8043c1c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8043c1e:	687b      	ldr	r3, [r7, #4]
 8043c20:	681b      	ldr	r3, [r3, #0]
 8043c22:	689b      	ldr	r3, [r3, #8]
 8043c24:	0e5b      	lsrs	r3, r3, #25
 8043c26:	b2db      	uxtb	r3, r3
 8043c28:	f003 0307 	and.w	r3, r3, #7
 8043c2c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8043c2e:	687b      	ldr	r3, [r7, #4]
 8043c30:	681b      	ldr	r3, [r3, #0]
 8043c32:	689b      	ldr	r3, [r3, #8]
 8043c34:	0f5b      	lsrs	r3, r3, #29
 8043c36:	b2db      	uxtb	r3, r3
 8043c38:	f003 0307 	and.w	r3, r3, #7
 8043c3c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8043c3e:	7fbb      	ldrb	r3, [r7, #30]
 8043c40:	7f3a      	ldrb	r2, [r7, #28]
 8043c42:	3220      	adds	r2, #32
 8043c44:	443a      	add	r2, r7
 8043c46:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8043c4a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8043c4e:	7f3a      	ldrb	r2, [r7, #28]
 8043c50:	3220      	adds	r2, #32
 8043c52:	443a      	add	r2, r7
 8043c54:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8043c58:	fb93 f3f2 	sdiv	r3, r3, r2
 8043c5c:	b29a      	uxth	r2, r3
 8043c5e:	687b      	ldr	r3, [r7, #4]
 8043c60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8043c64:	7ffb      	ldrb	r3, [r7, #31]
 8043c66:	7f7a      	ldrb	r2, [r7, #29]
 8043c68:	3220      	adds	r2, #32
 8043c6a:	443a      	add	r2, r7
 8043c6c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8043c70:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8043c74:	7f7a      	ldrb	r2, [r7, #29]
 8043c76:	3220      	adds	r2, #32
 8043c78:	443a      	add	r2, r7
 8043c7a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8043c7e:	fb93 f3f2 	sdiv	r3, r3, r2
 8043c82:	b29a      	uxth	r2, r3
 8043c84:	687b      	ldr	r3, [r7, #4]
 8043c86:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8043c8a:	bf00      	nop
 8043c8c:	3724      	adds	r7, #36	; 0x24
 8043c8e:	46bd      	mov	sp, r7
 8043c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043c94:	4770      	bx	lr
 8043c96:	bf00      	nop
 8043c98:	08043db8 	.word	0x08043db8
 8043c9c:	08043dc0 	.word	0x08043dc0

08043ca0 <__libc_init_array>:
 8043ca0:	b570      	push	{r4, r5, r6, lr}
 8043ca2:	4d0d      	ldr	r5, [pc, #52]	; (8043cd8 <__libc_init_array+0x38>)
 8043ca4:	4c0d      	ldr	r4, [pc, #52]	; (8043cdc <__libc_init_array+0x3c>)
 8043ca6:	1b64      	subs	r4, r4, r5
 8043ca8:	10a4      	asrs	r4, r4, #2
 8043caa:	2600      	movs	r6, #0
 8043cac:	42a6      	cmp	r6, r4
 8043cae:	d109      	bne.n	8043cc4 <__libc_init_array+0x24>
 8043cb0:	4d0b      	ldr	r5, [pc, #44]	; (8043ce0 <__libc_init_array+0x40>)
 8043cb2:	4c0c      	ldr	r4, [pc, #48]	; (8043ce4 <__libc_init_array+0x44>)
 8043cb4:	f000 f820 	bl	8043cf8 <_init>
 8043cb8:	1b64      	subs	r4, r4, r5
 8043cba:	10a4      	asrs	r4, r4, #2
 8043cbc:	2600      	movs	r6, #0
 8043cbe:	42a6      	cmp	r6, r4
 8043cc0:	d105      	bne.n	8043cce <__libc_init_array+0x2e>
 8043cc2:	bd70      	pop	{r4, r5, r6, pc}
 8043cc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8043cc8:	4798      	blx	r3
 8043cca:	3601      	adds	r6, #1
 8043ccc:	e7ee      	b.n	8043cac <__libc_init_array+0xc>
 8043cce:	f855 3b04 	ldr.w	r3, [r5], #4
 8043cd2:	4798      	blx	r3
 8043cd4:	3601      	adds	r6, #1
 8043cd6:	e7f2      	b.n	8043cbe <__libc_init_array+0x1e>
 8043cd8:	08043e00 	.word	0x08043e00
 8043cdc:	08043e00 	.word	0x08043e00
 8043ce0:	08043e00 	.word	0x08043e00
 8043ce4:	08043e04 	.word	0x08043e04

08043ce8 <memset>:
 8043ce8:	4402      	add	r2, r0
 8043cea:	4603      	mov	r3, r0
 8043cec:	4293      	cmp	r3, r2
 8043cee:	d100      	bne.n	8043cf2 <memset+0xa>
 8043cf0:	4770      	bx	lr
 8043cf2:	f803 1b01 	strb.w	r1, [r3], #1
 8043cf6:	e7f9      	b.n	8043cec <memset+0x4>

08043cf8 <_init>:
 8043cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8043cfa:	bf00      	nop
 8043cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8043cfe:	bc08      	pop	{r3}
 8043d00:	469e      	mov	lr, r3
 8043d02:	4770      	bx	lr

08043d04 <_fini>:
 8043d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8043d06:	bf00      	nop
 8043d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8043d0a:	bc08      	pop	{r3}
 8043d0c:	469e      	mov	lr, r3
 8043d0e:	4770      	bx	lr
